'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset1
    Inherits DataSet
    
    Private tableInv_view_Pending_Indent As Inv_view_Pending_IndentDataTable
    
    Private tableISSUEDETAILS As ISSUEDETAILSDataTable
    
    Private tableissuesummary As issuesummaryDataTable
    
    Private tableINV_VIEW_INPUTTAX As INV_VIEW_INPUTTAXDataTable
    
    Private tableSTOCKISSUEDETAIL As STOCKISSUEDETAILDataTable
    
    Private tableSTOCKSUMMARY As STOCKSUMMARYDataTable
    
    Private tableISSUEREGISTER As ISSUEREGISTERDataTable
    
    Private tableVIEWSTOCKADJUSTMENT As VIEWSTOCKADJUSTMENTDataTable
    
    Private tableVIEWSTOCKREGISTER As VIEWSTOCKREGISTERDataTable
    
    Private tableInv_view_Pending_Pur As Inv_view_Pending_PurDataTable
    
    Private tableINVENTORYITEMMASTER As INVENTORYITEMMASTERDataTable
    
    Private tablePO_VIEW_VENDORMASTER As PO_VIEW_VENDORMASTERDataTable
    
    Private tableINV_PENDING_PURCHASE As INV_PENDING_PURCHASEDataTable
    
    Private tableVIEWPURCHASEREGISTERSUMMARY As VIEWPURCHASEREGISTERSUMMARYDataTable
    
    Private tableVIEW_FOCREPORT As VIEW_FOCREPORTDataTable
    
    Private tableInv_ExiseRpt As Inv_ExiseRptDataTable
    
    Private tableVIEWPURCHASEREGISTER As VIEWPURCHASEREGISTERDataTable
    
    Private tableVIEWPURCHASEREGISTERSUMMARY1 As VIEWPURCHASEREGISTERSUMMARY1DataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Inv_view_Pending_Indent")) Is Nothing) Then
                Me.Tables.Add(New Inv_view_Pending_IndentDataTable(ds.Tables("Inv_view_Pending_Indent")))
            End If
            If (Not (ds.Tables("ISSUEDETAILS")) Is Nothing) Then
                Me.Tables.Add(New ISSUEDETAILSDataTable(ds.Tables("ISSUEDETAILS")))
            End If
            If (Not (ds.Tables("issuesummary")) Is Nothing) Then
                Me.Tables.Add(New issuesummaryDataTable(ds.Tables("issuesummary")))
            End If
            If (Not (ds.Tables("INV_VIEW_INPUTTAX")) Is Nothing) Then
                Me.Tables.Add(New INV_VIEW_INPUTTAXDataTable(ds.Tables("INV_VIEW_INPUTTAX")))
            End If
            If (Not (ds.Tables("STOCKISSUEDETAIL")) Is Nothing) Then
                Me.Tables.Add(New STOCKISSUEDETAILDataTable(ds.Tables("STOCKISSUEDETAIL")))
            End If
            If (Not (ds.Tables("STOCKSUMMARY")) Is Nothing) Then
                Me.Tables.Add(New STOCKSUMMARYDataTable(ds.Tables("STOCKSUMMARY")))
            End If
            If (Not (ds.Tables("ISSUEREGISTER")) Is Nothing) Then
                Me.Tables.Add(New ISSUEREGISTERDataTable(ds.Tables("ISSUEREGISTER")))
            End If
            If (Not (ds.Tables("VIEWSTOCKADJUSTMENT")) Is Nothing) Then
                Me.Tables.Add(New VIEWSTOCKADJUSTMENTDataTable(ds.Tables("VIEWSTOCKADJUSTMENT")))
            End If
            If (Not (ds.Tables("VIEWSTOCKREGISTER")) Is Nothing) Then
                Me.Tables.Add(New VIEWSTOCKREGISTERDataTable(ds.Tables("VIEWSTOCKREGISTER")))
            End If
            If (Not (ds.Tables("Inv_view_Pending_Pur")) Is Nothing) Then
                Me.Tables.Add(New Inv_view_Pending_PurDataTable(ds.Tables("Inv_view_Pending_Pur")))
            End If
            If (Not (ds.Tables("INVENTORYITEMMASTER")) Is Nothing) Then
                Me.Tables.Add(New INVENTORYITEMMASTERDataTable(ds.Tables("INVENTORYITEMMASTER")))
            End If
            If (Not (ds.Tables("PO_VIEW_VENDORMASTER")) Is Nothing) Then
                Me.Tables.Add(New PO_VIEW_VENDORMASTERDataTable(ds.Tables("PO_VIEW_VENDORMASTER")))
            End If
            If (Not (ds.Tables("INV_PENDING_PURCHASE")) Is Nothing) Then
                Me.Tables.Add(New INV_PENDING_PURCHASEDataTable(ds.Tables("INV_PENDING_PURCHASE")))
            End If
            If (Not (ds.Tables("VIEWPURCHASEREGISTERSUMMARY")) Is Nothing) Then
                Me.Tables.Add(New VIEWPURCHASEREGISTERSUMMARYDataTable(ds.Tables("VIEWPURCHASEREGISTERSUMMARY")))
            End If
            If (Not (ds.Tables("VIEW_FOCREPORT")) Is Nothing) Then
                Me.Tables.Add(New VIEW_FOCREPORTDataTable(ds.Tables("VIEW_FOCREPORT")))
            End If
            If (Not (ds.Tables("Inv_ExiseRpt")) Is Nothing) Then
                Me.Tables.Add(New Inv_ExiseRptDataTable(ds.Tables("Inv_ExiseRpt")))
            End If
            If (Not (ds.Tables("VIEWPURCHASEREGISTER")) Is Nothing) Then
                Me.Tables.Add(New VIEWPURCHASEREGISTERDataTable(ds.Tables("VIEWPURCHASEREGISTER")))
            End If
            If (Not (ds.Tables("VIEWPURCHASEREGISTERSUMMARY1")) Is Nothing) Then
                Me.Tables.Add(New VIEWPURCHASEREGISTERSUMMARY1DataTable(ds.Tables("VIEWPURCHASEREGISTERSUMMARY1")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_view_Pending_Indent As Inv_view_Pending_IndentDataTable
        Get
            Return Me.tableInv_view_Pending_Indent
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ISSUEDETAILS As ISSUEDETAILSDataTable
        Get
            Return Me.tableISSUEDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property issuesummary As issuesummaryDataTable
        Get
            Return Me.tableissuesummary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INV_VIEW_INPUTTAX As INV_VIEW_INPUTTAXDataTable
        Get
            Return Me.tableINV_VIEW_INPUTTAX
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCKISSUEDETAIL As STOCKISSUEDETAILDataTable
        Get
            Return Me.tableSTOCKISSUEDETAIL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STOCKSUMMARY As STOCKSUMMARYDataTable
        Get
            Return Me.tableSTOCKSUMMARY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ISSUEREGISTER As ISSUEREGISTERDataTable
        Get
            Return Me.tableISSUEREGISTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEWSTOCKADJUSTMENT As VIEWSTOCKADJUSTMENTDataTable
        Get
            Return Me.tableVIEWSTOCKADJUSTMENT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEWSTOCKREGISTER As VIEWSTOCKREGISTERDataTable
        Get
            Return Me.tableVIEWSTOCKREGISTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_view_Pending_Pur As Inv_view_Pending_PurDataTable
        Get
            Return Me.tableInv_view_Pending_Pur
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INVENTORYITEMMASTER As INVENTORYITEMMASTERDataTable
        Get
            Return Me.tableINVENTORYITEMMASTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PO_VIEW_VENDORMASTER As PO_VIEW_VENDORMASTERDataTable
        Get
            Return Me.tablePO_VIEW_VENDORMASTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property INV_PENDING_PURCHASE As INV_PENDING_PURCHASEDataTable
        Get
            Return Me.tableINV_PENDING_PURCHASE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEWPURCHASEREGISTERSUMMARY As VIEWPURCHASEREGISTERSUMMARYDataTable
        Get
            Return Me.tableVIEWPURCHASEREGISTERSUMMARY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_FOCREPORT As VIEW_FOCREPORTDataTable
        Get
            Return Me.tableVIEW_FOCREPORT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Inv_ExiseRpt As Inv_ExiseRptDataTable
        Get
            Return Me.tableInv_ExiseRpt
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEWPURCHASEREGISTER As VIEWPURCHASEREGISTERDataTable
        Get
            Return Me.tableVIEWPURCHASEREGISTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEWPURCHASEREGISTERSUMMARY1 As VIEWPURCHASEREGISTERSUMMARY1DataTable
        Get
            Return Me.tableVIEWPURCHASEREGISTERSUMMARY1
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset1 = CType(MyBase.Clone,Dataset1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Inv_view_Pending_Indent")) Is Nothing) Then
            Me.Tables.Add(New Inv_view_Pending_IndentDataTable(ds.Tables("Inv_view_Pending_Indent")))
        End If
        If (Not (ds.Tables("ISSUEDETAILS")) Is Nothing) Then
            Me.Tables.Add(New ISSUEDETAILSDataTable(ds.Tables("ISSUEDETAILS")))
        End If
        If (Not (ds.Tables("issuesummary")) Is Nothing) Then
            Me.Tables.Add(New issuesummaryDataTable(ds.Tables("issuesummary")))
        End If
        If (Not (ds.Tables("INV_VIEW_INPUTTAX")) Is Nothing) Then
            Me.Tables.Add(New INV_VIEW_INPUTTAXDataTable(ds.Tables("INV_VIEW_INPUTTAX")))
        End If
        If (Not (ds.Tables("STOCKISSUEDETAIL")) Is Nothing) Then
            Me.Tables.Add(New STOCKISSUEDETAILDataTable(ds.Tables("STOCKISSUEDETAIL")))
        End If
        If (Not (ds.Tables("STOCKSUMMARY")) Is Nothing) Then
            Me.Tables.Add(New STOCKSUMMARYDataTable(ds.Tables("STOCKSUMMARY")))
        End If
        If (Not (ds.Tables("ISSUEREGISTER")) Is Nothing) Then
            Me.Tables.Add(New ISSUEREGISTERDataTable(ds.Tables("ISSUEREGISTER")))
        End If
        If (Not (ds.Tables("VIEWSTOCKADJUSTMENT")) Is Nothing) Then
            Me.Tables.Add(New VIEWSTOCKADJUSTMENTDataTable(ds.Tables("VIEWSTOCKADJUSTMENT")))
        End If
        If (Not (ds.Tables("VIEWSTOCKREGISTER")) Is Nothing) Then
            Me.Tables.Add(New VIEWSTOCKREGISTERDataTable(ds.Tables("VIEWSTOCKREGISTER")))
        End If
        If (Not (ds.Tables("Inv_view_Pending_Pur")) Is Nothing) Then
            Me.Tables.Add(New Inv_view_Pending_PurDataTable(ds.Tables("Inv_view_Pending_Pur")))
        End If
        If (Not (ds.Tables("INVENTORYITEMMASTER")) Is Nothing) Then
            Me.Tables.Add(New INVENTORYITEMMASTERDataTable(ds.Tables("INVENTORYITEMMASTER")))
        End If
        If (Not (ds.Tables("PO_VIEW_VENDORMASTER")) Is Nothing) Then
            Me.Tables.Add(New PO_VIEW_VENDORMASTERDataTable(ds.Tables("PO_VIEW_VENDORMASTER")))
        End If
        If (Not (ds.Tables("INV_PENDING_PURCHASE")) Is Nothing) Then
            Me.Tables.Add(New INV_PENDING_PURCHASEDataTable(ds.Tables("INV_PENDING_PURCHASE")))
        End If
        If (Not (ds.Tables("VIEWPURCHASEREGISTERSUMMARY")) Is Nothing) Then
            Me.Tables.Add(New VIEWPURCHASEREGISTERSUMMARYDataTable(ds.Tables("VIEWPURCHASEREGISTERSUMMARY")))
        End If
        If (Not (ds.Tables("VIEW_FOCREPORT")) Is Nothing) Then
            Me.Tables.Add(New VIEW_FOCREPORTDataTable(ds.Tables("VIEW_FOCREPORT")))
        End If
        If (Not (ds.Tables("Inv_ExiseRpt")) Is Nothing) Then
            Me.Tables.Add(New Inv_ExiseRptDataTable(ds.Tables("Inv_ExiseRpt")))
        End If
        If (Not (ds.Tables("VIEWPURCHASEREGISTER")) Is Nothing) Then
            Me.Tables.Add(New VIEWPURCHASEREGISTERDataTable(ds.Tables("VIEWPURCHASEREGISTER")))
        End If
        If (Not (ds.Tables("VIEWPURCHASEREGISTERSUMMARY1")) Is Nothing) Then
            Me.Tables.Add(New VIEWPURCHASEREGISTERSUMMARY1DataTable(ds.Tables("VIEWPURCHASEREGISTERSUMMARY1")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableInv_view_Pending_Indent = CType(Me.Tables("Inv_view_Pending_Indent"),Inv_view_Pending_IndentDataTable)
        If (Not (Me.tableInv_view_Pending_Indent) Is Nothing) Then
            Me.tableInv_view_Pending_Indent.InitVars
        End If
        Me.tableISSUEDETAILS = CType(Me.Tables("ISSUEDETAILS"),ISSUEDETAILSDataTable)
        If (Not (Me.tableISSUEDETAILS) Is Nothing) Then
            Me.tableISSUEDETAILS.InitVars
        End If
        Me.tableissuesummary = CType(Me.Tables("issuesummary"),issuesummaryDataTable)
        If (Not (Me.tableissuesummary) Is Nothing) Then
            Me.tableissuesummary.InitVars
        End If
        Me.tableINV_VIEW_INPUTTAX = CType(Me.Tables("INV_VIEW_INPUTTAX"),INV_VIEW_INPUTTAXDataTable)
        If (Not (Me.tableINV_VIEW_INPUTTAX) Is Nothing) Then
            Me.tableINV_VIEW_INPUTTAX.InitVars
        End If
        Me.tableSTOCKISSUEDETAIL = CType(Me.Tables("STOCKISSUEDETAIL"),STOCKISSUEDETAILDataTable)
        If (Not (Me.tableSTOCKISSUEDETAIL) Is Nothing) Then
            Me.tableSTOCKISSUEDETAIL.InitVars
        End If
        Me.tableSTOCKSUMMARY = CType(Me.Tables("STOCKSUMMARY"),STOCKSUMMARYDataTable)
        If (Not (Me.tableSTOCKSUMMARY) Is Nothing) Then
            Me.tableSTOCKSUMMARY.InitVars
        End If
        Me.tableISSUEREGISTER = CType(Me.Tables("ISSUEREGISTER"),ISSUEREGISTERDataTable)
        If (Not (Me.tableISSUEREGISTER) Is Nothing) Then
            Me.tableISSUEREGISTER.InitVars
        End If
        Me.tableVIEWSTOCKADJUSTMENT = CType(Me.Tables("VIEWSTOCKADJUSTMENT"),VIEWSTOCKADJUSTMENTDataTable)
        If (Not (Me.tableVIEWSTOCKADJUSTMENT) Is Nothing) Then
            Me.tableVIEWSTOCKADJUSTMENT.InitVars
        End If
        Me.tableVIEWSTOCKREGISTER = CType(Me.Tables("VIEWSTOCKREGISTER"),VIEWSTOCKREGISTERDataTable)
        If (Not (Me.tableVIEWSTOCKREGISTER) Is Nothing) Then
            Me.tableVIEWSTOCKREGISTER.InitVars
        End If
        Me.tableInv_view_Pending_Pur = CType(Me.Tables("Inv_view_Pending_Pur"),Inv_view_Pending_PurDataTable)
        If (Not (Me.tableInv_view_Pending_Pur) Is Nothing) Then
            Me.tableInv_view_Pending_Pur.InitVars
        End If
        Me.tableINVENTORYITEMMASTER = CType(Me.Tables("INVENTORYITEMMASTER"),INVENTORYITEMMASTERDataTable)
        If (Not (Me.tableINVENTORYITEMMASTER) Is Nothing) Then
            Me.tableINVENTORYITEMMASTER.InitVars
        End If
        Me.tablePO_VIEW_VENDORMASTER = CType(Me.Tables("PO_VIEW_VENDORMASTER"),PO_VIEW_VENDORMASTERDataTable)
        If (Not (Me.tablePO_VIEW_VENDORMASTER) Is Nothing) Then
            Me.tablePO_VIEW_VENDORMASTER.InitVars
        End If
        Me.tableINV_PENDING_PURCHASE = CType(Me.Tables("INV_PENDING_PURCHASE"),INV_PENDING_PURCHASEDataTable)
        If (Not (Me.tableINV_PENDING_PURCHASE) Is Nothing) Then
            Me.tableINV_PENDING_PURCHASE.InitVars
        End If
        Me.tableVIEWPURCHASEREGISTERSUMMARY = CType(Me.Tables("VIEWPURCHASEREGISTERSUMMARY"),VIEWPURCHASEREGISTERSUMMARYDataTable)
        If (Not (Me.tableVIEWPURCHASEREGISTERSUMMARY) Is Nothing) Then
            Me.tableVIEWPURCHASEREGISTERSUMMARY.InitVars
        End If
        Me.tableVIEW_FOCREPORT = CType(Me.Tables("VIEW_FOCREPORT"),VIEW_FOCREPORTDataTable)
        If (Not (Me.tableVIEW_FOCREPORT) Is Nothing) Then
            Me.tableVIEW_FOCREPORT.InitVars
        End If
        Me.tableInv_ExiseRpt = CType(Me.Tables("Inv_ExiseRpt"),Inv_ExiseRptDataTable)
        If (Not (Me.tableInv_ExiseRpt) Is Nothing) Then
            Me.tableInv_ExiseRpt.InitVars
        End If
        Me.tableVIEWPURCHASEREGISTER = CType(Me.Tables("VIEWPURCHASEREGISTER"),VIEWPURCHASEREGISTERDataTable)
        If (Not (Me.tableVIEWPURCHASEREGISTER) Is Nothing) Then
            Me.tableVIEWPURCHASEREGISTER.InitVars
        End If
        Me.tableVIEWPURCHASEREGISTERSUMMARY1 = CType(Me.Tables("VIEWPURCHASEREGISTERSUMMARY1"),VIEWPURCHASEREGISTERSUMMARY1DataTable)
        If (Not (Me.tableVIEWPURCHASEREGISTERSUMMARY1) Is Nothing) Then
            Me.tableVIEWPURCHASEREGISTERSUMMARY1.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableInv_view_Pending_Indent = New Inv_view_Pending_IndentDataTable
        Me.Tables.Add(Me.tableInv_view_Pending_Indent)
        Me.tableISSUEDETAILS = New ISSUEDETAILSDataTable
        Me.Tables.Add(Me.tableISSUEDETAILS)
        Me.tableissuesummary = New issuesummaryDataTable
        Me.Tables.Add(Me.tableissuesummary)
        Me.tableINV_VIEW_INPUTTAX = New INV_VIEW_INPUTTAXDataTable
        Me.Tables.Add(Me.tableINV_VIEW_INPUTTAX)
        Me.tableSTOCKISSUEDETAIL = New STOCKISSUEDETAILDataTable
        Me.Tables.Add(Me.tableSTOCKISSUEDETAIL)
        Me.tableSTOCKSUMMARY = New STOCKSUMMARYDataTable
        Me.Tables.Add(Me.tableSTOCKSUMMARY)
        Me.tableISSUEREGISTER = New ISSUEREGISTERDataTable
        Me.Tables.Add(Me.tableISSUEREGISTER)
        Me.tableVIEWSTOCKADJUSTMENT = New VIEWSTOCKADJUSTMENTDataTable
        Me.Tables.Add(Me.tableVIEWSTOCKADJUSTMENT)
        Me.tableVIEWSTOCKREGISTER = New VIEWSTOCKREGISTERDataTable
        Me.Tables.Add(Me.tableVIEWSTOCKREGISTER)
        Me.tableInv_view_Pending_Pur = New Inv_view_Pending_PurDataTable
        Me.Tables.Add(Me.tableInv_view_Pending_Pur)
        Me.tableINVENTORYITEMMASTER = New INVENTORYITEMMASTERDataTable
        Me.Tables.Add(Me.tableINVENTORYITEMMASTER)
        Me.tablePO_VIEW_VENDORMASTER = New PO_VIEW_VENDORMASTERDataTable
        Me.Tables.Add(Me.tablePO_VIEW_VENDORMASTER)
        Me.tableINV_PENDING_PURCHASE = New INV_PENDING_PURCHASEDataTable
        Me.Tables.Add(Me.tableINV_PENDING_PURCHASE)
        Me.tableVIEWPURCHASEREGISTERSUMMARY = New VIEWPURCHASEREGISTERSUMMARYDataTable
        Me.Tables.Add(Me.tableVIEWPURCHASEREGISTERSUMMARY)
        Me.tableVIEW_FOCREPORT = New VIEW_FOCREPORTDataTable
        Me.Tables.Add(Me.tableVIEW_FOCREPORT)
        Me.tableInv_ExiseRpt = New Inv_ExiseRptDataTable
        Me.Tables.Add(Me.tableInv_ExiseRpt)
        Me.tableVIEWPURCHASEREGISTER = New VIEWPURCHASEREGISTERDataTable
        Me.Tables.Add(Me.tableVIEWPURCHASEREGISTER)
        Me.tableVIEWPURCHASEREGISTERSUMMARY1 = New VIEWPURCHASEREGISTERSUMMARY1DataTable
        Me.Tables.Add(Me.tableVIEWPURCHASEREGISTERSUMMARY1)
    End Sub
    
    Private Function ShouldSerializeInv_view_Pending_Indent() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeISSUEDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeissuesummary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeINV_VIEW_INPUTTAX() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSTOCKISSUEDETAIL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeSTOCKSUMMARY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeISSUEREGISTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEWSTOCKADJUSTMENT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEWSTOCKREGISTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_view_Pending_Pur() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeINVENTORYITEMMASTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePO_VIEW_VENDORMASTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeINV_PENDING_PURCHASE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEWPURCHASEREGISTERSUMMARY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_FOCREPORT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeInv_ExiseRpt() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEWPURCHASEREGISTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEWPURCHASEREGISTERSUMMARY1() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub Inv_view_Pending_IndentRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_view_Pending_IndentRowChangeEvent)
    
    Public Delegate Sub ISSUEDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As ISSUEDETAILSRowChangeEvent)
    
    Public Delegate Sub issuesummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As issuesummaryRowChangeEvent)
    
    Public Delegate Sub INV_VIEW_INPUTTAXRowChangeEventHandler(ByVal sender As Object, ByVal e As INV_VIEW_INPUTTAXRowChangeEvent)
    
    Public Delegate Sub STOCKISSUEDETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As STOCKISSUEDETAILRowChangeEvent)
    
    Public Delegate Sub STOCKSUMMARYRowChangeEventHandler(ByVal sender As Object, ByVal e As STOCKSUMMARYRowChangeEvent)
    
    Public Delegate Sub ISSUEREGISTERRowChangeEventHandler(ByVal sender As Object, ByVal e As ISSUEREGISTERRowChangeEvent)
    
    Public Delegate Sub VIEWSTOCKADJUSTMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEWSTOCKADJUSTMENTRowChangeEvent)
    
    Public Delegate Sub VIEWSTOCKREGISTERRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEWSTOCKREGISTERRowChangeEvent)
    
    Public Delegate Sub Inv_view_Pending_PurRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_view_Pending_PurRowChangeEvent)
    
    Public Delegate Sub INVENTORYITEMMASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As INVENTORYITEMMASTERRowChangeEvent)
    
    Public Delegate Sub PO_VIEW_VENDORMASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As PO_VIEW_VENDORMASTERRowChangeEvent)
    
    Public Delegate Sub INV_PENDING_PURCHASERowChangeEventHandler(ByVal sender As Object, ByVal e As INV_PENDING_PURCHASERowChangeEvent)
    
    Public Delegate Sub VIEWPURCHASEREGISTERSUMMARYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEWPURCHASEREGISTERSUMMARYRowChangeEvent)
    
    Public Delegate Sub VIEW_FOCREPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_FOCREPORTRowChangeEvent)
    
    Public Delegate Sub Inv_ExiseRptRowChangeEventHandler(ByVal sender As Object, ByVal e As Inv_ExiseRptRowChangeEvent)
    
    Public Delegate Sub VIEWPURCHASEREGISTERRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEWPURCHASEREGISTERRowChangeEvent)
    
    Public Delegate Sub VIEWPURCHASEREGISTERSUMMARY1RowChangeEventHandler(ByVal sender As Object, ByVal e As VIEWPURCHASEREGISTERSUMMARY1RowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_view_Pending_IndentDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnIndent_no As DataColumn
        
        Private columnindent_date As DataColumn
        
        Private columnstorelocationname As DataColumn
        
        Private columnitemcode As DataColumn
        
        Private columnitemname As DataColumn
        
        Private columnqty As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnvoid As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_view_Pending_Indent")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property Indent_noColumn As DataColumn
            Get
                Return Me.columnIndent_no
            End Get
        End Property
        
        Friend ReadOnly Property indent_dateColumn As DataColumn
            Get
                Return Me.columnindent_date
            End Get
        End Property
        
        Friend ReadOnly Property storelocationnameColumn As DataColumn
            Get
                Return Me.columnstorelocationname
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property itemnameColumn As DataColumn
            Get
                Return Me.columnitemname
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property voidColumn As DataColumn
            Get
                Return Me.columnvoid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_view_Pending_IndentRow
            Get
                Return CType(Me.Rows(index),Inv_view_Pending_IndentRow)
            End Get
        End Property
        
        Public Event Inv_view_Pending_IndentRowChanged As Inv_view_Pending_IndentRowChangeEventHandler
        
        Public Event Inv_view_Pending_IndentRowChanging As Inv_view_Pending_IndentRowChangeEventHandler
        
        Public Event Inv_view_Pending_IndentRowDeleted As Inv_view_Pending_IndentRowChangeEventHandler
        
        Public Event Inv_view_Pending_IndentRowDeleting As Inv_view_Pending_IndentRowChangeEventHandler
        
        Public Overloads Sub AddInv_view_Pending_IndentRow(ByVal row As Inv_view_Pending_IndentRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_view_Pending_IndentRow(ByVal Indent_no As String, ByVal indent_date As Date, ByVal storelocationname As String, ByVal itemcode As String, ByVal itemname As String, ByVal qty As Decimal, ByVal amount As Decimal, ByVal void As String) As Inv_view_Pending_IndentRow
            Dim rowInv_view_Pending_IndentRow As Inv_view_Pending_IndentRow = CType(Me.NewRow,Inv_view_Pending_IndentRow)
            rowInv_view_Pending_IndentRow.ItemArray = New Object() {Indent_no, indent_date, storelocationname, itemcode, itemname, qty, amount, void}
            Me.Rows.Add(rowInv_view_Pending_IndentRow)
            Return rowInv_view_Pending_IndentRow
        End Function
        
        Public Function FindByIndent_no(ByVal Indent_no As String) As Inv_view_Pending_IndentRow
            Return CType(Me.Rows.Find(New Object() {Indent_no}),Inv_view_Pending_IndentRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_view_Pending_IndentDataTable = CType(MyBase.Clone,Inv_view_Pending_IndentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_view_Pending_IndentDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnIndent_no = Me.Columns("Indent_no")
            Me.columnindent_date = Me.Columns("indent_date")
            Me.columnstorelocationname = Me.Columns("storelocationname")
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnitemname = Me.Columns("itemname")
            Me.columnqty = Me.Columns("qty")
            Me.columnamount = Me.Columns("amount")
            Me.columnvoid = Me.Columns("void")
        End Sub
        
        Private Sub InitClass()
            Me.columnIndent_no = New DataColumn("Indent_no", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIndent_no)
            Me.columnindent_date = New DataColumn("indent_date", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnindent_date)
            Me.columnstorelocationname = New DataColumn("storelocationname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstorelocationname)
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnitemname = New DataColumn("itemname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemname)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnvoid = New DataColumn("void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvoid)
            Me.Constraints.Add(New UniqueConstraint("Dataset1Key1", New DataColumn() {Me.columnIndent_no}, true))
            Me.columnIndent_no.AllowDBNull = false
            Me.columnIndent_no.Unique = true
        End Sub
        
        Public Function NewInv_view_Pending_IndentRow() As Inv_view_Pending_IndentRow
            Return CType(Me.NewRow,Inv_view_Pending_IndentRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_view_Pending_IndentRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_view_Pending_IndentRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_view_Pending_IndentRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_IndentRowChanged(Me, New Inv_view_Pending_IndentRowChangeEvent(CType(e.Row,Inv_view_Pending_IndentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_view_Pending_IndentRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_IndentRowChanging(Me, New Inv_view_Pending_IndentRowChangeEvent(CType(e.Row,Inv_view_Pending_IndentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_view_Pending_IndentRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_IndentRowDeleted(Me, New Inv_view_Pending_IndentRowChangeEvent(CType(e.Row,Inv_view_Pending_IndentRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_view_Pending_IndentRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_IndentRowDeleting(Me, New Inv_view_Pending_IndentRowChangeEvent(CType(e.Row,Inv_view_Pending_IndentRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_view_Pending_IndentRow(ByVal row As Inv_view_Pending_IndentRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_view_Pending_IndentRow
        Inherits DataRow
        
        Private tableInv_view_Pending_Indent As Inv_view_Pending_IndentDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_view_Pending_Indent = CType(Me.Table,Inv_view_Pending_IndentDataTable)
        End Sub
        
        Public Property Indent_no As String
            Get
                Return CType(Me(Me.tableInv_view_Pending_Indent.Indent_noColumn),String)
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.Indent_noColumn) = value
            End Set
        End Property
        
        Public Property indent_date As Date
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Indent.indent_dateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.indent_dateColumn) = value
            End Set
        End Property
        
        Public Property storelocationname As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Indent.storelocationnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.storelocationnameColumn) = value
            End Set
        End Property
        
        Public Property itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Indent.itemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property itemname As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Indent.itemnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.itemnameColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Indent.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.qtyColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Indent.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.amountColumn) = value
            End Set
        End Property
        
        Public Property void As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Indent.voidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Indent.voidColumn) = value
            End Set
        End Property
        
        Public Function Isindent_dateNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Indent.indent_dateColumn)
        End Function
        
        Public Sub Setindent_dateNull()
            Me(Me.tableInv_view_Pending_Indent.indent_dateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstorelocationnameNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Indent.storelocationnameColumn)
        End Function
        
        Public Sub SetstorelocationnameNull()
            Me(Me.tableInv_view_Pending_Indent.storelocationnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Indent.itemcodeColumn)
        End Function
        
        Public Sub SetitemcodeNull()
            Me(Me.tableInv_view_Pending_Indent.itemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemnameNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Indent.itemnameColumn)
        End Function
        
        Public Sub SetitemnameNull()
            Me(Me.tableInv_view_Pending_Indent.itemnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Indent.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableInv_view_Pending_Indent.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Indent.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableInv_view_Pending_Indent.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvoidNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Indent.voidColumn)
        End Function
        
        Public Sub SetvoidNull()
            Me(Me.tableInv_view_Pending_Indent.voidColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_view_Pending_IndentRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_view_Pending_IndentRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_view_Pending_IndentRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_view_Pending_IndentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ISSUEDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnLOCATIONNAME As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnVOID As DataColumn
        
        Private columnGROUPDESC As DataColumn
        
        Private columnDOCDETAILS As DataColumn
        
        Private columnDOCDATE As DataColumn
        
        Friend Sub New()
            MyBase.New("ISSUEDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property LOCATIONNAMEColumn As DataColumn
            Get
                Return Me.columnLOCATIONNAME
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property VOIDColumn As DataColumn
            Get
                Return Me.columnVOID
            End Get
        End Property
        
        Friend ReadOnly Property GROUPDESCColumn As DataColumn
            Get
                Return Me.columnGROUPDESC
            End Get
        End Property
        
        Friend ReadOnly Property DOCDETAILSColumn As DataColumn
            Get
                Return Me.columnDOCDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property DOCDATEColumn As DataColumn
            Get
                Return Me.columnDOCDATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ISSUEDETAILSRow
            Get
                Return CType(Me.Rows(index),ISSUEDETAILSRow)
            End Get
        End Property
        
        Public Event ISSUEDETAILSRowChanged As ISSUEDETAILSRowChangeEventHandler
        
        Public Event ISSUEDETAILSRowChanging As ISSUEDETAILSRowChangeEventHandler
        
        Public Event ISSUEDETAILSRowDeleted As ISSUEDETAILSRowChangeEventHandler
        
        Public Event ISSUEDETAILSRowDeleting As ISSUEDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddISSUEDETAILSRow(ByVal row As ISSUEDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddISSUEDETAILSRow(ByVal ITEMCODE As String, ByVal ITEMNAME As String, ByVal LOCATIONNAME As String, ByVal UOM As String, ByVal QTY As Decimal, ByVal RATE As Decimal, ByVal AMOUNT As Decimal, ByVal VOID As String, ByVal GROUPDESC As String, ByVal DOCDETAILS As String, ByVal DOCDATE As Date) As ISSUEDETAILSRow
            Dim rowISSUEDETAILSRow As ISSUEDETAILSRow = CType(Me.NewRow,ISSUEDETAILSRow)
            rowISSUEDETAILSRow.ItemArray = New Object() {ITEMCODE, ITEMNAME, LOCATIONNAME, UOM, QTY, RATE, AMOUNT, VOID, GROUPDESC, DOCDETAILS, DOCDATE}
            Me.Rows.Add(rowISSUEDETAILSRow)
            Return rowISSUEDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ISSUEDETAILSDataTable = CType(MyBase.Clone,ISSUEDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ISSUEDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnLOCATIONNAME = Me.Columns("LOCATIONNAME")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnVOID = Me.Columns("VOID")
            Me.columnGROUPDESC = Me.Columns("GROUPDESC")
            Me.columnDOCDETAILS = Me.Columns("DOCDETAILS")
            Me.columnDOCDATE = Me.Columns("DOCDATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnLOCATIONNAME = New DataColumn("LOCATIONNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCATIONNAME)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnVOID = New DataColumn("VOID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVOID)
            Me.columnGROUPDESC = New DataColumn("GROUPDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPDESC)
            Me.columnDOCDETAILS = New DataColumn("DOCDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDETAILS)
            Me.columnDOCDATE = New DataColumn("DOCDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDATE)
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnLOCATIONNAME.ReadOnly = true
            Me.columnUOM.ReadOnly = true
            Me.columnQTY.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnVOID.ReadOnly = true
            Me.columnGROUPDESC.ReadOnly = true
            Me.columnDOCDETAILS.ReadOnly = true
        End Sub
        
        Public Function NewISSUEDETAILSRow() As ISSUEDETAILSRow
            Return CType(Me.NewRow,ISSUEDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ISSUEDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ISSUEDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ISSUEDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent ISSUEDETAILSRowChanged(Me, New ISSUEDETAILSRowChangeEvent(CType(e.Row,ISSUEDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ISSUEDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent ISSUEDETAILSRowChanging(Me, New ISSUEDETAILSRowChangeEvent(CType(e.Row,ISSUEDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ISSUEDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent ISSUEDETAILSRowDeleted(Me, New ISSUEDETAILSRowChangeEvent(CType(e.Row,ISSUEDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ISSUEDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent ISSUEDETAILSRowDeleting(Me, New ISSUEDETAILSRowChangeEvent(CType(e.Row,ISSUEDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveISSUEDETAILSRow(ByVal row As ISSUEDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ISSUEDETAILSRow
        Inherits DataRow
        
        Private tableISSUEDETAILS As ISSUEDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableISSUEDETAILS = CType(Me.Table,ISSUEDETAILSDataTable)
        End Sub
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property LOCATIONNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.LOCATIONNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.LOCATIONNAMEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.UOMColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.RATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property VOID As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.VOIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.VOIDColumn) = value
            End Set
        End Property
        
        Public Property GROUPDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.GROUPDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.GROUPDESCColumn) = value
            End Set
        End Property
        
        Public Property DOCDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.DOCDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.DOCDETAILSColumn) = value
            End Set
        End Property
        
        Public Property DOCDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableISSUEDETAILS.DOCDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEDETAILS.DOCDATEColumn) = value
            End Set
        End Property
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableISSUEDETAILS.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tableISSUEDETAILS.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCATIONNAMENull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.LOCATIONNAMEColumn)
        End Function
        
        Public Sub SetLOCATIONNAMENull()
            Me(Me.tableISSUEDETAILS.LOCATIONNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableISSUEDETAILS.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableISSUEDETAILS.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableISSUEDETAILS.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableISSUEDETAILS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVOIDNull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.VOIDColumn)
        End Function
        
        Public Sub SetVOIDNull()
            Me(Me.tableISSUEDETAILS.VOIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPDESCNull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.GROUPDESCColumn)
        End Function
        
        Public Sub SetGROUPDESCNull()
            Me(Me.tableISSUEDETAILS.GROUPDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.DOCDETAILSColumn)
        End Function
        
        Public Sub SetDOCDETAILSNull()
            Me(Me.tableISSUEDETAILS.DOCDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCDATENull() As Boolean
            Return Me.IsNull(Me.tableISSUEDETAILS.DOCDATEColumn)
        End Function
        
        Public Sub SetDOCDATENull()
            Me(Me.tableISSUEDETAILS.DOCDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ISSUEDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ISSUEDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ISSUEDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ISSUEDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class issuesummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAutoid As DataColumn
        
        Private columnItemcode As DataColumn
        
        Private columnItemdesc As DataColumn
        
        Private columnUom As DataColumn
        
        Private columnIssueqty As DataColumn
        
        Private columnIssuerate As DataColumn
        
        Private columnIssueamount As DataColumn
        
        Private columnGROUPNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("issuesummary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AutoidColumn As DataColumn
            Get
                Return Me.columnAutoid
            End Get
        End Property
        
        Friend ReadOnly Property ItemcodeColumn As DataColumn
            Get
                Return Me.columnItemcode
            End Get
        End Property
        
        Friend ReadOnly Property ItemdescColumn As DataColumn
            Get
                Return Me.columnItemdesc
            End Get
        End Property
        
        Friend ReadOnly Property UomColumn As DataColumn
            Get
                Return Me.columnUom
            End Get
        End Property
        
        Friend ReadOnly Property IssueqtyColumn As DataColumn
            Get
                Return Me.columnIssueqty
            End Get
        End Property
        
        Friend ReadOnly Property IssuerateColumn As DataColumn
            Get
                Return Me.columnIssuerate
            End Get
        End Property
        
        Friend ReadOnly Property IssueamountColumn As DataColumn
            Get
                Return Me.columnIssueamount
            End Get
        End Property
        
        Friend ReadOnly Property GROUPNAMEColumn As DataColumn
            Get
                Return Me.columnGROUPNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As issuesummaryRow
            Get
                Return CType(Me.Rows(index),issuesummaryRow)
            End Get
        End Property
        
        Public Event issuesummaryRowChanged As issuesummaryRowChangeEventHandler
        
        Public Event issuesummaryRowChanging As issuesummaryRowChangeEventHandler
        
        Public Event issuesummaryRowDeleted As issuesummaryRowChangeEventHandler
        
        Public Event issuesummaryRowDeleting As issuesummaryRowChangeEventHandler
        
        Public Overloads Sub AddissuesummaryRow(ByVal row As issuesummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddissuesummaryRow(ByVal Itemcode As String, ByVal Itemdesc As String, ByVal Uom As String, ByVal Issueqty As Decimal, ByVal Issuerate As Decimal, ByVal Issueamount As Decimal, ByVal GROUPNAME As String) As issuesummaryRow
            Dim rowissuesummaryRow As issuesummaryRow = CType(Me.NewRow,issuesummaryRow)
            rowissuesummaryRow.ItemArray = New Object() {Nothing, Itemcode, Itemdesc, Uom, Issueqty, Issuerate, Issueamount, GROUPNAME}
            Me.Rows.Add(rowissuesummaryRow)
            Return rowissuesummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As issuesummaryDataTable = CType(MyBase.Clone,issuesummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New issuesummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAutoid = Me.Columns("Autoid")
            Me.columnItemcode = Me.Columns("Itemcode")
            Me.columnItemdesc = Me.Columns("Itemdesc")
            Me.columnUom = Me.Columns("Uom")
            Me.columnIssueqty = Me.Columns("Issueqty")
            Me.columnIssuerate = Me.Columns("Issuerate")
            Me.columnIssueamount = Me.Columns("Issueamount")
            Me.columnGROUPNAME = Me.Columns("GROUPNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnAutoid = New DataColumn("Autoid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAutoid)
            Me.columnItemcode = New DataColumn("Itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemcode)
            Me.columnItemdesc = New DataColumn("Itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemdesc)
            Me.columnUom = New DataColumn("Uom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUom)
            Me.columnIssueqty = New DataColumn("Issueqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssueqty)
            Me.columnIssuerate = New DataColumn("Issuerate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssuerate)
            Me.columnIssueamount = New DataColumn("Issueamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssueamount)
            Me.columnGROUPNAME = New DataColumn("GROUPNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPNAME)
            Me.columnAutoid.AutoIncrement = true
            Me.columnAutoid.AllowDBNull = false
            Me.columnAutoid.ReadOnly = true
        End Sub
        
        Public Function NewissuesummaryRow() As issuesummaryRow
            Return CType(Me.NewRow,issuesummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New issuesummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(issuesummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.issuesummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent issuesummaryRowChanged(Me, New issuesummaryRowChangeEvent(CType(e.Row,issuesummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.issuesummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent issuesummaryRowChanging(Me, New issuesummaryRowChangeEvent(CType(e.Row,issuesummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.issuesummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent issuesummaryRowDeleted(Me, New issuesummaryRowChangeEvent(CType(e.Row,issuesummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.issuesummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent issuesummaryRowDeleting(Me, New issuesummaryRowChangeEvent(CType(e.Row,issuesummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveissuesummaryRow(ByVal row As issuesummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class issuesummaryRow
        Inherits DataRow
        
        Private tableissuesummary As issuesummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableissuesummary = CType(Me.Table,issuesummaryDataTable)
        End Sub
        
        Public Property Autoid As Decimal
            Get
                Return CType(Me(Me.tableissuesummary.AutoidColumn),Decimal)
            End Get
            Set
                Me(Me.tableissuesummary.AutoidColumn) = value
            End Set
        End Property
        
        Public Property Itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableissuesummary.ItemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuesummary.ItemcodeColumn) = value
            End Set
        End Property
        
        Public Property Itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableissuesummary.ItemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuesummary.ItemdescColumn) = value
            End Set
        End Property
        
        Public Property Uom As String
            Get
                Try 
                    Return CType(Me(Me.tableissuesummary.UomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuesummary.UomColumn) = value
            End Set
        End Property
        
        Public Property Issueqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableissuesummary.IssueqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuesummary.IssueqtyColumn) = value
            End Set
        End Property
        
        Public Property Issuerate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableissuesummary.IssuerateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuesummary.IssuerateColumn) = value
            End Set
        End Property
        
        Public Property Issueamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableissuesummary.IssueamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuesummary.IssueamountColumn) = value
            End Set
        End Property
        
        Public Property GROUPNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableissuesummary.GROUPNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableissuesummary.GROUPNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsItemcodeNull() As Boolean
            Return Me.IsNull(Me.tableissuesummary.ItemcodeColumn)
        End Function
        
        Public Sub SetItemcodeNull()
            Me(Me.tableissuesummary.ItemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemdescNull() As Boolean
            Return Me.IsNull(Me.tableissuesummary.ItemdescColumn)
        End Function
        
        Public Sub SetItemdescNull()
            Me(Me.tableissuesummary.ItemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUomNull() As Boolean
            Return Me.IsNull(Me.tableissuesummary.UomColumn)
        End Function
        
        Public Sub SetUomNull()
            Me(Me.tableissuesummary.UomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssueqtyNull() As Boolean
            Return Me.IsNull(Me.tableissuesummary.IssueqtyColumn)
        End Function
        
        Public Sub SetIssueqtyNull()
            Me(Me.tableissuesummary.IssueqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssuerateNull() As Boolean
            Return Me.IsNull(Me.tableissuesummary.IssuerateColumn)
        End Function
        
        Public Sub SetIssuerateNull()
            Me(Me.tableissuesummary.IssuerateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssueamountNull() As Boolean
            Return Me.IsNull(Me.tableissuesummary.IssueamountColumn)
        End Function
        
        Public Sub SetIssueamountNull()
            Me(Me.tableissuesummary.IssueamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPNAMENull() As Boolean
            Return Me.IsNull(Me.tableissuesummary.GROUPNAMEColumn)
        End Function
        
        Public Sub SetGROUPNAMENull()
            Me(Me.tableissuesummary.GROUPNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class issuesummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As issuesummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As issuesummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As issuesummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INV_VIEW_INPUTTAXDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGRNDETAILS As DataColumn
        
        Private columnGRNDATE As DataColumn
        
        Private columnBILLDETAILS As DataColumn
        
        Private columnBILLDATE As DataColumn
        
        Private columnCRCODE As DataColumn
        
        Private columnCRNAME As DataColumn
        
        Private columnDRCODE As DataColumn
        
        Private columnDRNAME As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnBILLAMOUNT As DataColumn
        
        Private columnTPER As DataColumn
        
        Private columnTAMT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("INV_VIEW_INPUTTAX")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GRNDETAILSColumn As DataColumn
            Get
                Return Me.columnGRNDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property GRNDATEColumn As DataColumn
            Get
                Return Me.columnGRNDATE
            End Get
        End Property
        
        Friend ReadOnly Property BILLDETAILSColumn As DataColumn
            Get
                Return Me.columnBILLDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property BILLDATEColumn As DataColumn
            Get
                Return Me.columnBILLDATE
            End Get
        End Property
        
        Friend ReadOnly Property CRCODEColumn As DataColumn
            Get
                Return Me.columnCRCODE
            End Get
        End Property
        
        Friend ReadOnly Property CRNAMEColumn As DataColumn
            Get
                Return Me.columnCRNAME
            End Get
        End Property
        
        Friend ReadOnly Property DRCODEColumn As DataColumn
            Get
                Return Me.columnDRCODE
            End Get
        End Property
        
        Friend ReadOnly Property DRNAMEColumn As DataColumn
            Get
                Return Me.columnDRNAME
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property BILLAMOUNTColumn As DataColumn
            Get
                Return Me.columnBILLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TPERColumn As DataColumn
            Get
                Return Me.columnTPER
            End Get
        End Property
        
        Friend ReadOnly Property TAMTColumn As DataColumn
            Get
                Return Me.columnTAMT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As INV_VIEW_INPUTTAXRow
            Get
                Return CType(Me.Rows(index),INV_VIEW_INPUTTAXRow)
            End Get
        End Property
        
        Public Event INV_VIEW_INPUTTAXRowChanged As INV_VIEW_INPUTTAXRowChangeEventHandler
        
        Public Event INV_VIEW_INPUTTAXRowChanging As INV_VIEW_INPUTTAXRowChangeEventHandler
        
        Public Event INV_VIEW_INPUTTAXRowDeleted As INV_VIEW_INPUTTAXRowChangeEventHandler
        
        Public Event INV_VIEW_INPUTTAXRowDeleting As INV_VIEW_INPUTTAXRowChangeEventHandler
        
        Public Overloads Sub AddINV_VIEW_INPUTTAXRow(ByVal row As INV_VIEW_INPUTTAXRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddINV_VIEW_INPUTTAXRow(ByVal GRNDETAILS As String, ByVal GRNDATE As Date, ByVal BILLDETAILS As String, ByVal BILLDATE As Date, ByVal CRCODE As String, ByVal CRNAME As String, ByVal DRCODE As String, ByVal DRNAME As String, ByVal ITEMCODE As String, ByVal ITEMNAME As String, ByVal BILLAMOUNT As Decimal, ByVal TPER As Decimal, ByVal TAMT As Decimal, ByVal TOTALAMOUNT As Decimal) As INV_VIEW_INPUTTAXRow
            Dim rowINV_VIEW_INPUTTAXRow As INV_VIEW_INPUTTAXRow = CType(Me.NewRow,INV_VIEW_INPUTTAXRow)
            rowINV_VIEW_INPUTTAXRow.ItemArray = New Object() {GRNDETAILS, GRNDATE, BILLDETAILS, BILLDATE, CRCODE, CRNAME, DRCODE, DRNAME, ITEMCODE, ITEMNAME, BILLAMOUNT, TPER, TAMT, TOTALAMOUNT}
            Me.Rows.Add(rowINV_VIEW_INPUTTAXRow)
            Return rowINV_VIEW_INPUTTAXRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As INV_VIEW_INPUTTAXDataTable = CType(MyBase.Clone,INV_VIEW_INPUTTAXDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New INV_VIEW_INPUTTAXDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGRNDETAILS = Me.Columns("GRNDETAILS")
            Me.columnGRNDATE = Me.Columns("GRNDATE")
            Me.columnBILLDETAILS = Me.Columns("BILLDETAILS")
            Me.columnBILLDATE = Me.Columns("BILLDATE")
            Me.columnCRCODE = Me.Columns("CRCODE")
            Me.columnCRNAME = Me.Columns("CRNAME")
            Me.columnDRCODE = Me.Columns("DRCODE")
            Me.columnDRNAME = Me.Columns("DRNAME")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnBILLAMOUNT = Me.Columns("BILLAMOUNT")
            Me.columnTPER = Me.Columns("TPER")
            Me.columnTAMT = Me.Columns("TAMT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnGRNDETAILS = New DataColumn("GRNDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDETAILS)
            Me.columnGRNDATE = New DataColumn("GRNDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDATE)
            Me.columnBILLDETAILS = New DataColumn("BILLDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDETAILS)
            Me.columnBILLDATE = New DataColumn("BILLDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLDATE)
            Me.columnCRCODE = New DataColumn("CRCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCRCODE)
            Me.columnCRNAME = New DataColumn("CRNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCRNAME)
            Me.columnDRCODE = New DataColumn("DRCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRCODE)
            Me.columnDRNAME = New DataColumn("DRNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRNAME)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnBILLAMOUNT = New DataColumn("BILLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLAMOUNT)
            Me.columnTPER = New DataColumn("TPER", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTPER)
            Me.columnTAMT = New DataColumn("TAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAMT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnGRNDETAILS.ReadOnly = true
            Me.columnGRNDATE.ReadOnly = true
            Me.columnBILLDETAILS.ReadOnly = true
            Me.columnBILLDATE.ReadOnly = true
            Me.columnCRCODE.ReadOnly = true
            Me.columnCRNAME.ReadOnly = true
            Me.columnDRCODE.ReadOnly = true
            Me.columnDRNAME.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnBILLAMOUNT.ReadOnly = true
            Me.columnTPER.ReadOnly = true
            Me.columnTAMT.ReadOnly = true
            Me.columnTOTALAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewINV_VIEW_INPUTTAXRow() As INV_VIEW_INPUTTAXRow
            Return CType(Me.NewRow,INV_VIEW_INPUTTAXRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New INV_VIEW_INPUTTAXRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INV_VIEW_INPUTTAXRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INV_VIEW_INPUTTAXRowChangedEvent) Is Nothing) Then
                RaiseEvent INV_VIEW_INPUTTAXRowChanged(Me, New INV_VIEW_INPUTTAXRowChangeEvent(CType(e.Row,INV_VIEW_INPUTTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INV_VIEW_INPUTTAXRowChangingEvent) Is Nothing) Then
                RaiseEvent INV_VIEW_INPUTTAXRowChanging(Me, New INV_VIEW_INPUTTAXRowChangeEvent(CType(e.Row,INV_VIEW_INPUTTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INV_VIEW_INPUTTAXRowDeletedEvent) Is Nothing) Then
                RaiseEvent INV_VIEW_INPUTTAXRowDeleted(Me, New INV_VIEW_INPUTTAXRowChangeEvent(CType(e.Row,INV_VIEW_INPUTTAXRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INV_VIEW_INPUTTAXRowDeletingEvent) Is Nothing) Then
                RaiseEvent INV_VIEW_INPUTTAXRowDeleting(Me, New INV_VIEW_INPUTTAXRowChangeEvent(CType(e.Row,INV_VIEW_INPUTTAXRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveINV_VIEW_INPUTTAXRow(ByVal row As INV_VIEW_INPUTTAXRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INV_VIEW_INPUTTAXRow
        Inherits DataRow
        
        Private tableINV_VIEW_INPUTTAX As INV_VIEW_INPUTTAXDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableINV_VIEW_INPUTTAX = CType(Me.Table,INV_VIEW_INPUTTAXDataTable)
        End Sub
        
        Public Property GRNDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.GRNDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.GRNDETAILSColumn) = value
            End Set
        End Property
        
        Public Property GRNDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.GRNDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.GRNDATEColumn) = value
            End Set
        End Property
        
        Public Property BILLDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.BILLDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.BILLDETAILSColumn) = value
            End Set
        End Property
        
        Public Property BILLDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.BILLDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.BILLDATEColumn) = value
            End Set
        End Property
        
        Public Property CRCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.CRCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.CRCODEColumn) = value
            End Set
        End Property
        
        Public Property CRNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.CRNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.CRNAMEColumn) = value
            End Set
        End Property
        
        Public Property DRCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.DRCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.DRCODEColumn) = value
            End Set
        End Property
        
        Public Property DRNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.DRNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.DRNAMEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property BILLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.BILLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.BILLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TPER As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.TPERColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.TPERColumn) = value
            End Set
        End Property
        
        Public Property TAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.TAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.TAMTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_VIEW_INPUTTAX.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_VIEW_INPUTTAX.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsGRNDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.GRNDETAILSColumn)
        End Function
        
        Public Sub SetGRNDETAILSNull()
            Me(Me.tableINV_VIEW_INPUTTAX.GRNDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGRNDATENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.GRNDATEColumn)
        End Function
        
        Public Sub SetGRNDATENull()
            Me(Me.tableINV_VIEW_INPUTTAX.GRNDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.BILLDETAILSColumn)
        End Function
        
        Public Sub SetBILLDETAILSNull()
            Me(Me.tableINV_VIEW_INPUTTAX.BILLDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLDATENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.BILLDATEColumn)
        End Function
        
        Public Sub SetBILLDATENull()
            Me(Me.tableINV_VIEW_INPUTTAX.BILLDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCRCODENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.CRCODEColumn)
        End Function
        
        Public Sub SetCRCODENull()
            Me(Me.tableINV_VIEW_INPUTTAX.CRCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCRNAMENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.CRNAMEColumn)
        End Function
        
        Public Sub SetCRNAMENull()
            Me(Me.tableINV_VIEW_INPUTTAX.CRNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRCODENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.DRCODEColumn)
        End Function
        
        Public Sub SetDRCODENull()
            Me(Me.tableINV_VIEW_INPUTTAX.DRCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRNAMENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.DRNAMEColumn)
        End Function
        
        Public Sub SetDRNAMENull()
            Me(Me.tableINV_VIEW_INPUTTAX.DRNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableINV_VIEW_INPUTTAX.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tableINV_VIEW_INPUTTAX.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.BILLAMOUNTColumn)
        End Function
        
        Public Sub SetBILLAMOUNTNull()
            Me(Me.tableINV_VIEW_INPUTTAX.BILLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTPERNull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.TPERColumn)
        End Function
        
        Public Sub SetTPERNull()
            Me(Me.tableINV_VIEW_INPUTTAX.TPERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAMTNull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.TAMTColumn)
        End Function
        
        Public Sub SetTAMTNull()
            Me(Me.tableINV_VIEW_INPUTTAX.TAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableINV_VIEW_INPUTTAX.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableINV_VIEW_INPUTTAX.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INV_VIEW_INPUTTAXRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As INV_VIEW_INPUTTAXRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As INV_VIEW_INPUTTAXRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As INV_VIEW_INPUTTAXRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STOCKISSUEDETAILDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAutoid As DataColumn
        
        Private columnDocno As DataColumn
        
        Private columnDocdetails As DataColumn
        
        Private columnDocdate As DataColumn
        
        Private columnIndentNo As DataColumn
        
        Private columnIndentDate As DataColumn
        
        Private columnStorelocationcode As DataColumn
        
        Private columnStorelocationname As DataColumn
        
        Private columnOpstorelocationcode As DataColumn
        
        Private columnOpstorelocationname As DataColumn
        
        Private columnItemcode As DataColumn
        
        Private columnItemname As DataColumn
        
        Private columnUom As DataColumn
        
        Private columnQty As DataColumn
        
        Private columnRate As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnDblamt As DataColumn
        
        Private columnDblconv As DataColumn
        
        Private columnHighratio As DataColumn
        
        Private columnGroupcode As DataColumn
        
        Private columnSubgroupcode As DataColumn
        
        Private columnVoid As DataColumn
        
        Private columnAvgqty As DataColumn
        
        Private columnAvgrate As DataColumn
        
        Private columnAdduser As DataColumn
        
        Private columnAdddatetime As DataColumn
        
        Private columnUpdateuser As DataColumn
        
        Private columnUpdatetime As DataColumn
        
        Friend Sub New()
            MyBase.New("STOCKISSUEDETAIL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AutoidColumn As DataColumn
            Get
                Return Me.columnAutoid
            End Get
        End Property
        
        Friend ReadOnly Property DocnoColumn As DataColumn
            Get
                Return Me.columnDocno
            End Get
        End Property
        
        Friend ReadOnly Property DocdetailsColumn As DataColumn
            Get
                Return Me.columnDocdetails
            End Get
        End Property
        
        Friend ReadOnly Property DocdateColumn As DataColumn
            Get
                Return Me.columnDocdate
            End Get
        End Property
        
        Friend ReadOnly Property IndentNoColumn As DataColumn
            Get
                Return Me.columnIndentNo
            End Get
        End Property
        
        Friend ReadOnly Property IndentDateColumn As DataColumn
            Get
                Return Me.columnIndentDate
            End Get
        End Property
        
        Friend ReadOnly Property StorelocationcodeColumn As DataColumn
            Get
                Return Me.columnStorelocationcode
            End Get
        End Property
        
        Friend ReadOnly Property StorelocationnameColumn As DataColumn
            Get
                Return Me.columnStorelocationname
            End Get
        End Property
        
        Friend ReadOnly Property OpstorelocationcodeColumn As DataColumn
            Get
                Return Me.columnOpstorelocationcode
            End Get
        End Property
        
        Friend ReadOnly Property OpstorelocationnameColumn As DataColumn
            Get
                Return Me.columnOpstorelocationname
            End Get
        End Property
        
        Friend ReadOnly Property ItemcodeColumn As DataColumn
            Get
                Return Me.columnItemcode
            End Get
        End Property
        
        Friend ReadOnly Property ItemnameColumn As DataColumn
            Get
                Return Me.columnItemname
            End Get
        End Property
        
        Friend ReadOnly Property UomColumn As DataColumn
            Get
                Return Me.columnUom
            End Get
        End Property
        
        Friend ReadOnly Property QtyColumn As DataColumn
            Get
                Return Me.columnQty
            End Get
        End Property
        
        Friend ReadOnly Property RateColumn As DataColumn
            Get
                Return Me.columnRate
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property DblamtColumn As DataColumn
            Get
                Return Me.columnDblamt
            End Get
        End Property
        
        Friend ReadOnly Property DblconvColumn As DataColumn
            Get
                Return Me.columnDblconv
            End Get
        End Property
        
        Friend ReadOnly Property HighratioColumn As DataColumn
            Get
                Return Me.columnHighratio
            End Get
        End Property
        
        Friend ReadOnly Property GroupcodeColumn As DataColumn
            Get
                Return Me.columnGroupcode
            End Get
        End Property
        
        Friend ReadOnly Property SubgroupcodeColumn As DataColumn
            Get
                Return Me.columnSubgroupcode
            End Get
        End Property
        
        Friend ReadOnly Property VoidColumn As DataColumn
            Get
                Return Me.columnVoid
            End Get
        End Property
        
        Friend ReadOnly Property AvgqtyColumn As DataColumn
            Get
                Return Me.columnAvgqty
            End Get
        End Property
        
        Friend ReadOnly Property AvgrateColumn As DataColumn
            Get
                Return Me.columnAvgrate
            End Get
        End Property
        
        Friend ReadOnly Property AdduserColumn As DataColumn
            Get
                Return Me.columnAdduser
            End Get
        End Property
        
        Friend ReadOnly Property AdddatetimeColumn As DataColumn
            Get
                Return Me.columnAdddatetime
            End Get
        End Property
        
        Friend ReadOnly Property UpdateuserColumn As DataColumn
            Get
                Return Me.columnUpdateuser
            End Get
        End Property
        
        Friend ReadOnly Property UpdatetimeColumn As DataColumn
            Get
                Return Me.columnUpdatetime
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCKISSUEDETAILRow
            Get
                Return CType(Me.Rows(index),STOCKISSUEDETAILRow)
            End Get
        End Property
        
        Public Event STOCKISSUEDETAILRowChanged As STOCKISSUEDETAILRowChangeEventHandler
        
        Public Event STOCKISSUEDETAILRowChanging As STOCKISSUEDETAILRowChangeEventHandler
        
        Public Event STOCKISSUEDETAILRowDeleted As STOCKISSUEDETAILRowChangeEventHandler
        
        Public Event STOCKISSUEDETAILRowDeleting As STOCKISSUEDETAILRowChangeEventHandler
        
        Public Overloads Sub AddSTOCKISSUEDETAILRow(ByVal row As STOCKISSUEDETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTOCKISSUEDETAILRow( _
                    ByVal Docno As String,  _
                    ByVal Docdetails As String,  _
                    ByVal Docdate As Date,  _
                    ByVal IndentNo As String,  _
                    ByVal IndentDate As Date,  _
                    ByVal Storelocationcode As String,  _
                    ByVal Storelocationname As String,  _
                    ByVal Opstorelocationcode As String,  _
                    ByVal Opstorelocationname As String,  _
                    ByVal Itemcode As String,  _
                    ByVal Itemname As String,  _
                    ByVal Uom As String,  _
                    ByVal Qty As Decimal,  _
                    ByVal Rate As Decimal,  _
                    ByVal Amount As Decimal,  _
                    ByVal Dblamt As Decimal,  _
                    ByVal Dblconv As String,  _
                    ByVal Highratio As Decimal,  _
                    ByVal Groupcode As String,  _
                    ByVal Subgroupcode As String,  _
                    ByVal Void As String,  _
                    ByVal Avgqty As Decimal,  _
                    ByVal Avgrate As Decimal,  _
                    ByVal Adduser As String,  _
                    ByVal Adddatetime As Date,  _
                    ByVal Updateuser As String,  _
                    ByVal Updatetime As Date) As STOCKISSUEDETAILRow
            Dim rowSTOCKISSUEDETAILRow As STOCKISSUEDETAILRow = CType(Me.NewRow,STOCKISSUEDETAILRow)
            rowSTOCKISSUEDETAILRow.ItemArray = New Object() {Nothing, Docno, Docdetails, Docdate, IndentNo, IndentDate, Storelocationcode, Storelocationname, Opstorelocationcode, Opstorelocationname, Itemcode, Itemname, Uom, Qty, Rate, Amount, Dblamt, Dblconv, Highratio, Groupcode, Subgroupcode, Void, Avgqty, Avgrate, Adduser, Adddatetime, Updateuser, Updatetime}
            Me.Rows.Add(rowSTOCKISSUEDETAILRow)
            Return rowSTOCKISSUEDETAILRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STOCKISSUEDETAILDataTable = CType(MyBase.Clone,STOCKISSUEDETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STOCKISSUEDETAILDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAutoid = Me.Columns("Autoid")
            Me.columnDocno = Me.Columns("Docno")
            Me.columnDocdetails = Me.Columns("Docdetails")
            Me.columnDocdate = Me.Columns("Docdate")
            Me.columnIndentNo = Me.Columns("IndentNo")
            Me.columnIndentDate = Me.Columns("IndentDate")
            Me.columnStorelocationcode = Me.Columns("Storelocationcode")
            Me.columnStorelocationname = Me.Columns("Storelocationname")
            Me.columnOpstorelocationcode = Me.Columns("Opstorelocationcode")
            Me.columnOpstorelocationname = Me.Columns("Opstorelocationname")
            Me.columnItemcode = Me.Columns("Itemcode")
            Me.columnItemname = Me.Columns("Itemname")
            Me.columnUom = Me.Columns("Uom")
            Me.columnQty = Me.Columns("Qty")
            Me.columnRate = Me.Columns("Rate")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnDblamt = Me.Columns("Dblamt")
            Me.columnDblconv = Me.Columns("Dblconv")
            Me.columnHighratio = Me.Columns("Highratio")
            Me.columnGroupcode = Me.Columns("Groupcode")
            Me.columnSubgroupcode = Me.Columns("Subgroupcode")
            Me.columnVoid = Me.Columns("Void")
            Me.columnAvgqty = Me.Columns("Avgqty")
            Me.columnAvgrate = Me.Columns("Avgrate")
            Me.columnAdduser = Me.Columns("Adduser")
            Me.columnAdddatetime = Me.Columns("Adddatetime")
            Me.columnUpdateuser = Me.Columns("Updateuser")
            Me.columnUpdatetime = Me.Columns("Updatetime")
        End Sub
        
        Private Sub InitClass()
            Me.columnAutoid = New DataColumn("Autoid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAutoid)
            Me.columnDocno = New DataColumn("Docno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocno)
            Me.columnDocdetails = New DataColumn("Docdetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocdetails)
            Me.columnDocdate = New DataColumn("Docdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDocdate)
            Me.columnIndentNo = New DataColumn("IndentNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIndentNo)
            Me.columnIndentDate = New DataColumn("IndentDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIndentDate)
            Me.columnStorelocationcode = New DataColumn("Storelocationcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStorelocationcode)
            Me.columnStorelocationname = New DataColumn("Storelocationname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStorelocationname)
            Me.columnOpstorelocationcode = New DataColumn("Opstorelocationcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOpstorelocationcode)
            Me.columnOpstorelocationname = New DataColumn("Opstorelocationname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOpstorelocationname)
            Me.columnItemcode = New DataColumn("Itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemcode)
            Me.columnItemname = New DataColumn("Itemname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemname)
            Me.columnUom = New DataColumn("Uom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUom)
            Me.columnQty = New DataColumn("Qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQty)
            Me.columnRate = New DataColumn("Rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRate)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnDblamt = New DataColumn("Dblamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDblamt)
            Me.columnDblconv = New DataColumn("Dblconv", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDblconv)
            Me.columnHighratio = New DataColumn("Highratio", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHighratio)
            Me.columnGroupcode = New DataColumn("Groupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGroupcode)
            Me.columnSubgroupcode = New DataColumn("Subgroupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSubgroupcode)
            Me.columnVoid = New DataColumn("Void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVoid)
            Me.columnAvgqty = New DataColumn("Avgqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAvgqty)
            Me.columnAvgrate = New DataColumn("Avgrate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAvgrate)
            Me.columnAdduser = New DataColumn("Adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdduser)
            Me.columnAdddatetime = New DataColumn("Adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdddatetime)
            Me.columnUpdateuser = New DataColumn("Updateuser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdateuser)
            Me.columnUpdatetime = New DataColumn("Updatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUpdatetime)
            Me.columnAutoid.AutoIncrement = true
            Me.columnAutoid.AllowDBNull = false
            Me.columnAutoid.ReadOnly = true
            Me.columnDocno.AllowDBNull = false
        End Sub
        
        Public Function NewSTOCKISSUEDETAILRow() As STOCKISSUEDETAILRow
            Return CType(Me.NewRow,STOCKISSUEDETAILRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STOCKISSUEDETAILRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STOCKISSUEDETAILRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCKISSUEDETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent STOCKISSUEDETAILRowChanged(Me, New STOCKISSUEDETAILRowChangeEvent(CType(e.Row,STOCKISSUEDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCKISSUEDETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent STOCKISSUEDETAILRowChanging(Me, New STOCKISSUEDETAILRowChangeEvent(CType(e.Row,STOCKISSUEDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCKISSUEDETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCKISSUEDETAILRowDeleted(Me, New STOCKISSUEDETAILRowChangeEvent(CType(e.Row,STOCKISSUEDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCKISSUEDETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCKISSUEDETAILRowDeleting(Me, New STOCKISSUEDETAILRowChangeEvent(CType(e.Row,STOCKISSUEDETAILRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTOCKISSUEDETAILRow(ByVal row As STOCKISSUEDETAILRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STOCKISSUEDETAILRow
        Inherits DataRow
        
        Private tableSTOCKISSUEDETAIL As STOCKISSUEDETAILDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCKISSUEDETAIL = CType(Me.Table,STOCKISSUEDETAILDataTable)
        End Sub
        
        Public Property Autoid As Decimal
            Get
                Return CType(Me(Me.tableSTOCKISSUEDETAIL.AutoidColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.AutoidColumn) = value
            End Set
        End Property
        
        Public Property Docno As String
            Get
                Return CType(Me(Me.tableSTOCKISSUEDETAIL.DocnoColumn),String)
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.DocnoColumn) = value
            End Set
        End Property
        
        Public Property Docdetails As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.DocdetailsColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.DocdetailsColumn) = value
            End Set
        End Property
        
        Public Property Docdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.DocdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.DocdateColumn) = value
            End Set
        End Property
        
        Public Property IndentNo As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.IndentNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.IndentNoColumn) = value
            End Set
        End Property
        
        Public Property IndentDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.IndentDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.IndentDateColumn) = value
            End Set
        End Property
        
        Public Property Storelocationcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.StorelocationcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.StorelocationcodeColumn) = value
            End Set
        End Property
        
        Public Property Storelocationname As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.StorelocationnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.StorelocationnameColumn) = value
            End Set
        End Property
        
        Public Property Opstorelocationcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.OpstorelocationcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.OpstorelocationcodeColumn) = value
            End Set
        End Property
        
        Public Property Opstorelocationname As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.OpstorelocationnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.OpstorelocationnameColumn) = value
            End Set
        End Property
        
        Public Property Itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.ItemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.ItemcodeColumn) = value
            End Set
        End Property
        
        Public Property Itemname As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.ItemnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.ItemnameColumn) = value
            End Set
        End Property
        
        Public Property Uom As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.UomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.UomColumn) = value
            End Set
        End Property
        
        Public Property Qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.QtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.QtyColumn) = value
            End Set
        End Property
        
        Public Property Rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.RateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.RateColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.AmountColumn) = value
            End Set
        End Property
        
        Public Property Dblamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.DblamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.DblamtColumn) = value
            End Set
        End Property
        
        Public Property Dblconv As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.DblconvColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.DblconvColumn) = value
            End Set
        End Property
        
        Public Property Highratio As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.HighratioColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.HighratioColumn) = value
            End Set
        End Property
        
        Public Property Groupcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.GroupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.GroupcodeColumn) = value
            End Set
        End Property
        
        Public Property Subgroupcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.SubgroupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.SubgroupcodeColumn) = value
            End Set
        End Property
        
        Public Property Void As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.VoidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.VoidColumn) = value
            End Set
        End Property
        
        Public Property Avgqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.AvgqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.AvgqtyColumn) = value
            End Set
        End Property
        
        Public Property Avgrate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.AvgrateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.AvgrateColumn) = value
            End Set
        End Property
        
        Public Property Adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.AdduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.AdduserColumn) = value
            End Set
        End Property
        
        Public Property Adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.AdddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.AdddatetimeColumn) = value
            End Set
        End Property
        
        Public Property Updateuser As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.UpdateuserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.UpdateuserColumn) = value
            End Set
        End Property
        
        Public Property Updatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKISSUEDETAIL.UpdatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKISSUEDETAIL.UpdatetimeColumn) = value
            End Set
        End Property
        
        Public Function IsDocdetailsNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.DocdetailsColumn)
        End Function
        
        Public Sub SetDocdetailsNull()
            Me(Me.tableSTOCKISSUEDETAIL.DocdetailsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDocdateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.DocdateColumn)
        End Function
        
        Public Sub SetDocdateNull()
            Me(Me.tableSTOCKISSUEDETAIL.DocdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIndentNoNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.IndentNoColumn)
        End Function
        
        Public Sub SetIndentNoNull()
            Me(Me.tableSTOCKISSUEDETAIL.IndentNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIndentDateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.IndentDateColumn)
        End Function
        
        Public Sub SetIndentDateNull()
            Me(Me.tableSTOCKISSUEDETAIL.IndentDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStorelocationcodeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.StorelocationcodeColumn)
        End Function
        
        Public Sub SetStorelocationcodeNull()
            Me(Me.tableSTOCKISSUEDETAIL.StorelocationcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStorelocationnameNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.StorelocationnameColumn)
        End Function
        
        Public Sub SetStorelocationnameNull()
            Me(Me.tableSTOCKISSUEDETAIL.StorelocationnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOpstorelocationcodeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.OpstorelocationcodeColumn)
        End Function
        
        Public Sub SetOpstorelocationcodeNull()
            Me(Me.tableSTOCKISSUEDETAIL.OpstorelocationcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOpstorelocationnameNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.OpstorelocationnameColumn)
        End Function
        
        Public Sub SetOpstorelocationnameNull()
            Me(Me.tableSTOCKISSUEDETAIL.OpstorelocationnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemcodeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.ItemcodeColumn)
        End Function
        
        Public Sub SetItemcodeNull()
            Me(Me.tableSTOCKISSUEDETAIL.ItemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemnameNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.ItemnameColumn)
        End Function
        
        Public Sub SetItemnameNull()
            Me(Me.tableSTOCKISSUEDETAIL.ItemnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUomNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.UomColumn)
        End Function
        
        Public Sub SetUomNull()
            Me(Me.tableSTOCKISSUEDETAIL.UomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.QtyColumn)
        End Function
        
        Public Sub SetQtyNull()
            Me(Me.tableSTOCKISSUEDETAIL.QtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.RateColumn)
        End Function
        
        Public Sub SetRateNull()
            Me(Me.tableSTOCKISSUEDETAIL.RateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableSTOCKISSUEDETAIL.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDblamtNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.DblamtColumn)
        End Function
        
        Public Sub SetDblamtNull()
            Me(Me.tableSTOCKISSUEDETAIL.DblamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDblconvNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.DblconvColumn)
        End Function
        
        Public Sub SetDblconvNull()
            Me(Me.tableSTOCKISSUEDETAIL.DblconvColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHighratioNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.HighratioColumn)
        End Function
        
        Public Sub SetHighratioNull()
            Me(Me.tableSTOCKISSUEDETAIL.HighratioColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGroupcodeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.GroupcodeColumn)
        End Function
        
        Public Sub SetGroupcodeNull()
            Me(Me.tableSTOCKISSUEDETAIL.GroupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSubgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.SubgroupcodeColumn)
        End Function
        
        Public Sub SetSubgroupcodeNull()
            Me(Me.tableSTOCKISSUEDETAIL.SubgroupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVoidNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.VoidColumn)
        End Function
        
        Public Sub SetVoidNull()
            Me(Me.tableSTOCKISSUEDETAIL.VoidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAvgqtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.AvgqtyColumn)
        End Function
        
        Public Sub SetAvgqtyNull()
            Me(Me.tableSTOCKISSUEDETAIL.AvgqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAvgrateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.AvgrateColumn)
        End Function
        
        Public Sub SetAvgrateNull()
            Me(Me.tableSTOCKISSUEDETAIL.AvgrateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdduserNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.AdduserColumn)
        End Function
        
        Public Sub SetAdduserNull()
            Me(Me.tableSTOCKISSUEDETAIL.AdduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdddatetimeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.AdddatetimeColumn)
        End Function
        
        Public Sub SetAdddatetimeNull()
            Me(Me.tableSTOCKISSUEDETAIL.AdddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdateuserNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.UpdateuserColumn)
        End Function
        
        Public Sub SetUpdateuserNull()
            Me(Me.tableSTOCKISSUEDETAIL.UpdateuserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUpdatetimeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKISSUEDETAIL.UpdatetimeColumn)
        End Function
        
        Public Sub SetUpdatetimeNull()
            Me(Me.tableSTOCKISSUEDETAIL.UpdatetimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STOCKISSUEDETAILRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STOCKISSUEDETAILRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STOCKISSUEDETAILRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STOCKISSUEDETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STOCKSUMMARYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnAutoid As DataColumn
        
        Private columnItemcode As DataColumn
        
        Private columnItemname As DataColumn
        
        Private columnUom As DataColumn
        
        Private columnValuation As DataColumn
        
        Private columnOpqty As DataColumn
        
        Private columnOprate As DataColumn
        
        Private columnOpval As DataColumn
        
        Private columnRcvqty As DataColumn
        
        Private columnRcvrate As DataColumn
        
        Private columnRcvval As DataColumn
        
        Private columnIssqty As DataColumn
        
        Private columnIssrate As DataColumn
        
        Private columnIssval As DataColumn
        
        Private columnClsqty As DataColumn
        
        Private columnClsrate As DataColumn
        
        Private columnClsval As DataColumn
        
        Private columnSTORECODE As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnGROUPNAME As DataColumn
        
        Private columnSUBGROUPCODE As DataColumn
        
        Private columnSUBGROUPNAME As DataColumn
        
        Private columnpegsqty As DataColumn
        
        Private columnpegs As DataColumn
        
        Private columnRCVQTY1 As DataColumn
        
        Private columnRCVRATE1 As DataColumn
        
        Private columnRCVVAL1 As DataColumn
        
        Private columnRCVQTY2 As DataColumn
        
        Private columnRCVRATE2 As DataColumn
        
        Private columnRCVVAL2 As DataColumn
        
        Private columnRCVQTY3 As DataColumn
        
        Private columnRCVRATE3 As DataColumn
        
        Private columnRCVVAL3 As DataColumn
        
        Private columnISSQTY1 As DataColumn
        
        Private columnISSRATE1 As DataColumn
        
        Private columnISSVAL1 As DataColumn
        
        Private columnISSQTY2 As DataColumn
        
        Private columnISSRATE2 As DataColumn
        
        Private columnISSVAL2 As DataColumn
        
        Private columnISSQTY3 As DataColumn
        
        Private columnISSRATE3 As DataColumn
        
        Private columnISSVAL3 As DataColumn
        
        Private columnDISPQTY As DataColumn
        
        Private columnDISPUOM As DataColumn
        
        Private columnopdispqty As DataColumn
        
        Private columnISDISPQTY As DataColumn
        
        Friend Sub New()
            MyBase.New("STOCKSUMMARY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property AutoidColumn As DataColumn
            Get
                Return Me.columnAutoid
            End Get
        End Property
        
        Friend ReadOnly Property ItemcodeColumn As DataColumn
            Get
                Return Me.columnItemcode
            End Get
        End Property
        
        Friend ReadOnly Property ItemnameColumn As DataColumn
            Get
                Return Me.columnItemname
            End Get
        End Property
        
        Friend ReadOnly Property UomColumn As DataColumn
            Get
                Return Me.columnUom
            End Get
        End Property
        
        Friend ReadOnly Property ValuationColumn As DataColumn
            Get
                Return Me.columnValuation
            End Get
        End Property
        
        Friend ReadOnly Property OpqtyColumn As DataColumn
            Get
                Return Me.columnOpqty
            End Get
        End Property
        
        Friend ReadOnly Property OprateColumn As DataColumn
            Get
                Return Me.columnOprate
            End Get
        End Property
        
        Friend ReadOnly Property OpvalColumn As DataColumn
            Get
                Return Me.columnOpval
            End Get
        End Property
        
        Friend ReadOnly Property RcvqtyColumn As DataColumn
            Get
                Return Me.columnRcvqty
            End Get
        End Property
        
        Friend ReadOnly Property RcvrateColumn As DataColumn
            Get
                Return Me.columnRcvrate
            End Get
        End Property
        
        Friend ReadOnly Property RcvvalColumn As DataColumn
            Get
                Return Me.columnRcvval
            End Get
        End Property
        
        Friend ReadOnly Property IssqtyColumn As DataColumn
            Get
                Return Me.columnIssqty
            End Get
        End Property
        
        Friend ReadOnly Property IssrateColumn As DataColumn
            Get
                Return Me.columnIssrate
            End Get
        End Property
        
        Friend ReadOnly Property IssvalColumn As DataColumn
            Get
                Return Me.columnIssval
            End Get
        End Property
        
        Friend ReadOnly Property ClsqtyColumn As DataColumn
            Get
                Return Me.columnClsqty
            End Get
        End Property
        
        Friend ReadOnly Property ClsrateColumn As DataColumn
            Get
                Return Me.columnClsrate
            End Get
        End Property
        
        Friend ReadOnly Property ClsvalColumn As DataColumn
            Get
                Return Me.columnClsval
            End Get
        End Property
        
        Friend ReadOnly Property STORECODEColumn As DataColumn
            Get
                Return Me.columnSTORECODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPNAMEColumn As DataColumn
            Get
                Return Me.columnGROUPNAME
            End Get
        End Property
        
        Friend ReadOnly Property SUBGROUPCODEColumn As DataColumn
            Get
                Return Me.columnSUBGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property SUBGROUPNAMEColumn As DataColumn
            Get
                Return Me.columnSUBGROUPNAME
            End Get
        End Property
        
        Friend ReadOnly Property pegsqtyColumn As DataColumn
            Get
                Return Me.columnpegsqty
            End Get
        End Property
        
        Friend ReadOnly Property pegsColumn As DataColumn
            Get
                Return Me.columnpegs
            End Get
        End Property
        
        Friend ReadOnly Property RCVQTY1Column As DataColumn
            Get
                Return Me.columnRCVQTY1
            End Get
        End Property
        
        Friend ReadOnly Property RCVRATE1Column As DataColumn
            Get
                Return Me.columnRCVRATE1
            End Get
        End Property
        
        Friend ReadOnly Property RCVVAL1Column As DataColumn
            Get
                Return Me.columnRCVVAL1
            End Get
        End Property
        
        Friend ReadOnly Property RCVQTY2Column As DataColumn
            Get
                Return Me.columnRCVQTY2
            End Get
        End Property
        
        Friend ReadOnly Property RCVRATE2Column As DataColumn
            Get
                Return Me.columnRCVRATE2
            End Get
        End Property
        
        Friend ReadOnly Property RCVVAL2Column As DataColumn
            Get
                Return Me.columnRCVVAL2
            End Get
        End Property
        
        Friend ReadOnly Property RCVQTY3Column As DataColumn
            Get
                Return Me.columnRCVQTY3
            End Get
        End Property
        
        Friend ReadOnly Property RCVRATE3Column As DataColumn
            Get
                Return Me.columnRCVRATE3
            End Get
        End Property
        
        Friend ReadOnly Property RCVVAL3Column As DataColumn
            Get
                Return Me.columnRCVVAL3
            End Get
        End Property
        
        Friend ReadOnly Property ISSQTY1Column As DataColumn
            Get
                Return Me.columnISSQTY1
            End Get
        End Property
        
        Friend ReadOnly Property ISSRATE1Column As DataColumn
            Get
                Return Me.columnISSRATE1
            End Get
        End Property
        
        Friend ReadOnly Property ISSVAL1Column As DataColumn
            Get
                Return Me.columnISSVAL1
            End Get
        End Property
        
        Friend ReadOnly Property ISSQTY2Column As DataColumn
            Get
                Return Me.columnISSQTY2
            End Get
        End Property
        
        Friend ReadOnly Property ISSRATE2Column As DataColumn
            Get
                Return Me.columnISSRATE2
            End Get
        End Property
        
        Friend ReadOnly Property ISSVAL2Column As DataColumn
            Get
                Return Me.columnISSVAL2
            End Get
        End Property
        
        Friend ReadOnly Property ISSQTY3Column As DataColumn
            Get
                Return Me.columnISSQTY3
            End Get
        End Property
        
        Friend ReadOnly Property ISSRATE3Column As DataColumn
            Get
                Return Me.columnISSRATE3
            End Get
        End Property
        
        Friend ReadOnly Property ISSVAL3Column As DataColumn
            Get
                Return Me.columnISSVAL3
            End Get
        End Property
        
        Friend ReadOnly Property DISPQTYColumn As DataColumn
            Get
                Return Me.columnDISPQTY
            End Get
        End Property
        
        Friend ReadOnly Property DISPUOMColumn As DataColumn
            Get
                Return Me.columnDISPUOM
            End Get
        End Property
        
        Friend ReadOnly Property opdispqtyColumn As DataColumn
            Get
                Return Me.columnopdispqty
            End Get
        End Property
        
        Friend ReadOnly Property ISDISPQTYColumn As DataColumn
            Get
                Return Me.columnISDISPQTY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STOCKSUMMARYRow
            Get
                Return CType(Me.Rows(index),STOCKSUMMARYRow)
            End Get
        End Property
        
        Public Event STOCKSUMMARYRowChanged As STOCKSUMMARYRowChangeEventHandler
        
        Public Event STOCKSUMMARYRowChanging As STOCKSUMMARYRowChangeEventHandler
        
        Public Event STOCKSUMMARYRowDeleted As STOCKSUMMARYRowChangeEventHandler
        
        Public Event STOCKSUMMARYRowDeleting As STOCKSUMMARYRowChangeEventHandler
        
        Public Overloads Sub AddSTOCKSUMMARYRow(ByVal row As STOCKSUMMARYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTOCKSUMMARYRow( _
                    ByVal Itemcode As String,  _
                    ByVal Itemname As String,  _
                    ByVal Uom As String,  _
                    ByVal Valuation As String,  _
                    ByVal Opqty As Decimal,  _
                    ByVal Oprate As Decimal,  _
                    ByVal Opval As Decimal,  _
                    ByVal Rcvqty As Decimal,  _
                    ByVal Rcvrate As Decimal,  _
                    ByVal Rcvval As Decimal,  _
                    ByVal Issqty As Decimal,  _
                    ByVal Issrate As Decimal,  _
                    ByVal Issval As Decimal,  _
                    ByVal Clsqty As Decimal,  _
                    ByVal Clsrate As Decimal,  _
                    ByVal Clsval As Decimal,  _
                    ByVal STORECODE As String,  _
                    ByVal GROUPCODE As String,  _
                    ByVal GROUPNAME As String,  _
                    ByVal SUBGROUPCODE As String,  _
                    ByVal SUBGROUPNAME As String,  _
                    ByVal pegsqty As Decimal,  _
                    ByVal pegs As Decimal,  _
                    ByVal RCVQTY1 As Decimal,  _
                    ByVal RCVRATE1 As Decimal,  _
                    ByVal RCVVAL1 As Decimal,  _
                    ByVal RCVQTY2 As Decimal,  _
                    ByVal RCVRATE2 As Decimal,  _
                    ByVal RCVVAL2 As Decimal,  _
                    ByVal RCVQTY3 As Decimal,  _
                    ByVal RCVRATE3 As Decimal,  _
                    ByVal RCVVAL3 As Decimal,  _
                    ByVal ISSQTY1 As Decimal,  _
                    ByVal ISSRATE1 As Decimal,  _
                    ByVal ISSVAL1 As Decimal,  _
                    ByVal ISSQTY2 As Decimal,  _
                    ByVal ISSRATE2 As Decimal,  _
                    ByVal ISSVAL2 As Decimal,  _
                    ByVal ISSQTY3 As Decimal,  _
                    ByVal ISSRATE3 As Decimal,  _
                    ByVal ISSVAL3 As Decimal,  _
                    ByVal DISPQTY As Decimal,  _
                    ByVal DISPUOM As String,  _
                    ByVal opdispqty As Decimal,  _
                    ByVal ISDISPQTY As Decimal) As STOCKSUMMARYRow
            Dim rowSTOCKSUMMARYRow As STOCKSUMMARYRow = CType(Me.NewRow,STOCKSUMMARYRow)
            rowSTOCKSUMMARYRow.ItemArray = New Object() {Nothing, Itemcode, Itemname, Uom, Valuation, Opqty, Oprate, Opval, Rcvqty, Rcvrate, Rcvval, Issqty, Issrate, Issval, Clsqty, Clsrate, Clsval, STORECODE, GROUPCODE, GROUPNAME, SUBGROUPCODE, SUBGROUPNAME, pegsqty, pegs, RCVQTY1, RCVRATE1, RCVVAL1, RCVQTY2, RCVRATE2, RCVVAL2, RCVQTY3, RCVRATE3, RCVVAL3, ISSQTY1, ISSRATE1, ISSVAL1, ISSQTY2, ISSRATE2, ISSVAL2, ISSQTY3, ISSRATE3, ISSVAL3, DISPQTY, DISPUOM, opdispqty, ISDISPQTY}
            Me.Rows.Add(rowSTOCKSUMMARYRow)
            Return rowSTOCKSUMMARYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STOCKSUMMARYDataTable = CType(MyBase.Clone,STOCKSUMMARYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STOCKSUMMARYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnAutoid = Me.Columns("Autoid")
            Me.columnItemcode = Me.Columns("Itemcode")
            Me.columnItemname = Me.Columns("Itemname")
            Me.columnUom = Me.Columns("Uom")
            Me.columnValuation = Me.Columns("Valuation")
            Me.columnOpqty = Me.Columns("Opqty")
            Me.columnOprate = Me.Columns("Oprate")
            Me.columnOpval = Me.Columns("Opval")
            Me.columnRcvqty = Me.Columns("Rcvqty")
            Me.columnRcvrate = Me.Columns("Rcvrate")
            Me.columnRcvval = Me.Columns("Rcvval")
            Me.columnIssqty = Me.Columns("Issqty")
            Me.columnIssrate = Me.Columns("Issrate")
            Me.columnIssval = Me.Columns("Issval")
            Me.columnClsqty = Me.Columns("Clsqty")
            Me.columnClsrate = Me.Columns("Clsrate")
            Me.columnClsval = Me.Columns("Clsval")
            Me.columnSTORECODE = Me.Columns("STORECODE")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnGROUPNAME = Me.Columns("GROUPNAME")
            Me.columnSUBGROUPCODE = Me.Columns("SUBGROUPCODE")
            Me.columnSUBGROUPNAME = Me.Columns("SUBGROUPNAME")
            Me.columnpegsqty = Me.Columns("pegsqty")
            Me.columnpegs = Me.Columns("pegs")
            Me.columnRCVQTY1 = Me.Columns("RCVQTY1")
            Me.columnRCVRATE1 = Me.Columns("RCVRATE1")
            Me.columnRCVVAL1 = Me.Columns("RCVVAL1")
            Me.columnRCVQTY2 = Me.Columns("RCVQTY2")
            Me.columnRCVRATE2 = Me.Columns("RCVRATE2")
            Me.columnRCVVAL2 = Me.Columns("RCVVAL2")
            Me.columnRCVQTY3 = Me.Columns("RCVQTY3")
            Me.columnRCVRATE3 = Me.Columns("RCVRATE3")
            Me.columnRCVVAL3 = Me.Columns("RCVVAL3")
            Me.columnISSQTY1 = Me.Columns("ISSQTY1")
            Me.columnISSRATE1 = Me.Columns("ISSRATE1")
            Me.columnISSVAL1 = Me.Columns("ISSVAL1")
            Me.columnISSQTY2 = Me.Columns("ISSQTY2")
            Me.columnISSRATE2 = Me.Columns("ISSRATE2")
            Me.columnISSVAL2 = Me.Columns("ISSVAL2")
            Me.columnISSQTY3 = Me.Columns("ISSQTY3")
            Me.columnISSRATE3 = Me.Columns("ISSRATE3")
            Me.columnISSVAL3 = Me.Columns("ISSVAL3")
            Me.columnDISPQTY = Me.Columns("DISPQTY")
            Me.columnDISPUOM = Me.Columns("DISPUOM")
            Me.columnopdispqty = Me.Columns("opdispqty")
            Me.columnISDISPQTY = Me.Columns("ISDISPQTY")
        End Sub
        
        Private Sub InitClass()
            Me.columnAutoid = New DataColumn("Autoid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAutoid)
            Me.columnItemcode = New DataColumn("Itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemcode)
            Me.columnItemname = New DataColumn("Itemname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemname)
            Me.columnUom = New DataColumn("Uom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUom)
            Me.columnValuation = New DataColumn("Valuation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnValuation)
            Me.columnOpqty = New DataColumn("Opqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOpqty)
            Me.columnOprate = New DataColumn("Oprate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOprate)
            Me.columnOpval = New DataColumn("Opval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOpval)
            Me.columnRcvqty = New DataColumn("Rcvqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRcvqty)
            Me.columnRcvrate = New DataColumn("Rcvrate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRcvrate)
            Me.columnRcvval = New DataColumn("Rcvval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRcvval)
            Me.columnIssqty = New DataColumn("Issqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssqty)
            Me.columnIssrate = New DataColumn("Issrate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssrate)
            Me.columnIssval = New DataColumn("Issval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIssval)
            Me.columnClsqty = New DataColumn("Clsqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClsqty)
            Me.columnClsrate = New DataColumn("Clsrate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClsrate)
            Me.columnClsval = New DataColumn("Clsval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClsval)
            Me.columnSTORECODE = New DataColumn("STORECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORECODE)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnGROUPNAME = New DataColumn("GROUPNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPNAME)
            Me.columnSUBGROUPCODE = New DataColumn("SUBGROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBGROUPCODE)
            Me.columnSUBGROUPNAME = New DataColumn("SUBGROUPNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBGROUPNAME)
            Me.columnpegsqty = New DataColumn("pegsqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpegsqty)
            Me.columnpegs = New DataColumn("pegs", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpegs)
            Me.columnRCVQTY1 = New DataColumn("RCVQTY1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVQTY1)
            Me.columnRCVRATE1 = New DataColumn("RCVRATE1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVRATE1)
            Me.columnRCVVAL1 = New DataColumn("RCVVAL1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVVAL1)
            Me.columnRCVQTY2 = New DataColumn("RCVQTY2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVQTY2)
            Me.columnRCVRATE2 = New DataColumn("RCVRATE2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVRATE2)
            Me.columnRCVVAL2 = New DataColumn("RCVVAL2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVVAL2)
            Me.columnRCVQTY3 = New DataColumn("RCVQTY3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVQTY3)
            Me.columnRCVRATE3 = New DataColumn("RCVRATE3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVRATE3)
            Me.columnRCVVAL3 = New DataColumn("RCVVAL3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRCVVAL3)
            Me.columnISSQTY1 = New DataColumn("ISSQTY1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSQTY1)
            Me.columnISSRATE1 = New DataColumn("ISSRATE1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSRATE1)
            Me.columnISSVAL1 = New DataColumn("ISSVAL1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSVAL1)
            Me.columnISSQTY2 = New DataColumn("ISSQTY2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSQTY2)
            Me.columnISSRATE2 = New DataColumn("ISSRATE2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSRATE2)
            Me.columnISSVAL2 = New DataColumn("ISSVAL2", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSVAL2)
            Me.columnISSQTY3 = New DataColumn("ISSQTY3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSQTY3)
            Me.columnISSRATE3 = New DataColumn("ISSRATE3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSRATE3)
            Me.columnISSVAL3 = New DataColumn("ISSVAL3", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSVAL3)
            Me.columnDISPQTY = New DataColumn("DISPQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISPQTY)
            Me.columnDISPUOM = New DataColumn("DISPUOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISPUOM)
            Me.columnopdispqty = New DataColumn("opdispqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnopdispqty)
            Me.columnISDISPQTY = New DataColumn("ISDISPQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISDISPQTY)
            Me.columnAutoid.AutoIncrement = true
            Me.columnAutoid.AllowDBNull = false
            Me.columnAutoid.ReadOnly = true
        End Sub
        
        Public Function NewSTOCKSUMMARYRow() As STOCKSUMMARYRow
            Return CType(Me.NewRow,STOCKSUMMARYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STOCKSUMMARYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STOCKSUMMARYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STOCKSUMMARYRowChangedEvent) Is Nothing) Then
                RaiseEvent STOCKSUMMARYRowChanged(Me, New STOCKSUMMARYRowChangeEvent(CType(e.Row,STOCKSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STOCKSUMMARYRowChangingEvent) Is Nothing) Then
                RaiseEvent STOCKSUMMARYRowChanging(Me, New STOCKSUMMARYRowChangeEvent(CType(e.Row,STOCKSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STOCKSUMMARYRowDeletedEvent) Is Nothing) Then
                RaiseEvent STOCKSUMMARYRowDeleted(Me, New STOCKSUMMARYRowChangeEvent(CType(e.Row,STOCKSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STOCKSUMMARYRowDeletingEvent) Is Nothing) Then
                RaiseEvent STOCKSUMMARYRowDeleting(Me, New STOCKSUMMARYRowChangeEvent(CType(e.Row,STOCKSUMMARYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTOCKSUMMARYRow(ByVal row As STOCKSUMMARYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STOCKSUMMARYRow
        Inherits DataRow
        
        Private tableSTOCKSUMMARY As STOCKSUMMARYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTOCKSUMMARY = CType(Me.Table,STOCKSUMMARYDataTable)
        End Sub
        
        Public Property Autoid As Decimal
            Get
                Return CType(Me(Me.tableSTOCKSUMMARY.AutoidColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.AutoidColumn) = value
            End Set
        End Property
        
        Public Property Itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ItemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ItemcodeColumn) = value
            End Set
        End Property
        
        Public Property Itemname As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ItemnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ItemnameColumn) = value
            End Set
        End Property
        
        Public Property Uom As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.UomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.UomColumn) = value
            End Set
        End Property
        
        Public Property Valuation As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ValuationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ValuationColumn) = value
            End Set
        End Property
        
        Public Property Opqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.OpqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.OpqtyColumn) = value
            End Set
        End Property
        
        Public Property Oprate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.OprateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.OprateColumn) = value
            End Set
        End Property
        
        Public Property Opval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.OpvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.OpvalColumn) = value
            End Set
        End Property
        
        Public Property Rcvqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RcvqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RcvqtyColumn) = value
            End Set
        End Property
        
        Public Property Rcvrate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RcvrateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RcvrateColumn) = value
            End Set
        End Property
        
        Public Property Rcvval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RcvvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RcvvalColumn) = value
            End Set
        End Property
        
        Public Property Issqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.IssqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.IssqtyColumn) = value
            End Set
        End Property
        
        Public Property Issrate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.IssrateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.IssrateColumn) = value
            End Set
        End Property
        
        Public Property Issval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.IssvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.IssvalColumn) = value
            End Set
        End Property
        
        Public Property Clsqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ClsqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ClsqtyColumn) = value
            End Set
        End Property
        
        Public Property Clsrate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ClsrateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ClsrateColumn) = value
            End Set
        End Property
        
        Public Property Clsval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ClsvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ClsvalColumn) = value
            End Set
        End Property
        
        Public Property STORECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.STORECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.STORECODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.GROUPNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.GROUPNAMEColumn) = value
            End Set
        End Property
        
        Public Property SUBGROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.SUBGROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.SUBGROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property SUBGROUPNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.SUBGROUPNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.SUBGROUPNAMEColumn) = value
            End Set
        End Property
        
        Public Property pegsqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.pegsqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.pegsqtyColumn) = value
            End Set
        End Property
        
        Public Property pegs As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.pegsColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.pegsColumn) = value
            End Set
        End Property
        
        Public Property RCVQTY1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVQTY1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVQTY1Column) = value
            End Set
        End Property
        
        Public Property RCVRATE1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVRATE1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVRATE1Column) = value
            End Set
        End Property
        
        Public Property RCVVAL1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVVAL1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVVAL1Column) = value
            End Set
        End Property
        
        Public Property RCVQTY2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVQTY2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVQTY2Column) = value
            End Set
        End Property
        
        Public Property RCVRATE2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVRATE2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVRATE2Column) = value
            End Set
        End Property
        
        Public Property RCVVAL2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVVAL2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVVAL2Column) = value
            End Set
        End Property
        
        Public Property RCVQTY3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVQTY3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVQTY3Column) = value
            End Set
        End Property
        
        Public Property RCVRATE3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVRATE3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVRATE3Column) = value
            End Set
        End Property
        
        Public Property RCVVAL3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.RCVVAL3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.RCVVAL3Column) = value
            End Set
        End Property
        
        Public Property ISSQTY1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSQTY1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSQTY1Column) = value
            End Set
        End Property
        
        Public Property ISSRATE1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSRATE1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSRATE1Column) = value
            End Set
        End Property
        
        Public Property ISSVAL1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSVAL1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSVAL1Column) = value
            End Set
        End Property
        
        Public Property ISSQTY2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSQTY2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSQTY2Column) = value
            End Set
        End Property
        
        Public Property ISSRATE2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSRATE2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSRATE2Column) = value
            End Set
        End Property
        
        Public Property ISSVAL2 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSVAL2Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSVAL2Column) = value
            End Set
        End Property
        
        Public Property ISSQTY3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSQTY3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSQTY3Column) = value
            End Set
        End Property
        
        Public Property ISSRATE3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSRATE3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSRATE3Column) = value
            End Set
        End Property
        
        Public Property ISSVAL3 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISSVAL3Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISSVAL3Column) = value
            End Set
        End Property
        
        Public Property DISPQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.DISPQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.DISPQTYColumn) = value
            End Set
        End Property
        
        Public Property DISPUOM As String
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.DISPUOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.DISPUOMColumn) = value
            End Set
        End Property
        
        Public Property opdispqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.opdispqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.opdispqtyColumn) = value
            End Set
        End Property
        
        Public Property ISDISPQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTOCKSUMMARY.ISDISPQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTOCKSUMMARY.ISDISPQTYColumn) = value
            End Set
        End Property
        
        Public Function IsItemcodeNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ItemcodeColumn)
        End Function
        
        Public Sub SetItemcodeNull()
            Me(Me.tableSTOCKSUMMARY.ItemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemnameNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ItemnameColumn)
        End Function
        
        Public Sub SetItemnameNull()
            Me(Me.tableSTOCKSUMMARY.ItemnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUomNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.UomColumn)
        End Function
        
        Public Sub SetUomNull()
            Me(Me.tableSTOCKSUMMARY.UomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsValuationNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ValuationColumn)
        End Function
        
        Public Sub SetValuationNull()
            Me(Me.tableSTOCKSUMMARY.ValuationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOpqtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.OpqtyColumn)
        End Function
        
        Public Sub SetOpqtyNull()
            Me(Me.tableSTOCKSUMMARY.OpqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOprateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.OprateColumn)
        End Function
        
        Public Sub SetOprateNull()
            Me(Me.tableSTOCKSUMMARY.OprateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOpvalNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.OpvalColumn)
        End Function
        
        Public Sub SetOpvalNull()
            Me(Me.tableSTOCKSUMMARY.OpvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRcvqtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RcvqtyColumn)
        End Function
        
        Public Sub SetRcvqtyNull()
            Me(Me.tableSTOCKSUMMARY.RcvqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRcvrateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RcvrateColumn)
        End Function
        
        Public Sub SetRcvrateNull()
            Me(Me.tableSTOCKSUMMARY.RcvrateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRcvvalNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RcvvalColumn)
        End Function
        
        Public Sub SetRcvvalNull()
            Me(Me.tableSTOCKSUMMARY.RcvvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssqtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.IssqtyColumn)
        End Function
        
        Public Sub SetIssqtyNull()
            Me(Me.tableSTOCKSUMMARY.IssqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssrateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.IssrateColumn)
        End Function
        
        Public Sub SetIssrateNull()
            Me(Me.tableSTOCKSUMMARY.IssrateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIssvalNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.IssvalColumn)
        End Function
        
        Public Sub SetIssvalNull()
            Me(Me.tableSTOCKSUMMARY.IssvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClsqtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ClsqtyColumn)
        End Function
        
        Public Sub SetClsqtyNull()
            Me(Me.tableSTOCKSUMMARY.ClsqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClsrateNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ClsrateColumn)
        End Function
        
        Public Sub SetClsrateNull()
            Me(Me.tableSTOCKSUMMARY.ClsrateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClsvalNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ClsvalColumn)
        End Function
        
        Public Sub SetClsvalNull()
            Me(Me.tableSTOCKSUMMARY.ClsvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTORECODENull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.STORECODEColumn)
        End Function
        
        Public Sub SetSTORECODENull()
            Me(Me.tableSTOCKSUMMARY.STORECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tableSTOCKSUMMARY.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.GROUPNAMEColumn)
        End Function
        
        Public Sub SetGROUPNAMENull()
            Me(Me.tableSTOCKSUMMARY.GROUPNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.SUBGROUPCODEColumn)
        End Function
        
        Public Sub SetSUBGROUPCODENull()
            Me(Me.tableSTOCKSUMMARY.SUBGROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBGROUPNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.SUBGROUPNAMEColumn)
        End Function
        
        Public Sub SetSUBGROUPNAMENull()
            Me(Me.tableSTOCKSUMMARY.SUBGROUPNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspegsqtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.pegsqtyColumn)
        End Function
        
        Public Sub SetpegsqtyNull()
            Me(Me.tableSTOCKSUMMARY.pegsqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspegsNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.pegsColumn)
        End Function
        
        Public Sub SetpegsNull()
            Me(Me.tableSTOCKSUMMARY.pegsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVQTY1Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVQTY1Column)
        End Function
        
        Public Sub SetRCVQTY1Null()
            Me(Me.tableSTOCKSUMMARY.RCVQTY1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVRATE1Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVRATE1Column)
        End Function
        
        Public Sub SetRCVRATE1Null()
            Me(Me.tableSTOCKSUMMARY.RCVRATE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVVAL1Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVVAL1Column)
        End Function
        
        Public Sub SetRCVVAL1Null()
            Me(Me.tableSTOCKSUMMARY.RCVVAL1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVQTY2Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVQTY2Column)
        End Function
        
        Public Sub SetRCVQTY2Null()
            Me(Me.tableSTOCKSUMMARY.RCVQTY2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVRATE2Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVRATE2Column)
        End Function
        
        Public Sub SetRCVRATE2Null()
            Me(Me.tableSTOCKSUMMARY.RCVRATE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVVAL2Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVVAL2Column)
        End Function
        
        Public Sub SetRCVVAL2Null()
            Me(Me.tableSTOCKSUMMARY.RCVVAL2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVQTY3Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVQTY3Column)
        End Function
        
        Public Sub SetRCVQTY3Null()
            Me(Me.tableSTOCKSUMMARY.RCVQTY3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVRATE3Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVRATE3Column)
        End Function
        
        Public Sub SetRCVRATE3Null()
            Me(Me.tableSTOCKSUMMARY.RCVRATE3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRCVVAL3Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.RCVVAL3Column)
        End Function
        
        Public Sub SetRCVVAL3Null()
            Me(Me.tableSTOCKSUMMARY.RCVVAL3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSQTY1Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSQTY1Column)
        End Function
        
        Public Sub SetISSQTY1Null()
            Me(Me.tableSTOCKSUMMARY.ISSQTY1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSRATE1Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSRATE1Column)
        End Function
        
        Public Sub SetISSRATE1Null()
            Me(Me.tableSTOCKSUMMARY.ISSRATE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSVAL1Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSVAL1Column)
        End Function
        
        Public Sub SetISSVAL1Null()
            Me(Me.tableSTOCKSUMMARY.ISSVAL1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSQTY2Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSQTY2Column)
        End Function
        
        Public Sub SetISSQTY2Null()
            Me(Me.tableSTOCKSUMMARY.ISSQTY2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSRATE2Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSRATE2Column)
        End Function
        
        Public Sub SetISSRATE2Null()
            Me(Me.tableSTOCKSUMMARY.ISSRATE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSVAL2Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSVAL2Column)
        End Function
        
        Public Sub SetISSVAL2Null()
            Me(Me.tableSTOCKSUMMARY.ISSVAL2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSQTY3Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSQTY3Column)
        End Function
        
        Public Sub SetISSQTY3Null()
            Me(Me.tableSTOCKSUMMARY.ISSQTY3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSRATE3Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSRATE3Column)
        End Function
        
        Public Sub SetISSRATE3Null()
            Me(Me.tableSTOCKSUMMARY.ISSRATE3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSVAL3Null() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISSVAL3Column)
        End Function
        
        Public Sub SetISSVAL3Null()
            Me(Me.tableSTOCKSUMMARY.ISSVAL3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISPQTYNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.DISPQTYColumn)
        End Function
        
        Public Sub SetDISPQTYNull()
            Me(Me.tableSTOCKSUMMARY.DISPQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISPUOMNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.DISPUOMColumn)
        End Function
        
        Public Sub SetDISPUOMNull()
            Me(Me.tableSTOCKSUMMARY.DISPUOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsopdispqtyNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.opdispqtyColumn)
        End Function
        
        Public Sub SetopdispqtyNull()
            Me(Me.tableSTOCKSUMMARY.opdispqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISDISPQTYNull() As Boolean
            Return Me.IsNull(Me.tableSTOCKSUMMARY.ISDISPQTYColumn)
        End Function
        
        Public Sub SetISDISPQTYNull()
            Me(Me.tableSTOCKSUMMARY.ISDISPQTYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STOCKSUMMARYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STOCKSUMMARYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STOCKSUMMARYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STOCKSUMMARYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ISSUEREGISTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnINDENTNO As DataColumn
        
        Private columnLOCATIONNAME As DataColumn
        
        Private columnDOCDETAILS As DataColumn
        
        Private columnDOCDATE As DataColumn
        
        Private columnGROUPDESC As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnDBLAMT As DataColumn
        
        Private columnCONVVALUE As DataColumn
        
        Private columnCONV As DataColumn
        
        Private columnFROMSTORENAME As DataColumn
        
        Friend Sub New()
            MyBase.New("ISSUEREGISTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property INDENTNOColumn As DataColumn
            Get
                Return Me.columnINDENTNO
            End Get
        End Property
        
        Friend ReadOnly Property LOCATIONNAMEColumn As DataColumn
            Get
                Return Me.columnLOCATIONNAME
            End Get
        End Property
        
        Friend ReadOnly Property DOCDETAILSColumn As DataColumn
            Get
                Return Me.columnDOCDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property DOCDATEColumn As DataColumn
            Get
                Return Me.columnDOCDATE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPDESCColumn As DataColumn
            Get
                Return Me.columnGROUPDESC
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property DBLAMTColumn As DataColumn
            Get
                Return Me.columnDBLAMT
            End Get
        End Property
        
        Friend ReadOnly Property CONVVALUEColumn As DataColumn
            Get
                Return Me.columnCONVVALUE
            End Get
        End Property
        
        Friend ReadOnly Property CONVColumn As DataColumn
            Get
                Return Me.columnCONV
            End Get
        End Property
        
        Friend ReadOnly Property FROMSTORENAMEColumn As DataColumn
            Get
                Return Me.columnFROMSTORENAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ISSUEREGISTERRow
            Get
                Return CType(Me.Rows(index),ISSUEREGISTERRow)
            End Get
        End Property
        
        Public Event ISSUEREGISTERRowChanged As ISSUEREGISTERRowChangeEventHandler
        
        Public Event ISSUEREGISTERRowChanging As ISSUEREGISTERRowChangeEventHandler
        
        Public Event ISSUEREGISTERRowDeleted As ISSUEREGISTERRowChangeEventHandler
        
        Public Event ISSUEREGISTERRowDeleting As ISSUEREGISTERRowChangeEventHandler
        
        Public Overloads Sub AddISSUEREGISTERRow(ByVal row As ISSUEREGISTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddISSUEREGISTERRow(ByVal INDENTNO As String, ByVal LOCATIONNAME As String, ByVal DOCDETAILS As String, ByVal DOCDATE As Date, ByVal GROUPDESC As String, ByVal UOM As String, ByVal QTY As Decimal, ByVal RATE As Decimal, ByVal AMOUNT As Decimal, ByVal ITEMCODE As String, ByVal ITEMNAME As String, ByVal DBLAMT As Decimal, ByVal CONVVALUE As Decimal, ByVal CONV As String, ByVal FROMSTORENAME As String) As ISSUEREGISTERRow
            Dim rowISSUEREGISTERRow As ISSUEREGISTERRow = CType(Me.NewRow,ISSUEREGISTERRow)
            rowISSUEREGISTERRow.ItemArray = New Object() {INDENTNO, LOCATIONNAME, DOCDETAILS, DOCDATE, GROUPDESC, UOM, QTY, RATE, AMOUNT, ITEMCODE, ITEMNAME, DBLAMT, CONVVALUE, CONV, FROMSTORENAME}
            Me.Rows.Add(rowISSUEREGISTERRow)
            Return rowISSUEREGISTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As ISSUEREGISTERDataTable = CType(MyBase.Clone,ISSUEREGISTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New ISSUEREGISTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnINDENTNO = Me.Columns("INDENTNO")
            Me.columnLOCATIONNAME = Me.Columns("LOCATIONNAME")
            Me.columnDOCDETAILS = Me.Columns("DOCDETAILS")
            Me.columnDOCDATE = Me.Columns("DOCDATE")
            Me.columnGROUPDESC = Me.Columns("GROUPDESC")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnDBLAMT = Me.Columns("DBLAMT")
            Me.columnCONVVALUE = Me.Columns("CONVVALUE")
            Me.columnCONV = Me.Columns("CONV")
            Me.columnFROMSTORENAME = Me.Columns("FROMSTORENAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnINDENTNO = New DataColumn("INDENTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINDENTNO)
            Me.columnLOCATIONNAME = New DataColumn("LOCATIONNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCATIONNAME)
            Me.columnDOCDETAILS = New DataColumn("DOCDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDETAILS)
            Me.columnDOCDATE = New DataColumn("DOCDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDATE)
            Me.columnGROUPDESC = New DataColumn("GROUPDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPDESC)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnDBLAMT = New DataColumn("DBLAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDBLAMT)
            Me.columnCONVVALUE = New DataColumn("CONVVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONVVALUE)
            Me.columnCONV = New DataColumn("CONV", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONV)
            Me.columnFROMSTORENAME = New DataColumn("FROMSTORENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMSTORENAME)
            Me.columnLOCATIONNAME.ReadOnly = true
            Me.columnDOCDETAILS.ReadOnly = true
            Me.columnGROUPDESC.ReadOnly = true
            Me.columnUOM.ReadOnly = true
            Me.columnQTY.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnDBLAMT.ReadOnly = true
            Me.columnCONVVALUE.ReadOnly = true
            Me.columnCONV.ReadOnly = true
            Me.columnFROMSTORENAME.ReadOnly = true
        End Sub
        
        Public Function NewISSUEREGISTERRow() As ISSUEREGISTERRow
            Return CType(Me.NewRow,ISSUEREGISTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New ISSUEREGISTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ISSUEREGISTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ISSUEREGISTERRowChangedEvent) Is Nothing) Then
                RaiseEvent ISSUEREGISTERRowChanged(Me, New ISSUEREGISTERRowChangeEvent(CType(e.Row,ISSUEREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ISSUEREGISTERRowChangingEvent) Is Nothing) Then
                RaiseEvent ISSUEREGISTERRowChanging(Me, New ISSUEREGISTERRowChangeEvent(CType(e.Row,ISSUEREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ISSUEREGISTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent ISSUEREGISTERRowDeleted(Me, New ISSUEREGISTERRowChangeEvent(CType(e.Row,ISSUEREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ISSUEREGISTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent ISSUEREGISTERRowDeleting(Me, New ISSUEREGISTERRowChangeEvent(CType(e.Row,ISSUEREGISTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveISSUEREGISTERRow(ByVal row As ISSUEREGISTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ISSUEREGISTERRow
        Inherits DataRow
        
        Private tableISSUEREGISTER As ISSUEREGISTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableISSUEREGISTER = CType(Me.Table,ISSUEREGISTERDataTable)
        End Sub
        
        Public Property INDENTNO As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.INDENTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.INDENTNOColumn) = value
            End Set
        End Property
        
        Public Property LOCATIONNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.LOCATIONNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.LOCATIONNAMEColumn) = value
            End Set
        End Property
        
        Public Property DOCDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.DOCDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.DOCDETAILSColumn) = value
            End Set
        End Property
        
        Public Property DOCDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.DOCDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.DOCDATEColumn) = value
            End Set
        End Property
        
        Public Property GROUPDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.GROUPDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.GROUPDESCColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.UOMColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.RATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property DBLAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.DBLAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.DBLAMTColumn) = value
            End Set
        End Property
        
        Public Property CONVVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.CONVVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.CONVVALUEColumn) = value
            End Set
        End Property
        
        Public Property CONV As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.CONVColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.CONVColumn) = value
            End Set
        End Property
        
        Public Property FROMSTORENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableISSUEREGISTER.FROMSTORENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableISSUEREGISTER.FROMSTORENAMEColumn) = value
            End Set
        End Property
        
        Public Function IsINDENTNONull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.INDENTNOColumn)
        End Function
        
        Public Sub SetINDENTNONull()
            Me(Me.tableISSUEREGISTER.INDENTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCATIONNAMENull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.LOCATIONNAMEColumn)
        End Function
        
        Public Sub SetLOCATIONNAMENull()
            Me(Me.tableISSUEREGISTER.LOCATIONNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.DOCDETAILSColumn)
        End Function
        
        Public Sub SetDOCDETAILSNull()
            Me(Me.tableISSUEREGISTER.DOCDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCDATENull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.DOCDATEColumn)
        End Function
        
        Public Sub SetDOCDATENull()
            Me(Me.tableISSUEREGISTER.DOCDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPDESCNull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.GROUPDESCColumn)
        End Function
        
        Public Sub SetGROUPDESCNull()
            Me(Me.tableISSUEREGISTER.GROUPDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableISSUEREGISTER.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableISSUEREGISTER.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableISSUEREGISTER.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableISSUEREGISTER.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableISSUEREGISTER.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tableISSUEREGISTER.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDBLAMTNull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.DBLAMTColumn)
        End Function
        
        Public Sub SetDBLAMTNull()
            Me(Me.tableISSUEREGISTER.DBLAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONVVALUENull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.CONVVALUEColumn)
        End Function
        
        Public Sub SetCONVVALUENull()
            Me(Me.tableISSUEREGISTER.CONVVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONVNull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.CONVColumn)
        End Function
        
        Public Sub SetCONVNull()
            Me(Me.tableISSUEREGISTER.CONVColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMSTORENAMENull() As Boolean
            Return Me.IsNull(Me.tableISSUEREGISTER.FROMSTORENAMEColumn)
        End Function
        
        Public Sub SetFROMSTORENAMENull()
            Me(Me.tableISSUEREGISTER.FROMSTORENAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class ISSUEREGISTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As ISSUEREGISTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As ISSUEREGISTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As ISSUEREGISTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWSTOCKADJUSTMENTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSTORELOCATIONDESC As DataColumn
        
        Private columnDOCDETAILS As DataColumn
        
        Private columnDOCDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnSTOCKINHAND As DataColumn
        
        Private columnPHYSICALSTOCK As DataColumn
        
        Private columnADJUSTEDSTOCK As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEWSTOCKADJUSTMENT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property STORELOCATIONDESCColumn As DataColumn
            Get
                Return Me.columnSTORELOCATIONDESC
            End Get
        End Property
        
        Friend ReadOnly Property DOCDETAILSColumn As DataColumn
            Get
                Return Me.columnDOCDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property DOCDATEColumn As DataColumn
            Get
                Return Me.columnDOCDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property STOCKINHANDColumn As DataColumn
            Get
                Return Me.columnSTOCKINHAND
            End Get
        End Property
        
        Friend ReadOnly Property PHYSICALSTOCKColumn As DataColumn
            Get
                Return Me.columnPHYSICALSTOCK
            End Get
        End Property
        
        Friend ReadOnly Property ADJUSTEDSTOCKColumn As DataColumn
            Get
                Return Me.columnADJUSTEDSTOCK
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEWSTOCKADJUSTMENTRow
            Get
                Return CType(Me.Rows(index),VIEWSTOCKADJUSTMENTRow)
            End Get
        End Property
        
        Public Event VIEWSTOCKADJUSTMENTRowChanged As VIEWSTOCKADJUSTMENTRowChangeEventHandler
        
        Public Event VIEWSTOCKADJUSTMENTRowChanging As VIEWSTOCKADJUSTMENTRowChangeEventHandler
        
        Public Event VIEWSTOCKADJUSTMENTRowDeleted As VIEWSTOCKADJUSTMENTRowChangeEventHandler
        
        Public Event VIEWSTOCKADJUSTMENTRowDeleting As VIEWSTOCKADJUSTMENTRowChangeEventHandler
        
        Public Overloads Sub AddVIEWSTOCKADJUSTMENTRow(ByVal row As VIEWSTOCKADJUSTMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEWSTOCKADJUSTMENTRow(ByVal STORELOCATIONDESC As String, ByVal DOCDETAILS As String, ByVal DOCDATE As Date, ByVal ITEMCODE As String, ByVal ITEMNAME As String, ByVal UOM As String, ByVal STOCKINHAND As Decimal, ByVal PHYSICALSTOCK As Decimal, ByVal ADJUSTEDSTOCK As Decimal, ByVal RATE As Decimal, ByVal AMOUNT As Decimal) As VIEWSTOCKADJUSTMENTRow
            Dim rowVIEWSTOCKADJUSTMENTRow As VIEWSTOCKADJUSTMENTRow = CType(Me.NewRow,VIEWSTOCKADJUSTMENTRow)
            rowVIEWSTOCKADJUSTMENTRow.ItemArray = New Object() {STORELOCATIONDESC, DOCDETAILS, DOCDATE, ITEMCODE, ITEMNAME, UOM, STOCKINHAND, PHYSICALSTOCK, ADJUSTEDSTOCK, RATE, AMOUNT}
            Me.Rows.Add(rowVIEWSTOCKADJUSTMENTRow)
            Return rowVIEWSTOCKADJUSTMENTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEWSTOCKADJUSTMENTDataTable = CType(MyBase.Clone,VIEWSTOCKADJUSTMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEWSTOCKADJUSTMENTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnSTORELOCATIONDESC = Me.Columns("STORELOCATIONDESC")
            Me.columnDOCDETAILS = Me.Columns("DOCDETAILS")
            Me.columnDOCDATE = Me.Columns("DOCDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnSTOCKINHAND = Me.Columns("STOCKINHAND")
            Me.columnPHYSICALSTOCK = Me.Columns("PHYSICALSTOCK")
            Me.columnADJUSTEDSTOCK = Me.Columns("ADJUSTEDSTOCK")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnSTORELOCATIONDESC = New DataColumn("STORELOCATIONDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORELOCATIONDESC)
            Me.columnDOCDETAILS = New DataColumn("DOCDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDETAILS)
            Me.columnDOCDATE = New DataColumn("DOCDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnSTOCKINHAND = New DataColumn("STOCKINHAND", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTOCKINHAND)
            Me.columnPHYSICALSTOCK = New DataColumn("PHYSICALSTOCK", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPHYSICALSTOCK)
            Me.columnADJUSTEDSTOCK = New DataColumn("ADJUSTEDSTOCK", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADJUSTEDSTOCK)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnSTORELOCATIONDESC.AllowDBNull = false
            Me.columnDOCDETAILS.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnITEMNAME.AllowDBNull = false
            Me.columnUOM.AllowDBNull = false
            Me.columnSTOCKINHAND.AllowDBNull = false
            Me.columnPHYSICALSTOCK.AllowDBNull = false
            Me.columnADJUSTEDSTOCK.AllowDBNull = false
            Me.columnRATE.AllowDBNull = false
            Me.columnAMOUNT.AllowDBNull = false
        End Sub
        
        Public Function NewVIEWSTOCKADJUSTMENTRow() As VIEWSTOCKADJUSTMENTRow
            Return CType(Me.NewRow,VIEWSTOCKADJUSTMENTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEWSTOCKADJUSTMENTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEWSTOCKADJUSTMENTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEWSTOCKADJUSTMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKADJUSTMENTRowChanged(Me, New VIEWSTOCKADJUSTMENTRowChangeEvent(CType(e.Row,VIEWSTOCKADJUSTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEWSTOCKADJUSTMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKADJUSTMENTRowChanging(Me, New VIEWSTOCKADJUSTMENTRowChangeEvent(CType(e.Row,VIEWSTOCKADJUSTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEWSTOCKADJUSTMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKADJUSTMENTRowDeleted(Me, New VIEWSTOCKADJUSTMENTRowChangeEvent(CType(e.Row,VIEWSTOCKADJUSTMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEWSTOCKADJUSTMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKADJUSTMENTRowDeleting(Me, New VIEWSTOCKADJUSTMENTRowChangeEvent(CType(e.Row,VIEWSTOCKADJUSTMENTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEWSTOCKADJUSTMENTRow(ByVal row As VIEWSTOCKADJUSTMENTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWSTOCKADJUSTMENTRow
        Inherits DataRow
        
        Private tableVIEWSTOCKADJUSTMENT As VIEWSTOCKADJUSTMENTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEWSTOCKADJUSTMENT = CType(Me.Table,VIEWSTOCKADJUSTMENTDataTable)
        End Sub
        
        Public Property STORELOCATIONDESC As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.STORELOCATIONDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.STORELOCATIONDESCColumn) = value
            End Set
        End Property
        
        Public Property DOCDETAILS As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.DOCDETAILSColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.DOCDETAILSColumn) = value
            End Set
        End Property
        
        Public Property DOCDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.DOCDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.DOCDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.ITEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.UOMColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.UOMColumn) = value
            End Set
        End Property
        
        Public Property STOCKINHAND As Decimal
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.STOCKINHANDColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.STOCKINHANDColumn) = value
            End Set
        End Property
        
        Public Property PHYSICALSTOCK As Decimal
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.PHYSICALSTOCKColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.PHYSICALSTOCKColumn) = value
            End Set
        End Property
        
        Public Property ADJUSTEDSTOCK As Decimal
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.ADJUSTEDSTOCKColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.ADJUSTEDSTOCKColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.RATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEWSTOCKADJUSTMENT.AMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEWSTOCKADJUSTMENT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsDOCDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWSTOCKADJUSTMENT.DOCDATEColumn)
        End Function
        
        Public Sub SetDOCDATENull()
            Me(Me.tableVIEWSTOCKADJUSTMENT.DOCDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWSTOCKADJUSTMENTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEWSTOCKADJUSTMENTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEWSTOCKADJUSTMENTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEWSTOCKADJUSTMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWSTOCKREGISTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFROMSTOREDESC As DataColumn
        
        Private columnTOSTOREDESC As DataColumn
        
        Private columnDOCTYPE As DataColumn
        
        Private columnCHALLENNO As DataColumn
        
        Private columnCHALLENDATE As DataColumn
        
        Private columnDOCDETAILS As DataColumn
        
        Private columnDOCDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEWSTOCKREGISTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property FROMSTOREDESCColumn As DataColumn
            Get
                Return Me.columnFROMSTOREDESC
            End Get
        End Property
        
        Friend ReadOnly Property TOSTOREDESCColumn As DataColumn
            Get
                Return Me.columnTOSTOREDESC
            End Get
        End Property
        
        Friend ReadOnly Property DOCTYPEColumn As DataColumn
            Get
                Return Me.columnDOCTYPE
            End Get
        End Property
        
        Friend ReadOnly Property CHALLENNOColumn As DataColumn
            Get
                Return Me.columnCHALLENNO
            End Get
        End Property
        
        Friend ReadOnly Property CHALLENDATEColumn As DataColumn
            Get
                Return Me.columnCHALLENDATE
            End Get
        End Property
        
        Friend ReadOnly Property DOCDETAILSColumn As DataColumn
            Get
                Return Me.columnDOCDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property DOCDATEColumn As DataColumn
            Get
                Return Me.columnDOCDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEWSTOCKREGISTERRow
            Get
                Return CType(Me.Rows(index),VIEWSTOCKREGISTERRow)
            End Get
        End Property
        
        Public Event VIEWSTOCKREGISTERRowChanged As VIEWSTOCKREGISTERRowChangeEventHandler
        
        Public Event VIEWSTOCKREGISTERRowChanging As VIEWSTOCKREGISTERRowChangeEventHandler
        
        Public Event VIEWSTOCKREGISTERRowDeleted As VIEWSTOCKREGISTERRowChangeEventHandler
        
        Public Event VIEWSTOCKREGISTERRowDeleting As VIEWSTOCKREGISTERRowChangeEventHandler
        
        Public Overloads Sub AddVIEWSTOCKREGISTERRow(ByVal row As VIEWSTOCKREGISTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEWSTOCKREGISTERRow(ByVal FROMSTOREDESC As String, ByVal TOSTOREDESC As String, ByVal DOCTYPE As String, ByVal CHALLENNO As String, ByVal CHALLENDATE As Date, ByVal DOCDETAILS As String, ByVal DOCDATE As Date, ByVal ITEMCODE As String, ByVal ITEMNAME As String, ByVal UOM As String, ByVal QTY As Decimal, ByVal RATE As Decimal, ByVal AMOUNT As Decimal) As VIEWSTOCKREGISTERRow
            Dim rowVIEWSTOCKREGISTERRow As VIEWSTOCKREGISTERRow = CType(Me.NewRow,VIEWSTOCKREGISTERRow)
            rowVIEWSTOCKREGISTERRow.ItemArray = New Object() {FROMSTOREDESC, TOSTOREDESC, DOCTYPE, CHALLENNO, CHALLENDATE, DOCDETAILS, DOCDATE, ITEMCODE, ITEMNAME, UOM, QTY, RATE, AMOUNT}
            Me.Rows.Add(rowVIEWSTOCKREGISTERRow)
            Return rowVIEWSTOCKREGISTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEWSTOCKREGISTERDataTable = CType(MyBase.Clone,VIEWSTOCKREGISTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEWSTOCKREGISTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnFROMSTOREDESC = Me.Columns("FROMSTOREDESC")
            Me.columnTOSTOREDESC = Me.Columns("TOSTOREDESC")
            Me.columnDOCTYPE = Me.Columns("DOCTYPE")
            Me.columnCHALLENNO = Me.Columns("CHALLENNO")
            Me.columnCHALLENDATE = Me.Columns("CHALLENDATE")
            Me.columnDOCDETAILS = Me.Columns("DOCDETAILS")
            Me.columnDOCDATE = Me.Columns("DOCDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnFROMSTOREDESC = New DataColumn("FROMSTOREDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMSTOREDESC)
            Me.columnTOSTOREDESC = New DataColumn("TOSTOREDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOSTOREDESC)
            Me.columnDOCTYPE = New DataColumn("DOCTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCTYPE)
            Me.columnCHALLENNO = New DataColumn("CHALLENNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHALLENNO)
            Me.columnCHALLENDATE = New DataColumn("CHALLENDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHALLENDATE)
            Me.columnDOCDETAILS = New DataColumn("DOCDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDETAILS)
            Me.columnDOCDATE = New DataColumn("DOCDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOCDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnFROMSTOREDESC.AllowDBNull = false
            Me.columnTOSTOREDESC.AllowDBNull = false
            Me.columnDOCTYPE.AllowDBNull = false
            Me.columnCHALLENNO.AllowDBNull = false
            Me.columnDOCDETAILS.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnITEMNAME.AllowDBNull = false
            Me.columnUOM.AllowDBNull = false
            Me.columnQTY.AllowDBNull = false
            Me.columnRATE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEWSTOCKREGISTERRow() As VIEWSTOCKREGISTERRow
            Return CType(Me.NewRow,VIEWSTOCKREGISTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEWSTOCKREGISTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEWSTOCKREGISTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEWSTOCKREGISTERRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKREGISTERRowChanged(Me, New VIEWSTOCKREGISTERRowChangeEvent(CType(e.Row,VIEWSTOCKREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEWSTOCKREGISTERRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKREGISTERRowChanging(Me, New VIEWSTOCKREGISTERRowChangeEvent(CType(e.Row,VIEWSTOCKREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEWSTOCKREGISTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKREGISTERRowDeleted(Me, New VIEWSTOCKREGISTERRowChangeEvent(CType(e.Row,VIEWSTOCKREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEWSTOCKREGISTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEWSTOCKREGISTERRowDeleting(Me, New VIEWSTOCKREGISTERRowChangeEvent(CType(e.Row,VIEWSTOCKREGISTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEWSTOCKREGISTERRow(ByVal row As VIEWSTOCKREGISTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWSTOCKREGISTERRow
        Inherits DataRow
        
        Private tableVIEWSTOCKREGISTER As VIEWSTOCKREGISTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEWSTOCKREGISTER = CType(Me.Table,VIEWSTOCKREGISTERDataTable)
        End Sub
        
        Public Property FROMSTOREDESC As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.FROMSTOREDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.FROMSTOREDESCColumn) = value
            End Set
        End Property
        
        Public Property TOSTOREDESC As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.TOSTOREDESCColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.TOSTOREDESCColumn) = value
            End Set
        End Property
        
        Public Property DOCTYPE As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.DOCTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.DOCTYPEColumn) = value
            End Set
        End Property
        
        Public Property CHALLENNO As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.CHALLENNOColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.CHALLENNOColumn) = value
            End Set
        End Property
        
        Public Property CHALLENDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWSTOCKREGISTER.CHALLENDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.CHALLENDATEColumn) = value
            End Set
        End Property
        
        Public Property DOCDETAILS As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.DOCDETAILSColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.DOCDETAILSColumn) = value
            End Set
        End Property
        
        Public Property DOCDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWSTOCKREGISTER.DOCDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.DOCDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.ITEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.UOMColumn),String)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.UOMColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.QTYColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Return CType(Me(Me.tableVIEWSTOCKREGISTER.RATEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.RATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWSTOCKREGISTER.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWSTOCKREGISTER.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsCHALLENDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWSTOCKREGISTER.CHALLENDATEColumn)
        End Function
        
        Public Sub SetCHALLENDATENull()
            Me(Me.tableVIEWSTOCKREGISTER.CHALLENDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOCDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWSTOCKREGISTER.DOCDATEColumn)
        End Function
        
        Public Sub SetDOCDATENull()
            Me(Me.tableVIEWSTOCKREGISTER.DOCDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWSTOCKREGISTER.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableVIEWSTOCKREGISTER.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWSTOCKREGISTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEWSTOCKREGISTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEWSTOCKREGISTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEWSTOCKREGISTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_view_Pending_PurDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpono As DataColumn
        
        Private columnpodate As DataColumn
        
        Private columnpodepartment As DataColumn
        
        Private columnpovendorcode As DataColumn
        
        Private columnitemcode As DataColumn
        
        Private columnquantity As DataColumn
        
        Private columnrate As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnvatamt As DataColumn
        
        Private columndiscamt As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_view_Pending_Pur")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ponoColumn As DataColumn
            Get
                Return Me.columnpono
            End Get
        End Property
        
        Friend ReadOnly Property podateColumn As DataColumn
            Get
                Return Me.columnpodate
            End Get
        End Property
        
        Friend ReadOnly Property podepartmentColumn As DataColumn
            Get
                Return Me.columnpodepartment
            End Get
        End Property
        
        Friend ReadOnly Property povendorcodeColumn As DataColumn
            Get
                Return Me.columnpovendorcode
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property quantityColumn As DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property vatamtColumn As DataColumn
            Get
                Return Me.columnvatamt
            End Get
        End Property
        
        Friend ReadOnly Property discamtColumn As DataColumn
            Get
                Return Me.columndiscamt
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_view_Pending_PurRow
            Get
                Return CType(Me.Rows(index),Inv_view_Pending_PurRow)
            End Get
        End Property
        
        Public Event Inv_view_Pending_PurRowChanged As Inv_view_Pending_PurRowChangeEventHandler
        
        Public Event Inv_view_Pending_PurRowChanging As Inv_view_Pending_PurRowChangeEventHandler
        
        Public Event Inv_view_Pending_PurRowDeleted As Inv_view_Pending_PurRowChangeEventHandler
        
        Public Event Inv_view_Pending_PurRowDeleting As Inv_view_Pending_PurRowChangeEventHandler
        
        Public Overloads Sub AddInv_view_Pending_PurRow(ByVal row As Inv_view_Pending_PurRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_view_Pending_PurRow(ByVal pono As String, ByVal podate As Date, ByVal podepartment As String, ByVal povendorcode As String, ByVal itemcode As String, ByVal quantity As Decimal, ByVal rate As Decimal, ByVal amount As Decimal, ByVal vatamt As Decimal, ByVal discamt As Decimal) As Inv_view_Pending_PurRow
            Dim rowInv_view_Pending_PurRow As Inv_view_Pending_PurRow = CType(Me.NewRow,Inv_view_Pending_PurRow)
            rowInv_view_Pending_PurRow.ItemArray = New Object() {pono, podate, podepartment, povendorcode, itemcode, quantity, rate, amount, vatamt, discamt}
            Me.Rows.Add(rowInv_view_Pending_PurRow)
            Return rowInv_view_Pending_PurRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_view_Pending_PurDataTable = CType(MyBase.Clone,Inv_view_Pending_PurDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_view_Pending_PurDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpono = Me.Columns("pono")
            Me.columnpodate = Me.Columns("podate")
            Me.columnpodepartment = Me.Columns("podepartment")
            Me.columnpovendorcode = Me.Columns("povendorcode")
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnquantity = Me.Columns("quantity")
            Me.columnrate = Me.Columns("rate")
            Me.columnamount = Me.Columns("amount")
            Me.columnvatamt = Me.Columns("vatamt")
            Me.columndiscamt = Me.Columns("discamt")
        End Sub
        
        Private Sub InitClass()
            Me.columnpono = New DataColumn("pono", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpono)
            Me.columnpodate = New DataColumn("podate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpodate)
            Me.columnpodepartment = New DataColumn("podepartment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpodepartment)
            Me.columnpovendorcode = New DataColumn("povendorcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpovendorcode)
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnquantity = New DataColumn("quantity", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnquantity)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnvatamt = New DataColumn("vatamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvatamt)
            Me.columndiscamt = New DataColumn("discamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscamt)
        End Sub
        
        Public Function NewInv_view_Pending_PurRow() As Inv_view_Pending_PurRow
            Return CType(Me.NewRow,Inv_view_Pending_PurRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_view_Pending_PurRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_view_Pending_PurRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_view_Pending_PurRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_PurRowChanged(Me, New Inv_view_Pending_PurRowChangeEvent(CType(e.Row,Inv_view_Pending_PurRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_view_Pending_PurRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_PurRowChanging(Me, New Inv_view_Pending_PurRowChangeEvent(CType(e.Row,Inv_view_Pending_PurRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_view_Pending_PurRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_PurRowDeleted(Me, New Inv_view_Pending_PurRowChangeEvent(CType(e.Row,Inv_view_Pending_PurRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_view_Pending_PurRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_view_Pending_PurRowDeleting(Me, New Inv_view_Pending_PurRowChangeEvent(CType(e.Row,Inv_view_Pending_PurRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_view_Pending_PurRow(ByVal row As Inv_view_Pending_PurRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_view_Pending_PurRow
        Inherits DataRow
        
        Private tableInv_view_Pending_Pur As Inv_view_Pending_PurDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_view_Pending_Pur = CType(Me.Table,Inv_view_Pending_PurDataTable)
        End Sub
        
        Public Property pono As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.ponoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.ponoColumn) = value
            End Set
        End Property
        
        Public Property podate As Date
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.podateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.podateColumn) = value
            End Set
        End Property
        
        Public Property podepartment As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.podepartmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.podepartmentColumn) = value
            End Set
        End Property
        
        Public Property povendorcode As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.povendorcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.povendorcodeColumn) = value
            End Set
        End Property
        
        Public Property itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.itemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property quantity As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.quantityColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.quantityColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.rateColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.amountColumn) = value
            End Set
        End Property
        
        Public Property vatamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.vatamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.vatamtColumn) = value
            End Set
        End Property
        
        Public Property discamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_view_Pending_Pur.discamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_view_Pending_Pur.discamtColumn) = value
            End Set
        End Property
        
        Public Function IsponoNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.ponoColumn)
        End Function
        
        Public Sub SetponoNull()
            Me(Me.tableInv_view_Pending_Pur.ponoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspodateNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.podateColumn)
        End Function
        
        Public Sub SetpodateNull()
            Me(Me.tableInv_view_Pending_Pur.podateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspodepartmentNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.podepartmentColumn)
        End Function
        
        Public Sub SetpodepartmentNull()
            Me(Me.tableInv_view_Pending_Pur.podepartmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspovendorcodeNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.povendorcodeColumn)
        End Function
        
        Public Sub SetpovendorcodeNull()
            Me(Me.tableInv_view_Pending_Pur.povendorcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.itemcodeColumn)
        End Function
        
        Public Sub SetitemcodeNull()
            Me(Me.tableInv_view_Pending_Pur.itemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsquantityNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.quantityColumn)
        End Function
        
        Public Sub SetquantityNull()
            Me(Me.tableInv_view_Pending_Pur.quantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tableInv_view_Pending_Pur.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableInv_view_Pending_Pur.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvatamtNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.vatamtColumn)
        End Function
        
        Public Sub SetvatamtNull()
            Me(Me.tableInv_view_Pending_Pur.vatamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscamtNull() As Boolean
            Return Me.IsNull(Me.tableInv_view_Pending_Pur.discamtColumn)
        End Function
        
        Public Sub SetdiscamtNull()
            Me(Me.tableInv_view_Pending_Pur.discamtColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_view_Pending_PurRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_view_Pending_PurRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_view_Pending_PurRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_view_Pending_PurRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVENTORYITEMMASTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnitemcode As DataColumn
        
        Private columnitemname As DataColumn
        
        Private column_alias As DataColumn
        
        Private columngroupcode As DataColumn
        
        Private columngroupname As DataColumn
        
        Private columnsubgroupcode As DataColumn
        
        Private columnsubgroupname As DataColumn
        
        Private columnsubsubgroupcode As DataColumn
        
        Private columnsubsubgroupname As DataColumn
        
        Private columnreorderlevel As DataColumn
        
        Private columnminqty As DataColumn
        
        Private columnmaxqty As DataColumn
        
        Private columnvaluation As DataColumn
        
        Private columnpurchaserate As DataColumn
        
        Private columnsalerate As DataColumn
        
        Private columnstockuom As DataColumn
        
        Private columnreceiveuom As DataColumn
        
        Private columnsaleuom As DataColumn
        
        Private columnleadtime As DataColumn
        
        Private columndoubleuom As DataColumn
        
        Private columnopstock As DataColumn
        
        Private columnopvalue As DataColumn
        
        Private columnconvvalue As DataColumn
        
        Private columnFreeze As DataColumn
        
        Private columnTypeCode As DataColumn
        
        Private columnAdduser As DataColumn
        
        Private columnAdddate As DataColumn
        
        Private columnSTORECODE As DataColumn
        
        Private columnclosingqty As DataColumn
        
        Private columnclosingval As DataColumn
        
        Private columnrcptqty As DataColumn
        
        Private columnrcptval As DataColumn
        
        Private columnissueqty As DataColumn
        
        Private columnissueval As DataColumn
        
        Private columnabc As DataColumn
        
        Private columnfsm As DataColumn
        
        Private columnprefix As DataColumn
        
        Private columnwefdate As DataColumn
        
        Private columnstkoption As DataColumn
        
        Private columnbinlocation As DataColumn
        
        Private columncategory As DataColumn
        
        Private columnselectopt As DataColumn
        
        Private columnSTARTDATE As DataColumn
        
        Private columnPEGS As DataColumn
        
        Private columnml As DataColumn
        
        Private columnPEGSRATE As DataColumn
        
        Private columnOPT As DataColumn
        
        Private columnaprdrqty As DataColumn
        
        Private columnaprdrval As DataColumn
        
        Private columnaprcrqty As DataColumn
        
        Private columnaprcrval As DataColumn
        
        Private columnmaydrqty As DataColumn
        
        Private columnmaydrval As DataColumn
        
        Private columnmaycrqty As DataColumn
        
        Private columnmaycrval As DataColumn
        
        Private columnjundrqty As DataColumn
        
        Private columnjundrval As DataColumn
        
        Private columnjuncrqty As DataColumn
        
        Private columnjuncrval As DataColumn
        
        Private columnjuldrqty As DataColumn
        
        Private columnjuldrval As DataColumn
        
        Private columnjulcrqty As DataColumn
        
        Private columnjulcrval As DataColumn
        
        Private columnaugdrqty As DataColumn
        
        Private columnaugdrval As DataColumn
        
        Private columnaugcrqty As DataColumn
        
        Private columnaugcrval As DataColumn
        
        Private columnsepdrqty As DataColumn
        
        Private columnsepdrval As DataColumn
        
        Private columnsepcrqty As DataColumn
        
        Private columnsepcrval As DataColumn
        
        Private columnoctdrqty As DataColumn
        
        Private columnoctdrval As DataColumn
        
        Private columnoctcrqty As DataColumn
        
        Private columnoctcrval As DataColumn
        
        Private columnnovcrqty As DataColumn
        
        Private columnnovcrval As DataColumn
        
        Private columnnovdrqty As DataColumn
        
        Private columnnovdrval As DataColumn
        
        Private columndecdrqty As DataColumn
        
        Private columndecdrval As DataColumn
        
        Private columndeccrqty As DataColumn
        
        Private columndeccrval As DataColumn
        
        Private columnjandrqty As DataColumn
        
        Private columnjandrval As DataColumn
        
        Private columnjancrqty As DataColumn
        
        Private columnjancrval As DataColumn
        
        Private columnfebdrqty As DataColumn
        
        Private columnfebdrval As DataColumn
        
        Private columnfebcrqty As DataColumn
        
        Private columnfebcrval As DataColumn
        
        Private columnmardrqty As DataColumn
        
        Private columnmardrval As DataColumn
        
        Private columnmarcrqty As DataColumn
        
        Private columnmarcrval As DataColumn
        
        Private columnclstock As DataColumn
        
        Private columnclvalue As DataColumn
        
        Friend Sub New()
            MyBase.New("INVENTORYITEMMASTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property itemnameColumn As DataColumn
            Get
                Return Me.columnitemname
            End Get
        End Property
        
        Friend ReadOnly Property _aliasColumn As DataColumn
            Get
                Return Me.column_alias
            End Get
        End Property
        
        Friend ReadOnly Property groupcodeColumn As DataColumn
            Get
                Return Me.columngroupcode
            End Get
        End Property
        
        Friend ReadOnly Property groupnameColumn As DataColumn
            Get
                Return Me.columngroupname
            End Get
        End Property
        
        Friend ReadOnly Property subgroupcodeColumn As DataColumn
            Get
                Return Me.columnsubgroupcode
            End Get
        End Property
        
        Friend ReadOnly Property subgroupnameColumn As DataColumn
            Get
                Return Me.columnsubgroupname
            End Get
        End Property
        
        Friend ReadOnly Property subsubgroupcodeColumn As DataColumn
            Get
                Return Me.columnsubsubgroupcode
            End Get
        End Property
        
        Friend ReadOnly Property subsubgroupnameColumn As DataColumn
            Get
                Return Me.columnsubsubgroupname
            End Get
        End Property
        
        Friend ReadOnly Property reorderlevelColumn As DataColumn
            Get
                Return Me.columnreorderlevel
            End Get
        End Property
        
        Friend ReadOnly Property minqtyColumn As DataColumn
            Get
                Return Me.columnminqty
            End Get
        End Property
        
        Friend ReadOnly Property maxqtyColumn As DataColumn
            Get
                Return Me.columnmaxqty
            End Get
        End Property
        
        Friend ReadOnly Property valuationColumn As DataColumn
            Get
                Return Me.columnvaluation
            End Get
        End Property
        
        Friend ReadOnly Property purchaserateColumn As DataColumn
            Get
                Return Me.columnpurchaserate
            End Get
        End Property
        
        Friend ReadOnly Property salerateColumn As DataColumn
            Get
                Return Me.columnsalerate
            End Get
        End Property
        
        Friend ReadOnly Property stockuomColumn As DataColumn
            Get
                Return Me.columnstockuom
            End Get
        End Property
        
        Friend ReadOnly Property receiveuomColumn As DataColumn
            Get
                Return Me.columnreceiveuom
            End Get
        End Property
        
        Friend ReadOnly Property saleuomColumn As DataColumn
            Get
                Return Me.columnsaleuom
            End Get
        End Property
        
        Friend ReadOnly Property leadtimeColumn As DataColumn
            Get
                Return Me.columnleadtime
            End Get
        End Property
        
        Friend ReadOnly Property doubleuomColumn As DataColumn
            Get
                Return Me.columndoubleuom
            End Get
        End Property
        
        Friend ReadOnly Property opstockColumn As DataColumn
            Get
                Return Me.columnopstock
            End Get
        End Property
        
        Friend ReadOnly Property opvalueColumn As DataColumn
            Get
                Return Me.columnopvalue
            End Get
        End Property
        
        Friend ReadOnly Property convvalueColumn As DataColumn
            Get
                Return Me.columnconvvalue
            End Get
        End Property
        
        Friend ReadOnly Property FreezeColumn As DataColumn
            Get
                Return Me.columnFreeze
            End Get
        End Property
        
        Friend ReadOnly Property TypeCodeColumn As DataColumn
            Get
                Return Me.columnTypeCode
            End Get
        End Property
        
        Friend ReadOnly Property AdduserColumn As DataColumn
            Get
                Return Me.columnAdduser
            End Get
        End Property
        
        Friend ReadOnly Property AdddateColumn As DataColumn
            Get
                Return Me.columnAdddate
            End Get
        End Property
        
        Friend ReadOnly Property STORECODEColumn As DataColumn
            Get
                Return Me.columnSTORECODE
            End Get
        End Property
        
        Friend ReadOnly Property closingqtyColumn As DataColumn
            Get
                Return Me.columnclosingqty
            End Get
        End Property
        
        Friend ReadOnly Property closingvalColumn As DataColumn
            Get
                Return Me.columnclosingval
            End Get
        End Property
        
        Friend ReadOnly Property rcptqtyColumn As DataColumn
            Get
                Return Me.columnrcptqty
            End Get
        End Property
        
        Friend ReadOnly Property rcptvalColumn As DataColumn
            Get
                Return Me.columnrcptval
            End Get
        End Property
        
        Friend ReadOnly Property issueqtyColumn As DataColumn
            Get
                Return Me.columnissueqty
            End Get
        End Property
        
        Friend ReadOnly Property issuevalColumn As DataColumn
            Get
                Return Me.columnissueval
            End Get
        End Property
        
        Friend ReadOnly Property abcColumn As DataColumn
            Get
                Return Me.columnabc
            End Get
        End Property
        
        Friend ReadOnly Property fsmColumn As DataColumn
            Get
                Return Me.columnfsm
            End Get
        End Property
        
        Friend ReadOnly Property prefixColumn As DataColumn
            Get
                Return Me.columnprefix
            End Get
        End Property
        
        Friend ReadOnly Property wefdateColumn As DataColumn
            Get
                Return Me.columnwefdate
            End Get
        End Property
        
        Friend ReadOnly Property stkoptionColumn As DataColumn
            Get
                Return Me.columnstkoption
            End Get
        End Property
        
        Friend ReadOnly Property binlocationColumn As DataColumn
            Get
                Return Me.columnbinlocation
            End Get
        End Property
        
        Friend ReadOnly Property categoryColumn As DataColumn
            Get
                Return Me.columncategory
            End Get
        End Property
        
        Friend ReadOnly Property selectoptColumn As DataColumn
            Get
                Return Me.columnselectopt
            End Get
        End Property
        
        Friend ReadOnly Property STARTDATEColumn As DataColumn
            Get
                Return Me.columnSTARTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PEGSColumn As DataColumn
            Get
                Return Me.columnPEGS
            End Get
        End Property
        
        Friend ReadOnly Property mlColumn As DataColumn
            Get
                Return Me.columnml
            End Get
        End Property
        
        Friend ReadOnly Property PEGSRATEColumn As DataColumn
            Get
                Return Me.columnPEGSRATE
            End Get
        End Property
        
        Friend ReadOnly Property OPTColumn As DataColumn
            Get
                Return Me.columnOPT
            End Get
        End Property
        
        Friend ReadOnly Property aprdrqtyColumn As DataColumn
            Get
                Return Me.columnaprdrqty
            End Get
        End Property
        
        Friend ReadOnly Property aprdrvalColumn As DataColumn
            Get
                Return Me.columnaprdrval
            End Get
        End Property
        
        Friend ReadOnly Property aprcrqtyColumn As DataColumn
            Get
                Return Me.columnaprcrqty
            End Get
        End Property
        
        Friend ReadOnly Property aprcrvalColumn As DataColumn
            Get
                Return Me.columnaprcrval
            End Get
        End Property
        
        Friend ReadOnly Property maydrqtyColumn As DataColumn
            Get
                Return Me.columnmaydrqty
            End Get
        End Property
        
        Friend ReadOnly Property maydrvalColumn As DataColumn
            Get
                Return Me.columnmaydrval
            End Get
        End Property
        
        Friend ReadOnly Property maycrqtyColumn As DataColumn
            Get
                Return Me.columnmaycrqty
            End Get
        End Property
        
        Friend ReadOnly Property maycrvalColumn As DataColumn
            Get
                Return Me.columnmaycrval
            End Get
        End Property
        
        Friend ReadOnly Property jundrqtyColumn As DataColumn
            Get
                Return Me.columnjundrqty
            End Get
        End Property
        
        Friend ReadOnly Property jundrvalColumn As DataColumn
            Get
                Return Me.columnjundrval
            End Get
        End Property
        
        Friend ReadOnly Property juncrqtyColumn As DataColumn
            Get
                Return Me.columnjuncrqty
            End Get
        End Property
        
        Friend ReadOnly Property juncrvalColumn As DataColumn
            Get
                Return Me.columnjuncrval
            End Get
        End Property
        
        Friend ReadOnly Property juldrqtyColumn As DataColumn
            Get
                Return Me.columnjuldrqty
            End Get
        End Property
        
        Friend ReadOnly Property juldrvalColumn As DataColumn
            Get
                Return Me.columnjuldrval
            End Get
        End Property
        
        Friend ReadOnly Property julcrqtyColumn As DataColumn
            Get
                Return Me.columnjulcrqty
            End Get
        End Property
        
        Friend ReadOnly Property julcrvalColumn As DataColumn
            Get
                Return Me.columnjulcrval
            End Get
        End Property
        
        Friend ReadOnly Property augdrqtyColumn As DataColumn
            Get
                Return Me.columnaugdrqty
            End Get
        End Property
        
        Friend ReadOnly Property augdrvalColumn As DataColumn
            Get
                Return Me.columnaugdrval
            End Get
        End Property
        
        Friend ReadOnly Property augcrqtyColumn As DataColumn
            Get
                Return Me.columnaugcrqty
            End Get
        End Property
        
        Friend ReadOnly Property augcrvalColumn As DataColumn
            Get
                Return Me.columnaugcrval
            End Get
        End Property
        
        Friend ReadOnly Property sepdrqtyColumn As DataColumn
            Get
                Return Me.columnsepdrqty
            End Get
        End Property
        
        Friend ReadOnly Property sepdrvalColumn As DataColumn
            Get
                Return Me.columnsepdrval
            End Get
        End Property
        
        Friend ReadOnly Property sepcrqtyColumn As DataColumn
            Get
                Return Me.columnsepcrqty
            End Get
        End Property
        
        Friend ReadOnly Property sepcrvalColumn As DataColumn
            Get
                Return Me.columnsepcrval
            End Get
        End Property
        
        Friend ReadOnly Property octdrqtyColumn As DataColumn
            Get
                Return Me.columnoctdrqty
            End Get
        End Property
        
        Friend ReadOnly Property octdrvalColumn As DataColumn
            Get
                Return Me.columnoctdrval
            End Get
        End Property
        
        Friend ReadOnly Property octcrqtyColumn As DataColumn
            Get
                Return Me.columnoctcrqty
            End Get
        End Property
        
        Friend ReadOnly Property octcrvalColumn As DataColumn
            Get
                Return Me.columnoctcrval
            End Get
        End Property
        
        Friend ReadOnly Property novcrqtyColumn As DataColumn
            Get
                Return Me.columnnovcrqty
            End Get
        End Property
        
        Friend ReadOnly Property novcrvalColumn As DataColumn
            Get
                Return Me.columnnovcrval
            End Get
        End Property
        
        Friend ReadOnly Property novdrqtyColumn As DataColumn
            Get
                Return Me.columnnovdrqty
            End Get
        End Property
        
        Friend ReadOnly Property novdrvalColumn As DataColumn
            Get
                Return Me.columnnovdrval
            End Get
        End Property
        
        Friend ReadOnly Property decdrqtyColumn As DataColumn
            Get
                Return Me.columndecdrqty
            End Get
        End Property
        
        Friend ReadOnly Property decdrvalColumn As DataColumn
            Get
                Return Me.columndecdrval
            End Get
        End Property
        
        Friend ReadOnly Property deccrqtyColumn As DataColumn
            Get
                Return Me.columndeccrqty
            End Get
        End Property
        
        Friend ReadOnly Property deccrvalColumn As DataColumn
            Get
                Return Me.columndeccrval
            End Get
        End Property
        
        Friend ReadOnly Property jandrqtyColumn As DataColumn
            Get
                Return Me.columnjandrqty
            End Get
        End Property
        
        Friend ReadOnly Property jandrvalColumn As DataColumn
            Get
                Return Me.columnjandrval
            End Get
        End Property
        
        Friend ReadOnly Property jancrqtyColumn As DataColumn
            Get
                Return Me.columnjancrqty
            End Get
        End Property
        
        Friend ReadOnly Property jancrvalColumn As DataColumn
            Get
                Return Me.columnjancrval
            End Get
        End Property
        
        Friend ReadOnly Property febdrqtyColumn As DataColumn
            Get
                Return Me.columnfebdrqty
            End Get
        End Property
        
        Friend ReadOnly Property febdrvalColumn As DataColumn
            Get
                Return Me.columnfebdrval
            End Get
        End Property
        
        Friend ReadOnly Property febcrqtyColumn As DataColumn
            Get
                Return Me.columnfebcrqty
            End Get
        End Property
        
        Friend ReadOnly Property febcrvalColumn As DataColumn
            Get
                Return Me.columnfebcrval
            End Get
        End Property
        
        Friend ReadOnly Property mardrqtyColumn As DataColumn
            Get
                Return Me.columnmardrqty
            End Get
        End Property
        
        Friend ReadOnly Property mardrvalColumn As DataColumn
            Get
                Return Me.columnmardrval
            End Get
        End Property
        
        Friend ReadOnly Property marcrqtyColumn As DataColumn
            Get
                Return Me.columnmarcrqty
            End Get
        End Property
        
        Friend ReadOnly Property marcrvalColumn As DataColumn
            Get
                Return Me.columnmarcrval
            End Get
        End Property
        
        Friend ReadOnly Property clstockColumn As DataColumn
            Get
                Return Me.columnclstock
            End Get
        End Property
        
        Friend ReadOnly Property clvalueColumn As DataColumn
            Get
                Return Me.columnclvalue
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As INVENTORYITEMMASTERRow
            Get
                Return CType(Me.Rows(index),INVENTORYITEMMASTERRow)
            End Get
        End Property
        
        Public Event INVENTORYITEMMASTERRowChanged As INVENTORYITEMMASTERRowChangeEventHandler
        
        Public Event INVENTORYITEMMASTERRowChanging As INVENTORYITEMMASTERRowChangeEventHandler
        
        Public Event INVENTORYITEMMASTERRowDeleted As INVENTORYITEMMASTERRowChangeEventHandler
        
        Public Event INVENTORYITEMMASTERRowDeleting As INVENTORYITEMMASTERRowChangeEventHandler
        
        Public Overloads Sub AddINVENTORYITEMMASTERRow(ByVal row As INVENTORYITEMMASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddINVENTORYITEMMASTERRow( _
                    ByVal itemcode As String,  _
                    ByVal itemname As String,  _
                    ByVal _alias As String,  _
                    ByVal groupcode As String,  _
                    ByVal groupname As String,  _
                    ByVal subgroupcode As String,  _
                    ByVal subgroupname As String,  _
                    ByVal subsubgroupcode As String,  _
                    ByVal subsubgroupname As String,  _
                    ByVal reorderlevel As Double,  _
                    ByVal minqty As Double,  _
                    ByVal maxqty As Double,  _
                    ByVal valuation As String,  _
                    ByVal purchaserate As Double,  _
                    ByVal salerate As Double,  _
                    ByVal stockuom As String,  _
                    ByVal receiveuom As String,  _
                    ByVal saleuom As String,  _
                    ByVal leadtime As Decimal,  _
                    ByVal doubleuom As String,  _
                    ByVal opstock As Double,  _
                    ByVal opvalue As Double,  _
                    ByVal convvalue As Double,  _
                    ByVal Freeze As String,  _
                    ByVal TypeCode As String,  _
                    ByVal Adduser As String,  _
                    ByVal Adddate As Date,  _
                    ByVal STORECODE As String,  _
                    ByVal closingqty As Decimal,  _
                    ByVal closingval As Decimal,  _
                    ByVal rcptqty As Decimal,  _
                    ByVal rcptval As Decimal,  _
                    ByVal issueqty As Decimal,  _
                    ByVal issueval As Decimal,  _
                    ByVal abc As String,  _
                    ByVal fsm As String,  _
                    ByVal prefix As String,  _
                    ByVal wefdate As Date,  _
                    ByVal stkoption As String,  _
                    ByVal binlocation As String,  _
                    ByVal category As String,  _
                    ByVal selectopt As String,  _
                    ByVal STARTDATE As Date,  _
                    ByVal PEGS As Decimal,  _
                    ByVal ml As Decimal,  _
                    ByVal PEGSRATE As Decimal,  _
                    ByVal OPT As String,  _
                    ByVal aprdrqty As Decimal,  _
                    ByVal aprdrval As Decimal,  _
                    ByVal aprcrqty As Decimal,  _
                    ByVal aprcrval As Decimal,  _
                    ByVal maydrqty As Decimal,  _
                    ByVal maydrval As Decimal,  _
                    ByVal maycrqty As Decimal,  _
                    ByVal maycrval As Decimal,  _
                    ByVal jundrqty As Decimal,  _
                    ByVal jundrval As Decimal,  _
                    ByVal juncrqty As Decimal,  _
                    ByVal juncrval As Decimal,  _
                    ByVal juldrqty As Decimal,  _
                    ByVal juldrval As Decimal,  _
                    ByVal julcrqty As Decimal,  _
                    ByVal julcrval As Decimal,  _
                    ByVal augdrqty As Decimal,  _
                    ByVal augdrval As Decimal,  _
                    ByVal augcrqty As Decimal,  _
                    ByVal augcrval As Decimal,  _
                    ByVal sepdrqty As Decimal,  _
                    ByVal sepdrval As Decimal,  _
                    ByVal sepcrqty As Decimal,  _
                    ByVal sepcrval As Decimal,  _
                    ByVal octdrqty As Decimal,  _
                    ByVal octdrval As Decimal,  _
                    ByVal octcrqty As Decimal,  _
                    ByVal octcrval As Decimal,  _
                    ByVal novcrqty As Decimal,  _
                    ByVal novcrval As Decimal,  _
                    ByVal novdrqty As Decimal,  _
                    ByVal novdrval As Decimal,  _
                    ByVal decdrqty As Decimal,  _
                    ByVal decdrval As Decimal,  _
                    ByVal deccrqty As Decimal,  _
                    ByVal deccrval As Decimal,  _
                    ByVal jandrqty As Decimal,  _
                    ByVal jandrval As Decimal,  _
                    ByVal jancrqty As Decimal,  _
                    ByVal jancrval As Decimal,  _
                    ByVal febdrqty As Decimal,  _
                    ByVal febdrval As Decimal,  _
                    ByVal febcrqty As Decimal,  _
                    ByVal febcrval As Decimal,  _
                    ByVal mardrqty As Decimal,  _
                    ByVal mardrval As Decimal,  _
                    ByVal marcrqty As Decimal,  _
                    ByVal marcrval As Decimal,  _
                    ByVal clstock As Decimal,  _
                    ByVal clvalue As Decimal) As INVENTORYITEMMASTERRow
            Dim rowINVENTORYITEMMASTERRow As INVENTORYITEMMASTERRow = CType(Me.NewRow,INVENTORYITEMMASTERRow)
            rowINVENTORYITEMMASTERRow.ItemArray = New Object() {itemcode, itemname, _alias, groupcode, groupname, subgroupcode, subgroupname, subsubgroupcode, subsubgroupname, reorderlevel, minqty, maxqty, valuation, purchaserate, salerate, stockuom, receiveuom, saleuom, leadtime, doubleuom, opstock, opvalue, convvalue, Freeze, TypeCode, Adduser, Adddate, STORECODE, closingqty, closingval, rcptqty, rcptval, issueqty, issueval, abc, fsm, prefix, wefdate, stkoption, binlocation, category, selectopt, STARTDATE, PEGS, ml, PEGSRATE, OPT, aprdrqty, aprdrval, aprcrqty, aprcrval, maydrqty, maydrval, maycrqty, maycrval, jundrqty, jundrval, juncrqty, juncrval, juldrqty, juldrval, julcrqty, julcrval, augdrqty, augdrval, augcrqty, augcrval, sepdrqty, sepdrval, sepcrqty, sepcrval, octdrqty, octdrval, octcrqty, octcrval, novcrqty, novcrval, novdrqty, novdrval, decdrqty, decdrval, deccrqty, deccrval, jandrqty, jandrval, jancrqty, jancrval, febdrqty, febdrval, febcrqty, febcrval, mardrqty, mardrval, marcrqty, marcrval, clstock, clvalue}
            Me.Rows.Add(rowINVENTORYITEMMASTERRow)
            Return rowINVENTORYITEMMASTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As INVENTORYITEMMASTERDataTable = CType(MyBase.Clone,INVENTORYITEMMASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New INVENTORYITEMMASTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnitemname = Me.Columns("itemname")
            Me.column_alias = Me.Columns("alias")
            Me.columngroupcode = Me.Columns("groupcode")
            Me.columngroupname = Me.Columns("groupname")
            Me.columnsubgroupcode = Me.Columns("subgroupcode")
            Me.columnsubgroupname = Me.Columns("subgroupname")
            Me.columnsubsubgroupcode = Me.Columns("subsubgroupcode")
            Me.columnsubsubgroupname = Me.Columns("subsubgroupname")
            Me.columnreorderlevel = Me.Columns("reorderlevel")
            Me.columnminqty = Me.Columns("minqty")
            Me.columnmaxqty = Me.Columns("maxqty")
            Me.columnvaluation = Me.Columns("valuation")
            Me.columnpurchaserate = Me.Columns("purchaserate")
            Me.columnsalerate = Me.Columns("salerate")
            Me.columnstockuom = Me.Columns("stockuom")
            Me.columnreceiveuom = Me.Columns("receiveuom")
            Me.columnsaleuom = Me.Columns("saleuom")
            Me.columnleadtime = Me.Columns("leadtime")
            Me.columndoubleuom = Me.Columns("doubleuom")
            Me.columnopstock = Me.Columns("opstock")
            Me.columnopvalue = Me.Columns("opvalue")
            Me.columnconvvalue = Me.Columns("convvalue")
            Me.columnFreeze = Me.Columns("Freeze")
            Me.columnTypeCode = Me.Columns("TypeCode")
            Me.columnAdduser = Me.Columns("Adduser")
            Me.columnAdddate = Me.Columns("Adddate")
            Me.columnSTORECODE = Me.Columns("STORECODE")
            Me.columnclosingqty = Me.Columns("closingqty")
            Me.columnclosingval = Me.Columns("closingval")
            Me.columnrcptqty = Me.Columns("rcptqty")
            Me.columnrcptval = Me.Columns("rcptval")
            Me.columnissueqty = Me.Columns("issueqty")
            Me.columnissueval = Me.Columns("issueval")
            Me.columnabc = Me.Columns("abc")
            Me.columnfsm = Me.Columns("fsm")
            Me.columnprefix = Me.Columns("prefix")
            Me.columnwefdate = Me.Columns("wefdate")
            Me.columnstkoption = Me.Columns("stkoption")
            Me.columnbinlocation = Me.Columns("binlocation")
            Me.columncategory = Me.Columns("category")
            Me.columnselectopt = Me.Columns("selectopt")
            Me.columnSTARTDATE = Me.Columns("STARTDATE")
            Me.columnPEGS = Me.Columns("PEGS")
            Me.columnml = Me.Columns("ml")
            Me.columnPEGSRATE = Me.Columns("PEGSRATE")
            Me.columnOPT = Me.Columns("OPT")
            Me.columnaprdrqty = Me.Columns("aprdrqty")
            Me.columnaprdrval = Me.Columns("aprdrval")
            Me.columnaprcrqty = Me.Columns("aprcrqty")
            Me.columnaprcrval = Me.Columns("aprcrval")
            Me.columnmaydrqty = Me.Columns("maydrqty")
            Me.columnmaydrval = Me.Columns("maydrval")
            Me.columnmaycrqty = Me.Columns("maycrqty")
            Me.columnmaycrval = Me.Columns("maycrval")
            Me.columnjundrqty = Me.Columns("jundrqty")
            Me.columnjundrval = Me.Columns("jundrval")
            Me.columnjuncrqty = Me.Columns("juncrqty")
            Me.columnjuncrval = Me.Columns("juncrval")
            Me.columnjuldrqty = Me.Columns("juldrqty")
            Me.columnjuldrval = Me.Columns("juldrval")
            Me.columnjulcrqty = Me.Columns("julcrqty")
            Me.columnjulcrval = Me.Columns("julcrval")
            Me.columnaugdrqty = Me.Columns("augdrqty")
            Me.columnaugdrval = Me.Columns("augdrval")
            Me.columnaugcrqty = Me.Columns("augcrqty")
            Me.columnaugcrval = Me.Columns("augcrval")
            Me.columnsepdrqty = Me.Columns("sepdrqty")
            Me.columnsepdrval = Me.Columns("sepdrval")
            Me.columnsepcrqty = Me.Columns("sepcrqty")
            Me.columnsepcrval = Me.Columns("sepcrval")
            Me.columnoctdrqty = Me.Columns("octdrqty")
            Me.columnoctdrval = Me.Columns("octdrval")
            Me.columnoctcrqty = Me.Columns("octcrqty")
            Me.columnoctcrval = Me.Columns("octcrval")
            Me.columnnovcrqty = Me.Columns("novcrqty")
            Me.columnnovcrval = Me.Columns("novcrval")
            Me.columnnovdrqty = Me.Columns("novdrqty")
            Me.columnnovdrval = Me.Columns("novdrval")
            Me.columndecdrqty = Me.Columns("decdrqty")
            Me.columndecdrval = Me.Columns("decdrval")
            Me.columndeccrqty = Me.Columns("deccrqty")
            Me.columndeccrval = Me.Columns("deccrval")
            Me.columnjandrqty = Me.Columns("jandrqty")
            Me.columnjandrval = Me.Columns("jandrval")
            Me.columnjancrqty = Me.Columns("jancrqty")
            Me.columnjancrval = Me.Columns("jancrval")
            Me.columnfebdrqty = Me.Columns("febdrqty")
            Me.columnfebdrval = Me.Columns("febdrval")
            Me.columnfebcrqty = Me.Columns("febcrqty")
            Me.columnfebcrval = Me.Columns("febcrval")
            Me.columnmardrqty = Me.Columns("mardrqty")
            Me.columnmardrval = Me.Columns("mardrval")
            Me.columnmarcrqty = Me.Columns("marcrqty")
            Me.columnmarcrval = Me.Columns("marcrval")
            Me.columnclstock = Me.Columns("clstock")
            Me.columnclvalue = Me.Columns("clvalue")
        End Sub
        
        Private Sub InitClass()
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnitemname = New DataColumn("itemname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemname)
            Me.column_alias = New DataColumn("alias", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.column_alias)
            Me.columngroupcode = New DataColumn("groupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupcode)
            Me.columngroupname = New DataColumn("groupname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupname)
            Me.columnsubgroupcode = New DataColumn("subgroupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubgroupcode)
            Me.columnsubgroupname = New DataColumn("subgroupname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubgroupname)
            Me.columnsubsubgroupcode = New DataColumn("subsubgroupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubsubgroupcode)
            Me.columnsubsubgroupname = New DataColumn("subsubgroupname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsubsubgroupname)
            Me.columnreorderlevel = New DataColumn("reorderlevel", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreorderlevel)
            Me.columnminqty = New DataColumn("minqty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnminqty)
            Me.columnmaxqty = New DataColumn("maxqty", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxqty)
            Me.columnvaluation = New DataColumn("valuation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvaluation)
            Me.columnpurchaserate = New DataColumn("purchaserate", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpurchaserate)
            Me.columnsalerate = New DataColumn("salerate", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsalerate)
            Me.columnstockuom = New DataColumn("stockuom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstockuom)
            Me.columnreceiveuom = New DataColumn("receiveuom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiveuom)
            Me.columnsaleuom = New DataColumn("saleuom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsaleuom)
            Me.columnleadtime = New DataColumn("leadtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnleadtime)
            Me.columndoubleuom = New DataColumn("doubleuom", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndoubleuom)
            Me.columnopstock = New DataColumn("opstock", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnopstock)
            Me.columnopvalue = New DataColumn("opvalue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnopvalue)
            Me.columnconvvalue = New DataColumn("convvalue", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnconvvalue)
            Me.columnFreeze = New DataColumn("Freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFreeze)
            Me.columnTypeCode = New DataColumn("TypeCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeCode)
            Me.columnAdduser = New DataColumn("Adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdduser)
            Me.columnAdddate = New DataColumn("Adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdddate)
            Me.columnSTORECODE = New DataColumn("STORECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORECODE)
            Me.columnclosingqty = New DataColumn("closingqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclosingqty)
            Me.columnclosingval = New DataColumn("closingval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclosingval)
            Me.columnrcptqty = New DataColumn("rcptqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrcptqty)
            Me.columnrcptval = New DataColumn("rcptval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrcptval)
            Me.columnissueqty = New DataColumn("issueqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnissueqty)
            Me.columnissueval = New DataColumn("issueval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnissueval)
            Me.columnabc = New DataColumn("abc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnabc)
            Me.columnfsm = New DataColumn("fsm", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfsm)
            Me.columnprefix = New DataColumn("prefix", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnprefix)
            Me.columnwefdate = New DataColumn("wefdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwefdate)
            Me.columnstkoption = New DataColumn("stkoption", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstkoption)
            Me.columnbinlocation = New DataColumn("binlocation", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbinlocation)
            Me.columncategory = New DataColumn("category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncategory)
            Me.columnselectopt = New DataColumn("selectopt", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnselectopt)
            Me.columnSTARTDATE = New DataColumn("STARTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTARTDATE)
            Me.columnPEGS = New DataColumn("PEGS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPEGS)
            Me.columnml = New DataColumn("ml", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnml)
            Me.columnPEGSRATE = New DataColumn("PEGSRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPEGSRATE)
            Me.columnOPT = New DataColumn("OPT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPT)
            Me.columnaprdrqty = New DataColumn("aprdrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaprdrqty)
            Me.columnaprdrval = New DataColumn("aprdrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaprdrval)
            Me.columnaprcrqty = New DataColumn("aprcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaprcrqty)
            Me.columnaprcrval = New DataColumn("aprcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaprcrval)
            Me.columnmaydrqty = New DataColumn("maydrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaydrqty)
            Me.columnmaydrval = New DataColumn("maydrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaydrval)
            Me.columnmaycrqty = New DataColumn("maycrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaycrqty)
            Me.columnmaycrval = New DataColumn("maycrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaycrval)
            Me.columnjundrqty = New DataColumn("jundrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjundrqty)
            Me.columnjundrval = New DataColumn("jundrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjundrval)
            Me.columnjuncrqty = New DataColumn("juncrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjuncrqty)
            Me.columnjuncrval = New DataColumn("juncrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjuncrval)
            Me.columnjuldrqty = New DataColumn("juldrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjuldrqty)
            Me.columnjuldrval = New DataColumn("juldrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjuldrval)
            Me.columnjulcrqty = New DataColumn("julcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjulcrqty)
            Me.columnjulcrval = New DataColumn("julcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjulcrval)
            Me.columnaugdrqty = New DataColumn("augdrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaugdrqty)
            Me.columnaugdrval = New DataColumn("augdrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaugdrval)
            Me.columnaugcrqty = New DataColumn("augcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaugcrqty)
            Me.columnaugcrval = New DataColumn("augcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaugcrval)
            Me.columnsepdrqty = New DataColumn("sepdrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsepdrqty)
            Me.columnsepdrval = New DataColumn("sepdrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsepdrval)
            Me.columnsepcrqty = New DataColumn("sepcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsepcrqty)
            Me.columnsepcrval = New DataColumn("sepcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsepcrval)
            Me.columnoctdrqty = New DataColumn("octdrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoctdrqty)
            Me.columnoctdrval = New DataColumn("octdrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoctdrval)
            Me.columnoctcrqty = New DataColumn("octcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoctcrqty)
            Me.columnoctcrval = New DataColumn("octcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoctcrval)
            Me.columnnovcrqty = New DataColumn("novcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnovcrqty)
            Me.columnnovcrval = New DataColumn("novcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnovcrval)
            Me.columnnovdrqty = New DataColumn("novdrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnovdrqty)
            Me.columnnovdrval = New DataColumn("novdrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnovdrval)
            Me.columndecdrqty = New DataColumn("decdrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndecdrqty)
            Me.columndecdrval = New DataColumn("decdrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndecdrval)
            Me.columndeccrqty = New DataColumn("deccrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeccrqty)
            Me.columndeccrval = New DataColumn("deccrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndeccrval)
            Me.columnjandrqty = New DataColumn("jandrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjandrqty)
            Me.columnjandrval = New DataColumn("jandrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjandrval)
            Me.columnjancrqty = New DataColumn("jancrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjancrqty)
            Me.columnjancrval = New DataColumn("jancrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnjancrval)
            Me.columnfebdrqty = New DataColumn("febdrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfebdrqty)
            Me.columnfebdrval = New DataColumn("febdrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfebdrval)
            Me.columnfebcrqty = New DataColumn("febcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfebcrqty)
            Me.columnfebcrval = New DataColumn("febcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfebcrval)
            Me.columnmardrqty = New DataColumn("mardrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmardrqty)
            Me.columnmardrval = New DataColumn("mardrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmardrval)
            Me.columnmarcrqty = New DataColumn("marcrqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmarcrqty)
            Me.columnmarcrval = New DataColumn("marcrval", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmarcrval)
            Me.columnclstock = New DataColumn("clstock", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclstock)
            Me.columnclvalue = New DataColumn("clvalue", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnclvalue)
            Me.columnitemcode.AllowDBNull = false
            Me.columnitemname.AllowDBNull = false
        End Sub
        
        Public Function NewINVENTORYITEMMASTERRow() As INVENTORYITEMMASTERRow
            Return CType(Me.NewRow,INVENTORYITEMMASTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New INVENTORYITEMMASTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INVENTORYITEMMASTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INVENTORYITEMMASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent INVENTORYITEMMASTERRowChanged(Me, New INVENTORYITEMMASTERRowChangeEvent(CType(e.Row,INVENTORYITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INVENTORYITEMMASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent INVENTORYITEMMASTERRowChanging(Me, New INVENTORYITEMMASTERRowChangeEvent(CType(e.Row,INVENTORYITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INVENTORYITEMMASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent INVENTORYITEMMASTERRowDeleted(Me, New INVENTORYITEMMASTERRowChangeEvent(CType(e.Row,INVENTORYITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INVENTORYITEMMASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent INVENTORYITEMMASTERRowDeleting(Me, New INVENTORYITEMMASTERRowChangeEvent(CType(e.Row,INVENTORYITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveINVENTORYITEMMASTERRow(ByVal row As INVENTORYITEMMASTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVENTORYITEMMASTERRow
        Inherits DataRow
        
        Private tableINVENTORYITEMMASTER As INVENTORYITEMMASTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableINVENTORYITEMMASTER = CType(Me.Table,INVENTORYITEMMASTERDataTable)
        End Sub
        
        Public Property itemcode As String
            Get
                Return CType(Me(Me.tableINVENTORYITEMMASTER.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property itemname As String
            Get
                Return CType(Me(Me.tableINVENTORYITEMMASTER.itemnameColumn),String)
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.itemnameColumn) = value
            End Set
        End Property
        
        Public Property _alias As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER._aliasColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER._aliasColumn) = value
            End Set
        End Property
        
        Public Property groupcode As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.groupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.groupcodeColumn) = value
            End Set
        End Property
        
        Public Property groupname As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.groupnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.groupnameColumn) = value
            End Set
        End Property
        
        Public Property subgroupcode As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.subgroupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.subgroupcodeColumn) = value
            End Set
        End Property
        
        Public Property subgroupname As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.subgroupnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.subgroupnameColumn) = value
            End Set
        End Property
        
        Public Property subsubgroupcode As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.subsubgroupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.subsubgroupcodeColumn) = value
            End Set
        End Property
        
        Public Property subsubgroupname As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.subsubgroupnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.subsubgroupnameColumn) = value
            End Set
        End Property
        
        Public Property reorderlevel As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.reorderlevelColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.reorderlevelColumn) = value
            End Set
        End Property
        
        Public Property minqty As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.minqtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.minqtyColumn) = value
            End Set
        End Property
        
        Public Property maxqty As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.maxqtyColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.maxqtyColumn) = value
            End Set
        End Property
        
        Public Property valuation As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.valuationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.valuationColumn) = value
            End Set
        End Property
        
        Public Property purchaserate As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.purchaserateColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.purchaserateColumn) = value
            End Set
        End Property
        
        Public Property salerate As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.salerateColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.salerateColumn) = value
            End Set
        End Property
        
        Public Property stockuom As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.stockuomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.stockuomColumn) = value
            End Set
        End Property
        
        Public Property receiveuom As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.receiveuomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.receiveuomColumn) = value
            End Set
        End Property
        
        Public Property saleuom As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.saleuomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.saleuomColumn) = value
            End Set
        End Property
        
        Public Property leadtime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.leadtimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.leadtimeColumn) = value
            End Set
        End Property
        
        Public Property doubleuom As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.doubleuomColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.doubleuomColumn) = value
            End Set
        End Property
        
        Public Property opstock As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.opstockColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.opstockColumn) = value
            End Set
        End Property
        
        Public Property opvalue As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.opvalueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.opvalueColumn) = value
            End Set
        End Property
        
        Public Property convvalue As Double
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.convvalueColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.convvalueColumn) = value
            End Set
        End Property
        
        Public Property Freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.FreezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.FreezeColumn) = value
            End Set
        End Property
        
        Public Property TypeCode As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.TypeCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.TypeCodeColumn) = value
            End Set
        End Property
        
        Public Property Adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.AdduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.AdduserColumn) = value
            End Set
        End Property
        
        Public Property Adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.AdddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.AdddateColumn) = value
            End Set
        End Property
        
        Public Property STORECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.STORECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.STORECODEColumn) = value
            End Set
        End Property
        
        Public Property closingqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.closingqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.closingqtyColumn) = value
            End Set
        End Property
        
        Public Property closingval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.closingvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.closingvalColumn) = value
            End Set
        End Property
        
        Public Property rcptqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.rcptqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.rcptqtyColumn) = value
            End Set
        End Property
        
        Public Property rcptval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.rcptvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.rcptvalColumn) = value
            End Set
        End Property
        
        Public Property issueqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.issueqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.issueqtyColumn) = value
            End Set
        End Property
        
        Public Property issueval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.issuevalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.issuevalColumn) = value
            End Set
        End Property
        
        Public Property abc As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.abcColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.abcColumn) = value
            End Set
        End Property
        
        Public Property fsm As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.fsmColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.fsmColumn) = value
            End Set
        End Property
        
        Public Property prefix As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.prefixColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.prefixColumn) = value
            End Set
        End Property
        
        Public Property wefdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.wefdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.wefdateColumn) = value
            End Set
        End Property
        
        Public Property stkoption As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.stkoptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.stkoptionColumn) = value
            End Set
        End Property
        
        Public Property binlocation As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.binlocationColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.binlocationColumn) = value
            End Set
        End Property
        
        Public Property category As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.categoryColumn) = value
            End Set
        End Property
        
        Public Property selectopt As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.selectoptColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.selectoptColumn) = value
            End Set
        End Property
        
        Public Property STARTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.STARTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.STARTDATEColumn) = value
            End Set
        End Property
        
        Public Property PEGS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.PEGSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.PEGSColumn) = value
            End Set
        End Property
        
        Public Property ml As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.mlColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.mlColumn) = value
            End Set
        End Property
        
        Public Property PEGSRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.PEGSRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.PEGSRATEColumn) = value
            End Set
        End Property
        
        Public Property OPT As String
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.OPTColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.OPTColumn) = value
            End Set
        End Property
        
        Public Property aprdrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.aprdrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.aprdrqtyColumn) = value
            End Set
        End Property
        
        Public Property aprdrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.aprdrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.aprdrvalColumn) = value
            End Set
        End Property
        
        Public Property aprcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.aprcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.aprcrqtyColumn) = value
            End Set
        End Property
        
        Public Property aprcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.aprcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.aprcrvalColumn) = value
            End Set
        End Property
        
        Public Property maydrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.maydrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.maydrqtyColumn) = value
            End Set
        End Property
        
        Public Property maydrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.maydrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.maydrvalColumn) = value
            End Set
        End Property
        
        Public Property maycrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.maycrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.maycrqtyColumn) = value
            End Set
        End Property
        
        Public Property maycrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.maycrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.maycrvalColumn) = value
            End Set
        End Property
        
        Public Property jundrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.jundrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.jundrqtyColumn) = value
            End Set
        End Property
        
        Public Property jundrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.jundrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.jundrvalColumn) = value
            End Set
        End Property
        
        Public Property juncrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.juncrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.juncrqtyColumn) = value
            End Set
        End Property
        
        Public Property juncrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.juncrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.juncrvalColumn) = value
            End Set
        End Property
        
        Public Property juldrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.juldrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.juldrqtyColumn) = value
            End Set
        End Property
        
        Public Property juldrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.juldrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.juldrvalColumn) = value
            End Set
        End Property
        
        Public Property julcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.julcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.julcrqtyColumn) = value
            End Set
        End Property
        
        Public Property julcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.julcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.julcrvalColumn) = value
            End Set
        End Property
        
        Public Property augdrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.augdrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.augdrqtyColumn) = value
            End Set
        End Property
        
        Public Property augdrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.augdrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.augdrvalColumn) = value
            End Set
        End Property
        
        Public Property augcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.augcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.augcrqtyColumn) = value
            End Set
        End Property
        
        Public Property augcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.augcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.augcrvalColumn) = value
            End Set
        End Property
        
        Public Property sepdrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.sepdrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.sepdrqtyColumn) = value
            End Set
        End Property
        
        Public Property sepdrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.sepdrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.sepdrvalColumn) = value
            End Set
        End Property
        
        Public Property sepcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.sepcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.sepcrqtyColumn) = value
            End Set
        End Property
        
        Public Property sepcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.sepcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.sepcrvalColumn) = value
            End Set
        End Property
        
        Public Property octdrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.octdrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.octdrqtyColumn) = value
            End Set
        End Property
        
        Public Property octdrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.octdrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.octdrvalColumn) = value
            End Set
        End Property
        
        Public Property octcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.octcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.octcrqtyColumn) = value
            End Set
        End Property
        
        Public Property octcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.octcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.octcrvalColumn) = value
            End Set
        End Property
        
        Public Property novcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.novcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.novcrqtyColumn) = value
            End Set
        End Property
        
        Public Property novcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.novcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.novcrvalColumn) = value
            End Set
        End Property
        
        Public Property novdrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.novdrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.novdrqtyColumn) = value
            End Set
        End Property
        
        Public Property novdrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.novdrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.novdrvalColumn) = value
            End Set
        End Property
        
        Public Property decdrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.decdrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.decdrqtyColumn) = value
            End Set
        End Property
        
        Public Property decdrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.decdrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.decdrvalColumn) = value
            End Set
        End Property
        
        Public Property deccrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.deccrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.deccrqtyColumn) = value
            End Set
        End Property
        
        Public Property deccrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.deccrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.deccrvalColumn) = value
            End Set
        End Property
        
        Public Property jandrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.jandrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.jandrqtyColumn) = value
            End Set
        End Property
        
        Public Property jandrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.jandrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.jandrvalColumn) = value
            End Set
        End Property
        
        Public Property jancrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.jancrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.jancrqtyColumn) = value
            End Set
        End Property
        
        Public Property jancrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.jancrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.jancrvalColumn) = value
            End Set
        End Property
        
        Public Property febdrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.febdrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.febdrqtyColumn) = value
            End Set
        End Property
        
        Public Property febdrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.febdrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.febdrvalColumn) = value
            End Set
        End Property
        
        Public Property febcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.febcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.febcrqtyColumn) = value
            End Set
        End Property
        
        Public Property febcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.febcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.febcrvalColumn) = value
            End Set
        End Property
        
        Public Property mardrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.mardrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.mardrqtyColumn) = value
            End Set
        End Property
        
        Public Property mardrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.mardrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.mardrvalColumn) = value
            End Set
        End Property
        
        Public Property marcrqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.marcrqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.marcrqtyColumn) = value
            End Set
        End Property
        
        Public Property marcrval As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.marcrvalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.marcrvalColumn) = value
            End Set
        End Property
        
        Public Property clstock As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.clstockColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.clstockColumn) = value
            End Set
        End Property
        
        Public Property clvalue As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINVENTORYITEMMASTER.clvalueColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINVENTORYITEMMASTER.clvalueColumn) = value
            End Set
        End Property
        
        Public Function Is_aliasNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER._aliasColumn)
        End Function
        
        Public Sub Set_aliasNull()
            Me(Me.tableINVENTORYITEMMASTER._aliasColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.groupcodeColumn)
        End Function
        
        Public Sub SetgroupcodeNull()
            Me(Me.tableINVENTORYITEMMASTER.groupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupnameNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.groupnameColumn)
        End Function
        
        Public Sub SetgroupnameNull()
            Me(Me.tableINVENTORYITEMMASTER.groupnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.subgroupcodeColumn)
        End Function
        
        Public Sub SetsubgroupcodeNull()
            Me(Me.tableINVENTORYITEMMASTER.subgroupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubgroupnameNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.subgroupnameColumn)
        End Function
        
        Public Sub SetsubgroupnameNull()
            Me(Me.tableINVENTORYITEMMASTER.subgroupnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubsubgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.subsubgroupcodeColumn)
        End Function
        
        Public Sub SetsubsubgroupcodeNull()
            Me(Me.tableINVENTORYITEMMASTER.subsubgroupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssubsubgroupnameNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.subsubgroupnameColumn)
        End Function
        
        Public Sub SetsubsubgroupnameNull()
            Me(Me.tableINVENTORYITEMMASTER.subsubgroupnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreorderlevelNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.reorderlevelColumn)
        End Function
        
        Public Sub SetreorderlevelNull()
            Me(Me.tableINVENTORYITEMMASTER.reorderlevelColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsminqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.minqtyColumn)
        End Function
        
        Public Sub SetminqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.minqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.maxqtyColumn)
        End Function
        
        Public Sub SetmaxqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.maxqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvaluationNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.valuationColumn)
        End Function
        
        Public Sub SetvaluationNull()
            Me(Me.tableINVENTORYITEMMASTER.valuationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspurchaserateNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.purchaserateColumn)
        End Function
        
        Public Sub SetpurchaserateNull()
            Me(Me.tableINVENTORYITEMMASTER.purchaserateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssalerateNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.salerateColumn)
        End Function
        
        Public Sub SetsalerateNull()
            Me(Me.tableINVENTORYITEMMASTER.salerateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstockuomNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.stockuomColumn)
        End Function
        
        Public Sub SetstockuomNull()
            Me(Me.tableINVENTORYITEMMASTER.stockuomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreceiveuomNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.receiveuomColumn)
        End Function
        
        Public Sub SetreceiveuomNull()
            Me(Me.tableINVENTORYITEMMASTER.receiveuomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssaleuomNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.saleuomColumn)
        End Function
        
        Public Sub SetsaleuomNull()
            Me(Me.tableINVENTORYITEMMASTER.saleuomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsleadtimeNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.leadtimeColumn)
        End Function
        
        Public Sub SetleadtimeNull()
            Me(Me.tableINVENTORYITEMMASTER.leadtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdoubleuomNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.doubleuomColumn)
        End Function
        
        Public Sub SetdoubleuomNull()
            Me(Me.tableINVENTORYITEMMASTER.doubleuomColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsopstockNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.opstockColumn)
        End Function
        
        Public Sub SetopstockNull()
            Me(Me.tableINVENTORYITEMMASTER.opstockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsopvalueNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.opvalueColumn)
        End Function
        
        Public Sub SetopvalueNull()
            Me(Me.tableINVENTORYITEMMASTER.opvalueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsconvvalueNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.convvalueColumn)
        End Function
        
        Public Sub SetconvvalueNull()
            Me(Me.tableINVENTORYITEMMASTER.convvalueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFreezeNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.FreezeColumn)
        End Function
        
        Public Sub SetFreezeNull()
            Me(Me.tableINVENTORYITEMMASTER.FreezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTypeCodeNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.TypeCodeColumn)
        End Function
        
        Public Sub SetTypeCodeNull()
            Me(Me.tableINVENTORYITEMMASTER.TypeCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdduserNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.AdduserColumn)
        End Function
        
        Public Sub SetAdduserNull()
            Me(Me.tableINVENTORYITEMMASTER.AdduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdddateNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.AdddateColumn)
        End Function
        
        Public Sub SetAdddateNull()
            Me(Me.tableINVENTORYITEMMASTER.AdddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTORECODENull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.STORECODEColumn)
        End Function
        
        Public Sub SetSTORECODENull()
            Me(Me.tableINVENTORYITEMMASTER.STORECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclosingqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.closingqtyColumn)
        End Function
        
        Public Sub SetclosingqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.closingqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclosingvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.closingvalColumn)
        End Function
        
        Public Sub SetclosingvalNull()
            Me(Me.tableINVENTORYITEMMASTER.closingvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrcptqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.rcptqtyColumn)
        End Function
        
        Public Sub SetrcptqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.rcptqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrcptvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.rcptvalColumn)
        End Function
        
        Public Sub SetrcptvalNull()
            Me(Me.tableINVENTORYITEMMASTER.rcptvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsissueqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.issueqtyColumn)
        End Function
        
        Public Sub SetissueqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.issueqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsissuevalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.issuevalColumn)
        End Function
        
        Public Sub SetissuevalNull()
            Me(Me.tableINVENTORYITEMMASTER.issuevalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsabcNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.abcColumn)
        End Function
        
        Public Sub SetabcNull()
            Me(Me.tableINVENTORYITEMMASTER.abcColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfsmNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.fsmColumn)
        End Function
        
        Public Sub SetfsmNull()
            Me(Me.tableINVENTORYITEMMASTER.fsmColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsprefixNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.prefixColumn)
        End Function
        
        Public Sub SetprefixNull()
            Me(Me.tableINVENTORYITEMMASTER.prefixColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IswefdateNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.wefdateColumn)
        End Function
        
        Public Sub SetwefdateNull()
            Me(Me.tableINVENTORYITEMMASTER.wefdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsstkoptionNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.stkoptionColumn)
        End Function
        
        Public Sub SetstkoptionNull()
            Me(Me.tableINVENTORYITEMMASTER.stkoptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbinlocationNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.binlocationColumn)
        End Function
        
        Public Sub SetbinlocationNull()
            Me(Me.tableINVENTORYITEMMASTER.binlocationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscategoryNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.categoryColumn)
        End Function
        
        Public Sub SetcategoryNull()
            Me(Me.tableINVENTORYITEMMASTER.categoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsselectoptNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.selectoptColumn)
        End Function
        
        Public Sub SetselectoptNull()
            Me(Me.tableINVENTORYITEMMASTER.selectoptColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTARTDATENull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.STARTDATEColumn)
        End Function
        
        Public Sub SetSTARTDATENull()
            Me(Me.tableINVENTORYITEMMASTER.STARTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPEGSNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.PEGSColumn)
        End Function
        
        Public Sub SetPEGSNull()
            Me(Me.tableINVENTORYITEMMASTER.PEGSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmlNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.mlColumn)
        End Function
        
        Public Sub SetmlNull()
            Me(Me.tableINVENTORYITEMMASTER.mlColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPEGSRATENull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.PEGSRATEColumn)
        End Function
        
        Public Sub SetPEGSRATENull()
            Me(Me.tableINVENTORYITEMMASTER.PEGSRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPTNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.OPTColumn)
        End Function
        
        Public Sub SetOPTNull()
            Me(Me.tableINVENTORYITEMMASTER.OPTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaprdrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.aprdrqtyColumn)
        End Function
        
        Public Sub SetaprdrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.aprdrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaprdrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.aprdrvalColumn)
        End Function
        
        Public Sub SetaprdrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.aprdrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaprcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.aprcrqtyColumn)
        End Function
        
        Public Sub SetaprcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.aprcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaprcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.aprcrvalColumn)
        End Function
        
        Public Sub SetaprcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.aprcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaydrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.maydrqtyColumn)
        End Function
        
        Public Sub SetmaydrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.maydrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaydrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.maydrvalColumn)
        End Function
        
        Public Sub SetmaydrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.maydrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaycrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.maycrqtyColumn)
        End Function
        
        Public Sub SetmaycrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.maycrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaycrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.maycrvalColumn)
        End Function
        
        Public Sub SetmaycrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.maycrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjundrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.jundrqtyColumn)
        End Function
        
        Public Sub SetjundrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.jundrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjundrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.jundrvalColumn)
        End Function
        
        Public Sub SetjundrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.jundrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjuncrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.juncrqtyColumn)
        End Function
        
        Public Sub SetjuncrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.juncrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjuncrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.juncrvalColumn)
        End Function
        
        Public Sub SetjuncrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.juncrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjuldrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.juldrqtyColumn)
        End Function
        
        Public Sub SetjuldrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.juldrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjuldrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.juldrvalColumn)
        End Function
        
        Public Sub SetjuldrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.juldrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjulcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.julcrqtyColumn)
        End Function
        
        Public Sub SetjulcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.julcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjulcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.julcrvalColumn)
        End Function
        
        Public Sub SetjulcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.julcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaugdrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.augdrqtyColumn)
        End Function
        
        Public Sub SetaugdrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.augdrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaugdrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.augdrvalColumn)
        End Function
        
        Public Sub SetaugdrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.augdrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaugcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.augcrqtyColumn)
        End Function
        
        Public Sub SetaugcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.augcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsaugcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.augcrvalColumn)
        End Function
        
        Public Sub SetaugcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.augcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssepdrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.sepdrqtyColumn)
        End Function
        
        Public Sub SetsepdrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.sepdrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssepdrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.sepdrvalColumn)
        End Function
        
        Public Sub SetsepdrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.sepdrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssepcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.sepcrqtyColumn)
        End Function
        
        Public Sub SetsepcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.sepcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssepcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.sepcrvalColumn)
        End Function
        
        Public Sub SetsepcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.sepcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoctdrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.octdrqtyColumn)
        End Function
        
        Public Sub SetoctdrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.octdrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoctdrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.octdrvalColumn)
        End Function
        
        Public Sub SetoctdrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.octdrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoctcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.octcrqtyColumn)
        End Function
        
        Public Sub SetoctcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.octcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoctcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.octcrvalColumn)
        End Function
        
        Public Sub SetoctcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.octcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnovcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.novcrqtyColumn)
        End Function
        
        Public Sub SetnovcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.novcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnovcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.novcrvalColumn)
        End Function
        
        Public Sub SetnovcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.novcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnovdrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.novdrqtyColumn)
        End Function
        
        Public Sub SetnovdrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.novdrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnovdrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.novdrvalColumn)
        End Function
        
        Public Sub SetnovdrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.novdrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdecdrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.decdrqtyColumn)
        End Function
        
        Public Sub SetdecdrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.decdrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdecdrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.decdrvalColumn)
        End Function
        
        Public Sub SetdecdrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.decdrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdeccrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.deccrqtyColumn)
        End Function
        
        Public Sub SetdeccrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.deccrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdeccrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.deccrvalColumn)
        End Function
        
        Public Sub SetdeccrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.deccrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjandrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.jandrqtyColumn)
        End Function
        
        Public Sub SetjandrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.jandrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjandrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.jandrvalColumn)
        End Function
        
        Public Sub SetjandrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.jandrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjancrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.jancrqtyColumn)
        End Function
        
        Public Sub SetjancrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.jancrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsjancrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.jancrvalColumn)
        End Function
        
        Public Sub SetjancrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.jancrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfebdrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.febdrqtyColumn)
        End Function
        
        Public Sub SetfebdrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.febdrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfebdrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.febdrvalColumn)
        End Function
        
        Public Sub SetfebdrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.febdrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfebcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.febcrqtyColumn)
        End Function
        
        Public Sub SetfebcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.febcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfebcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.febcrvalColumn)
        End Function
        
        Public Sub SetfebcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.febcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmardrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.mardrqtyColumn)
        End Function
        
        Public Sub SetmardrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.mardrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmardrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.mardrvalColumn)
        End Function
        
        Public Sub SetmardrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.mardrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmarcrqtyNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.marcrqtyColumn)
        End Function
        
        Public Sub SetmarcrqtyNull()
            Me(Me.tableINVENTORYITEMMASTER.marcrqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmarcrvalNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.marcrvalColumn)
        End Function
        
        Public Sub SetmarcrvalNull()
            Me(Me.tableINVENTORYITEMMASTER.marcrvalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclstockNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.clstockColumn)
        End Function
        
        Public Sub SetclstockNull()
            Me(Me.tableINVENTORYITEMMASTER.clstockColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsclvalueNull() As Boolean
            Return Me.IsNull(Me.tableINVENTORYITEMMASTER.clvalueColumn)
        End Function
        
        Public Sub SetclvalueNull()
            Me(Me.tableINVENTORYITEMMASTER.clvalueColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INVENTORYITEMMASTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As INVENTORYITEMMASTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As INVENTORYITEMMASTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As INVENTORYITEMMASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PO_VIEW_VENDORMASTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnvendorcode As DataColumn
        
        Private columnvendorname As DataColumn
        
        Private columnaddress As DataColumn
        
        Private columncity As DataColumn
        
        Private columnstate As DataColumn
        
        Friend Sub New()
            MyBase.New("PO_VIEW_VENDORMASTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property vendorcodeColumn As DataColumn
            Get
                Return Me.columnvendorcode
            End Get
        End Property
        
        Friend ReadOnly Property vendornameColumn As DataColumn
            Get
                Return Me.columnvendorname
            End Get
        End Property
        
        Friend ReadOnly Property addressColumn As DataColumn
            Get
                Return Me.columnaddress
            End Get
        End Property
        
        Friend ReadOnly Property cityColumn As DataColumn
            Get
                Return Me.columncity
            End Get
        End Property
        
        Friend ReadOnly Property stateColumn As DataColumn
            Get
                Return Me.columnstate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PO_VIEW_VENDORMASTERRow
            Get
                Return CType(Me.Rows(index),PO_VIEW_VENDORMASTERRow)
            End Get
        End Property
        
        Public Event PO_VIEW_VENDORMASTERRowChanged As PO_VIEW_VENDORMASTERRowChangeEventHandler
        
        Public Event PO_VIEW_VENDORMASTERRowChanging As PO_VIEW_VENDORMASTERRowChangeEventHandler
        
        Public Event PO_VIEW_VENDORMASTERRowDeleted As PO_VIEW_VENDORMASTERRowChangeEventHandler
        
        Public Event PO_VIEW_VENDORMASTERRowDeleting As PO_VIEW_VENDORMASTERRowChangeEventHandler
        
        Public Overloads Sub AddPO_VIEW_VENDORMASTERRow(ByVal row As PO_VIEW_VENDORMASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPO_VIEW_VENDORMASTERRow(ByVal vendorcode As String, ByVal vendorname As String, ByVal address As String, ByVal city As String, ByVal state As String) As PO_VIEW_VENDORMASTERRow
            Dim rowPO_VIEW_VENDORMASTERRow As PO_VIEW_VENDORMASTERRow = CType(Me.NewRow,PO_VIEW_VENDORMASTERRow)
            rowPO_VIEW_VENDORMASTERRow.ItemArray = New Object() {vendorcode, vendorname, address, city, state}
            Me.Rows.Add(rowPO_VIEW_VENDORMASTERRow)
            Return rowPO_VIEW_VENDORMASTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PO_VIEW_VENDORMASTERDataTable = CType(MyBase.Clone,PO_VIEW_VENDORMASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PO_VIEW_VENDORMASTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnvendorcode = Me.Columns("vendorcode")
            Me.columnvendorname = Me.Columns("vendorname")
            Me.columnaddress = Me.Columns("address")
            Me.columncity = Me.Columns("city")
            Me.columnstate = Me.Columns("state")
        End Sub
        
        Private Sub InitClass()
            Me.columnvendorcode = New DataColumn("vendorcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendorcode)
            Me.columnvendorname = New DataColumn("vendorname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvendorname)
            Me.columnaddress = New DataColumn("address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnaddress)
            Me.columncity = New DataColumn("city", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncity)
            Me.columnstate = New DataColumn("state", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnstate)
            Me.columnvendorcode.AllowDBNull = false
            Me.columnvendorname.AllowDBNull = false
            Me.columnaddress.AllowDBNull = false
            Me.columncity.AllowDBNull = false
            Me.columnstate.AllowDBNull = false
        End Sub
        
        Public Function NewPO_VIEW_VENDORMASTERRow() As PO_VIEW_VENDORMASTERRow
            Return CType(Me.NewRow,PO_VIEW_VENDORMASTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PO_VIEW_VENDORMASTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PO_VIEW_VENDORMASTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PO_VIEW_VENDORMASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_VENDORMASTERRowChanged(Me, New PO_VIEW_VENDORMASTERRowChangeEvent(CType(e.Row,PO_VIEW_VENDORMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PO_VIEW_VENDORMASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_VENDORMASTERRowChanging(Me, New PO_VIEW_VENDORMASTERRowChangeEvent(CType(e.Row,PO_VIEW_VENDORMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PO_VIEW_VENDORMASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_VENDORMASTERRowDeleted(Me, New PO_VIEW_VENDORMASTERRowChangeEvent(CType(e.Row,PO_VIEW_VENDORMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PO_VIEW_VENDORMASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent PO_VIEW_VENDORMASTERRowDeleting(Me, New PO_VIEW_VENDORMASTERRowChangeEvent(CType(e.Row,PO_VIEW_VENDORMASTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePO_VIEW_VENDORMASTERRow(ByVal row As PO_VIEW_VENDORMASTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PO_VIEW_VENDORMASTERRow
        Inherits DataRow
        
        Private tablePO_VIEW_VENDORMASTER As PO_VIEW_VENDORMASTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePO_VIEW_VENDORMASTER = CType(Me.Table,PO_VIEW_VENDORMASTERDataTable)
        End Sub
        
        Public Property vendorcode As String
            Get
                Return CType(Me(Me.tablePO_VIEW_VENDORMASTER.vendorcodeColumn),String)
            End Get
            Set
                Me(Me.tablePO_VIEW_VENDORMASTER.vendorcodeColumn) = value
            End Set
        End Property
        
        Public Property vendorname As String
            Get
                Return CType(Me(Me.tablePO_VIEW_VENDORMASTER.vendornameColumn),String)
            End Get
            Set
                Me(Me.tablePO_VIEW_VENDORMASTER.vendornameColumn) = value
            End Set
        End Property
        
        Public Property address As String
            Get
                Return CType(Me(Me.tablePO_VIEW_VENDORMASTER.addressColumn),String)
            End Get
            Set
                Me(Me.tablePO_VIEW_VENDORMASTER.addressColumn) = value
            End Set
        End Property
        
        Public Property city As String
            Get
                Return CType(Me(Me.tablePO_VIEW_VENDORMASTER.cityColumn),String)
            End Get
            Set
                Me(Me.tablePO_VIEW_VENDORMASTER.cityColumn) = value
            End Set
        End Property
        
        Public Property state As String
            Get
                Return CType(Me(Me.tablePO_VIEW_VENDORMASTER.stateColumn),String)
            End Get
            Set
                Me(Me.tablePO_VIEW_VENDORMASTER.stateColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PO_VIEW_VENDORMASTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PO_VIEW_VENDORMASTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PO_VIEW_VENDORMASTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PO_VIEW_VENDORMASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INV_PENDING_PURCHASEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpono As DataColumn
        
        Private columnpodate As DataColumn
        
        Private columnpodepartment As DataColumn
        
        Private columnpovendorcode As DataColumn
        
        Private columnitemcode As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnquantity As DataColumn
        
        Private columnrate As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnvatamt As DataColumn
        
        Private columndiscamt As DataColumn
        
        Private columnVENDORNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("INV_PENDING_PURCHASE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ponoColumn As DataColumn
            Get
                Return Me.columnpono
            End Get
        End Property
        
        Friend ReadOnly Property podateColumn As DataColumn
            Get
                Return Me.columnpodate
            End Get
        End Property
        
        Friend ReadOnly Property podepartmentColumn As DataColumn
            Get
                Return Me.columnpodepartment
            End Get
        End Property
        
        Friend ReadOnly Property povendorcodeColumn As DataColumn
            Get
                Return Me.columnpovendorcode
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property quantityColumn As DataColumn
            Get
                Return Me.columnquantity
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property vatamtColumn As DataColumn
            Get
                Return Me.columnvatamt
            End Get
        End Property
        
        Friend ReadOnly Property discamtColumn As DataColumn
            Get
                Return Me.columndiscamt
            End Get
        End Property
        
        Friend ReadOnly Property VENDORNAMEColumn As DataColumn
            Get
                Return Me.columnVENDORNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As INV_PENDING_PURCHASERow
            Get
                Return CType(Me.Rows(index),INV_PENDING_PURCHASERow)
            End Get
        End Property
        
        Public Event INV_PENDING_PURCHASERowChanged As INV_PENDING_PURCHASERowChangeEventHandler
        
        Public Event INV_PENDING_PURCHASERowChanging As INV_PENDING_PURCHASERowChangeEventHandler
        
        Public Event INV_PENDING_PURCHASERowDeleted As INV_PENDING_PURCHASERowChangeEventHandler
        
        Public Event INV_PENDING_PURCHASERowDeleting As INV_PENDING_PURCHASERowChangeEventHandler
        
        Public Overloads Sub AddINV_PENDING_PURCHASERow(ByVal row As INV_PENDING_PURCHASERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddINV_PENDING_PURCHASERow(ByVal pono As String, ByVal podate As Date, ByVal podepartment As String, ByVal povendorcode As String, ByVal itemcode As String, ByVal ITEMNAME As String, ByVal quantity As Decimal, ByVal rate As Decimal, ByVal amount As Decimal, ByVal vatamt As Decimal, ByVal discamt As Decimal, ByVal VENDORNAME As String) As INV_PENDING_PURCHASERow
            Dim rowINV_PENDING_PURCHASERow As INV_PENDING_PURCHASERow = CType(Me.NewRow,INV_PENDING_PURCHASERow)
            rowINV_PENDING_PURCHASERow.ItemArray = New Object() {pono, podate, podepartment, povendorcode, itemcode, ITEMNAME, quantity, rate, amount, vatamt, discamt, VENDORNAME}
            Me.Rows.Add(rowINV_PENDING_PURCHASERow)
            Return rowINV_PENDING_PURCHASERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As INV_PENDING_PURCHASEDataTable = CType(MyBase.Clone,INV_PENDING_PURCHASEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New INV_PENDING_PURCHASEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpono = Me.Columns("pono")
            Me.columnpodate = Me.Columns("podate")
            Me.columnpodepartment = Me.Columns("podepartment")
            Me.columnpovendorcode = Me.Columns("povendorcode")
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnquantity = Me.Columns("quantity")
            Me.columnrate = Me.Columns("rate")
            Me.columnamount = Me.Columns("amount")
            Me.columnvatamt = Me.Columns("vatamt")
            Me.columndiscamt = Me.Columns("discamt")
            Me.columnVENDORNAME = Me.Columns("VENDORNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnpono = New DataColumn("pono", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpono)
            Me.columnpodate = New DataColumn("podate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpodate)
            Me.columnpodepartment = New DataColumn("podepartment", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpodepartment)
            Me.columnpovendorcode = New DataColumn("povendorcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpovendorcode)
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnquantity = New DataColumn("quantity", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnquantity)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnvatamt = New DataColumn("vatamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvatamt)
            Me.columndiscamt = New DataColumn("discamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscamt)
            Me.columnVENDORNAME = New DataColumn("VENDORNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVENDORNAME)
            Me.columnITEMNAME.AllowDBNull = false
            Me.columnVENDORNAME.AllowDBNull = false
        End Sub
        
        Public Function NewINV_PENDING_PURCHASERow() As INV_PENDING_PURCHASERow
            Return CType(Me.NewRow,INV_PENDING_PURCHASERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New INV_PENDING_PURCHASERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INV_PENDING_PURCHASERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INV_PENDING_PURCHASERowChangedEvent) Is Nothing) Then
                RaiseEvent INV_PENDING_PURCHASERowChanged(Me, New INV_PENDING_PURCHASERowChangeEvent(CType(e.Row,INV_PENDING_PURCHASERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INV_PENDING_PURCHASERowChangingEvent) Is Nothing) Then
                RaiseEvent INV_PENDING_PURCHASERowChanging(Me, New INV_PENDING_PURCHASERowChangeEvent(CType(e.Row,INV_PENDING_PURCHASERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INV_PENDING_PURCHASERowDeletedEvent) Is Nothing) Then
                RaiseEvent INV_PENDING_PURCHASERowDeleted(Me, New INV_PENDING_PURCHASERowChangeEvent(CType(e.Row,INV_PENDING_PURCHASERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INV_PENDING_PURCHASERowDeletingEvent) Is Nothing) Then
                RaiseEvent INV_PENDING_PURCHASERowDeleting(Me, New INV_PENDING_PURCHASERowChangeEvent(CType(e.Row,INV_PENDING_PURCHASERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveINV_PENDING_PURCHASERow(ByVal row As INV_PENDING_PURCHASERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INV_PENDING_PURCHASERow
        Inherits DataRow
        
        Private tableINV_PENDING_PURCHASE As INV_PENDING_PURCHASEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableINV_PENDING_PURCHASE = CType(Me.Table,INV_PENDING_PURCHASEDataTable)
        End Sub
        
        Public Property pono As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.ponoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.ponoColumn) = value
            End Set
        End Property
        
        Public Property podate As Date
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.podateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.podateColumn) = value
            End Set
        End Property
        
        Public Property podepartment As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.podepartmentColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.podepartmentColumn) = value
            End Set
        End Property
        
        Public Property povendorcode As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.povendorcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.povendorcodeColumn) = value
            End Set
        End Property
        
        Public Property itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.itemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Return CType(Me(Me.tableINV_PENDING_PURCHASE.ITEMNAMEColumn),String)
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property quantity As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.quantityColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.quantityColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.rateColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.amountColumn) = value
            End Set
        End Property
        
        Public Property vatamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.vatamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.vatamtColumn) = value
            End Set
        End Property
        
        Public Property discamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableINV_PENDING_PURCHASE.discamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.discamtColumn) = value
            End Set
        End Property
        
        Public Property VENDORNAME As String
            Get
                Return CType(Me(Me.tableINV_PENDING_PURCHASE.VENDORNAMEColumn),String)
            End Get
            Set
                Me(Me.tableINV_PENDING_PURCHASE.VENDORNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsponoNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.ponoColumn)
        End Function
        
        Public Sub SetponoNull()
            Me(Me.tableINV_PENDING_PURCHASE.ponoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspodateNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.podateColumn)
        End Function
        
        Public Sub SetpodateNull()
            Me(Me.tableINV_PENDING_PURCHASE.podateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspodepartmentNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.podepartmentColumn)
        End Function
        
        Public Sub SetpodepartmentNull()
            Me(Me.tableINV_PENDING_PURCHASE.podepartmentColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspovendorcodeNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.povendorcodeColumn)
        End Function
        
        Public Sub SetpovendorcodeNull()
            Me(Me.tableINV_PENDING_PURCHASE.povendorcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.itemcodeColumn)
        End Function
        
        Public Sub SetitemcodeNull()
            Me(Me.tableINV_PENDING_PURCHASE.itemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsquantityNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.quantityColumn)
        End Function
        
        Public Sub SetquantityNull()
            Me(Me.tableINV_PENDING_PURCHASE.quantityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tableINV_PENDING_PURCHASE.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableINV_PENDING_PURCHASE.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvatamtNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.vatamtColumn)
        End Function
        
        Public Sub SetvatamtNull()
            Me(Me.tableINV_PENDING_PURCHASE.vatamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscamtNull() As Boolean
            Return Me.IsNull(Me.tableINV_PENDING_PURCHASE.discamtColumn)
        End Function
        
        Public Sub SetdiscamtNull()
            Me(Me.tableINV_PENDING_PURCHASE.discamtColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class INV_PENDING_PURCHASERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As INV_PENDING_PURCHASERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As INV_PENDING_PURCHASERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As INV_PENDING_PURCHASERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERSUMMARYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGRNDETAILS As DataColumn
        
        Private columnGrndate As DataColumn
        
        Private columnPONO As DataColumn
        
        Private columnSupplierinvno As DataColumn
        
        Private columnSUPPLIERCODE As DataColumn
        
        Private columnSUPPLIERNAME As DataColumn
        
        Private columnGLACCOUNTCODE As DataColumn
        
        Private columnGLACCOUNTNAME As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnVATAMOUNT As DataColumn
        
        Private columnSURCHARGEAMT As DataColumn
        
        Private columnDISCOUNTAMOUNT As DataColumn
        
        Private columnBILLAMOUNT As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnAdddate As DataColumn
        
        Private columnAVOUCHERNO As DataColumn
        
        Private columnAVOUCHERDATE As DataColumn
        
        Private columnADJUSTEDAMOUNT As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnOTHCHARGE As DataColumn
        
        Private columnSTORECODE As DataColumn
        
        Private columnSTOREDESC As DataColumn
        
        Private columnOverallDiscount As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEWPURCHASEREGISTERSUMMARY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GRNDETAILSColumn As DataColumn
            Get
                Return Me.columnGRNDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property GrndateColumn As DataColumn
            Get
                Return Me.columnGrndate
            End Get
        End Property
        
        Friend ReadOnly Property PONOColumn As DataColumn
            Get
                Return Me.columnPONO
            End Get
        End Property
        
        Friend ReadOnly Property SupplierinvnoColumn As DataColumn
            Get
                Return Me.columnSupplierinvno
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIERCODEColumn As DataColumn
            Get
                Return Me.columnSUPPLIERCODE
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIERNAMEColumn As DataColumn
            Get
                Return Me.columnSUPPLIERNAME
            End Get
        End Property
        
        Friend ReadOnly Property GLACCOUNTCODEColumn As DataColumn
            Get
                Return Me.columnGLACCOUNTCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCOUNTNAMEColumn As DataColumn
            Get
                Return Me.columnGLACCOUNTNAME
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property VATAMOUNTColumn As DataColumn
            Get
                Return Me.columnVATAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SURCHARGEAMTColumn As DataColumn
            Get
                Return Me.columnSURCHARGEAMT
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTAMOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BILLAMOUNTColumn As DataColumn
            Get
                Return Me.columnBILLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AdddateColumn As DataColumn
            Get
                Return Me.columnAdddate
            End Get
        End Property
        
        Friend ReadOnly Property AVOUCHERNOColumn As DataColumn
            Get
                Return Me.columnAVOUCHERNO
            End Get
        End Property
        
        Friend ReadOnly Property AVOUCHERDATEColumn As DataColumn
            Get
                Return Me.columnAVOUCHERDATE
            End Get
        End Property
        
        Friend ReadOnly Property ADJUSTEDAMOUNTColumn As DataColumn
            Get
                Return Me.columnADJUSTEDAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property OTHCHARGEColumn As DataColumn
            Get
                Return Me.columnOTHCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property STORECODEColumn As DataColumn
            Get
                Return Me.columnSTORECODE
            End Get
        End Property
        
        Friend ReadOnly Property STOREDESCColumn As DataColumn
            Get
                Return Me.columnSTOREDESC
            End Get
        End Property
        
        Friend ReadOnly Property OverallDiscountColumn As DataColumn
            Get
                Return Me.columnOverallDiscount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEWPURCHASEREGISTERSUMMARYRow
            Get
                Return CType(Me.Rows(index),VIEWPURCHASEREGISTERSUMMARYRow)
            End Get
        End Property
        
        Public Event VIEWPURCHASEREGISTERSUMMARYRowChanged As VIEWPURCHASEREGISTERSUMMARYRowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERSUMMARYRowChanging As VIEWPURCHASEREGISTERSUMMARYRowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERSUMMARYRowDeleted As VIEWPURCHASEREGISTERSUMMARYRowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERSUMMARYRowDeleting As VIEWPURCHASEREGISTERSUMMARYRowChangeEventHandler
        
        Public Overloads Sub AddVIEWPURCHASEREGISTERSUMMARYRow(ByVal row As VIEWPURCHASEREGISTERSUMMARYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEWPURCHASEREGISTERSUMMARYRow( _
                    ByVal GRNDETAILS As String,  _
                    ByVal Grndate As Date,  _
                    ByVal PONO As String,  _
                    ByVal Supplierinvno As String,  _
                    ByVal SUPPLIERCODE As String,  _
                    ByVal SUPPLIERNAME As String,  _
                    ByVal GLACCOUNTCODE As String,  _
                    ByVal GLACCOUNTNAME As String,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal VATAMOUNT As Decimal,  _
                    ByVal SURCHARGEAMT As Decimal,  _
                    ByVal DISCOUNTAMOUNT As Decimal,  _
                    ByVal BILLAMOUNT As Decimal,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMNAME As String,  _
                    ByVal UOM As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal Adddate As Date,  _
                    ByVal AVOUCHERNO As String,  _
                    ByVal AVOUCHERDATE As Date,  _
                    ByVal ADJUSTEDAMOUNT As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal OTHCHARGE As Decimal,  _
                    ByVal STORECODE As String,  _
                    ByVal STOREDESC As String,  _
                    ByVal OverallDiscount As Decimal) As VIEWPURCHASEREGISTERSUMMARYRow
            Dim rowVIEWPURCHASEREGISTERSUMMARYRow As VIEWPURCHASEREGISTERSUMMARYRow = CType(Me.NewRow,VIEWPURCHASEREGISTERSUMMARYRow)
            rowVIEWPURCHASEREGISTERSUMMARYRow.ItemArray = New Object() {GRNDETAILS, Grndate, PONO, Supplierinvno, SUPPLIERCODE, SUPPLIERNAME, GLACCOUNTCODE, GLACCOUNTNAME, TOTALAMOUNT, VATAMOUNT, SURCHARGEAMT, DISCOUNTAMOUNT, BILLAMOUNT, ITEMCODE, ITEMNAME, UOM, QTY, RATE, DISCOUNT, AMOUNT, Adddate, AVOUCHERNO, AVOUCHERDATE, ADJUSTEDAMOUNT, TAXAMOUNT, OTHCHARGE, STORECODE, STOREDESC, OverallDiscount}
            Me.Rows.Add(rowVIEWPURCHASEREGISTERSUMMARYRow)
            Return rowVIEWPURCHASEREGISTERSUMMARYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEWPURCHASEREGISTERSUMMARYDataTable = CType(MyBase.Clone,VIEWPURCHASEREGISTERSUMMARYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEWPURCHASEREGISTERSUMMARYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGRNDETAILS = Me.Columns("GRNDETAILS")
            Me.columnGrndate = Me.Columns("Grndate")
            Me.columnPONO = Me.Columns("PONO")
            Me.columnSupplierinvno = Me.Columns("Supplierinvno")
            Me.columnSUPPLIERCODE = Me.Columns("SUPPLIERCODE")
            Me.columnSUPPLIERNAME = Me.Columns("SUPPLIERNAME")
            Me.columnGLACCOUNTCODE = Me.Columns("GLACCOUNTCODE")
            Me.columnGLACCOUNTNAME = Me.Columns("GLACCOUNTNAME")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnVATAMOUNT = Me.Columns("VATAMOUNT")
            Me.columnSURCHARGEAMT = Me.Columns("SURCHARGEAMT")
            Me.columnDISCOUNTAMOUNT = Me.Columns("DISCOUNTAMOUNT")
            Me.columnBILLAMOUNT = Me.Columns("BILLAMOUNT")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnAdddate = Me.Columns("Adddate")
            Me.columnAVOUCHERNO = Me.Columns("AVOUCHERNO")
            Me.columnAVOUCHERDATE = Me.Columns("AVOUCHERDATE")
            Me.columnADJUSTEDAMOUNT = Me.Columns("ADJUSTEDAMOUNT")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnOTHCHARGE = Me.Columns("OTHCHARGE")
            Me.columnSTORECODE = Me.Columns("STORECODE")
            Me.columnSTOREDESC = Me.Columns("STOREDESC")
            Me.columnOverallDiscount = Me.Columns("OverallDiscount")
        End Sub
        
        Private Sub InitClass()
            Me.columnGRNDETAILS = New DataColumn("GRNDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDETAILS)
            Me.columnGrndate = New DataColumn("Grndate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGrndate)
            Me.columnPONO = New DataColumn("PONO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPONO)
            Me.columnSupplierinvno = New DataColumn("Supplierinvno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupplierinvno)
            Me.columnSUPPLIERCODE = New DataColumn("SUPPLIERCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIERCODE)
            Me.columnSUPPLIERNAME = New DataColumn("SUPPLIERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIERNAME)
            Me.columnGLACCOUNTCODE = New DataColumn("GLACCOUNTCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCOUNTCODE)
            Me.columnGLACCOUNTNAME = New DataColumn("GLACCOUNTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCOUNTNAME)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnVATAMOUNT = New DataColumn("VATAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVATAMOUNT)
            Me.columnSURCHARGEAMT = New DataColumn("SURCHARGEAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSURCHARGEAMT)
            Me.columnDISCOUNTAMOUNT = New DataColumn("DISCOUNTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNTAMOUNT)
            Me.columnBILLAMOUNT = New DataColumn("BILLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLAMOUNT)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnAdddate = New DataColumn("Adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdddate)
            Me.columnAVOUCHERNO = New DataColumn("AVOUCHERNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAVOUCHERNO)
            Me.columnAVOUCHERDATE = New DataColumn("AVOUCHERDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAVOUCHERDATE)
            Me.columnADJUSTEDAMOUNT = New DataColumn("ADJUSTEDAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADJUSTEDAMOUNT)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnOTHCHARGE = New DataColumn("OTHCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHCHARGE)
            Me.columnSTORECODE = New DataColumn("STORECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTORECODE)
            Me.columnSTOREDESC = New DataColumn("STOREDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTOREDESC)
            Me.columnOverallDiscount = New DataColumn("OverallDiscount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOverallDiscount)
            Me.columnGRNDETAILS.ReadOnly = true
            Me.columnPONO.ReadOnly = true
            Me.columnSupplierinvno.ReadOnly = true
            Me.columnSUPPLIERCODE.ReadOnly = true
            Me.columnSUPPLIERNAME.ReadOnly = true
            Me.columnGLACCOUNTCODE.ReadOnly = true
            Me.columnGLACCOUNTNAME.ReadOnly = true
            Me.columnTOTALAMOUNT.ReadOnly = true
            Me.columnVATAMOUNT.ReadOnly = true
            Me.columnSURCHARGEAMT.ReadOnly = true
            Me.columnDISCOUNTAMOUNT.ReadOnly = true
            Me.columnBILLAMOUNT.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnUOM.ReadOnly = true
            Me.columnQTY.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnDISCOUNT.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnAVOUCHERNO.ReadOnly = true
            Me.columnAVOUCHERDATE.ReadOnly = true
            Me.columnADJUSTEDAMOUNT.ReadOnly = true
            Me.columnTAXAMOUNT.ReadOnly = true
            Me.columnOTHCHARGE.ReadOnly = true
            Me.columnSTORECODE.ReadOnly = true
            Me.columnSTOREDESC.ReadOnly = true
        End Sub
        
        Public Function NewVIEWPURCHASEREGISTERSUMMARYRow() As VIEWPURCHASEREGISTERSUMMARYRow
            Return CType(Me.NewRow,VIEWPURCHASEREGISTERSUMMARYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEWPURCHASEREGISTERSUMMARYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEWPURCHASEREGISTERSUMMARYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARYRowChanged(Me, New VIEWPURCHASEREGISTERSUMMARYRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARYRowChanging(Me, New VIEWPURCHASEREGISTERSUMMARYRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARYRowDeleted(Me, New VIEWPURCHASEREGISTERSUMMARYRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARYRowDeleting(Me, New VIEWPURCHASEREGISTERSUMMARYRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEWPURCHASEREGISTERSUMMARYRow(ByVal row As VIEWPURCHASEREGISTERSUMMARYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERSUMMARYRow
        Inherits DataRow
        
        Private tableVIEWPURCHASEREGISTERSUMMARY As VIEWPURCHASEREGISTERSUMMARYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEWPURCHASEREGISTERSUMMARY = CType(Me.Table,VIEWPURCHASEREGISTERSUMMARYDataTable)
        End Sub
        
        Public Property GRNDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GRNDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GRNDETAILSColumn) = value
            End Set
        End Property
        
        Public Property Grndate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GrndateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GrndateColumn) = value
            End Set
        End Property
        
        Public Property PONO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.PONOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.PONOColumn) = value
            End Set
        End Property
        
        Public Property Supplierinvno As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SupplierinvnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SupplierinvnoColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIERCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERCODEColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERNAMEColumn) = value
            End Set
        End Property
        
        Public Property GLACCOUNTCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCOUNTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTNAMEColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property VATAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.VATAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.VATAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SURCHARGEAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SURCHARGEAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SURCHARGEAMTColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BILLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.BILLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.BILLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.UOMColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.RATEColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property Adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AdddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AdddateColumn) = value
            End Set
        End Property
        
        Public Property AVOUCHERNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERNOColumn) = value
            End Set
        End Property
        
        Public Property AVOUCHERDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERDATEColumn) = value
            End Set
        End Property
        
        Public Property ADJUSTEDAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ADJUSTEDAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ADJUSTEDAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property OTHCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.OTHCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.OTHCHARGEColumn) = value
            End Set
        End Property
        
        Public Property STORECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.STORECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.STORECODEColumn) = value
            End Set
        End Property
        
        Public Property STOREDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.STOREDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.STOREDESCColumn) = value
            End Set
        End Property
        
        Public Property OverallDiscount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.OverallDiscountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.OverallDiscountColumn) = value
            End Set
        End Property
        
        Public Function IsGRNDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.GRNDETAILSColumn)
        End Function
        
        Public Sub SetGRNDETAILSNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GRNDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGrndateNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.GrndateColumn)
        End Function
        
        Public Sub SetGrndateNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GrndateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPONONull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.PONOColumn)
        End Function
        
        Public Sub SetPONONull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.PONOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSupplierinvnoNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.SupplierinvnoColumn)
        End Function
        
        Public Sub SetSupplierinvnoNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SupplierinvnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUPPLIERCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERCODEColumn)
        End Function
        
        Public Sub SetSUPPLIERCODENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUPPLIERNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERNAMEColumn)
        End Function
        
        Public Sub SetSUPPLIERNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SUPPLIERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCOUNTCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTCODEColumn)
        End Function
        
        Public Sub SetGLACCOUNTCODENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCOUNTNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTNAMEColumn)
        End Function
        
        Public Sub SetGLACCOUNTNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.GLACCOUNTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.VATAMOUNTColumn)
        End Function
        
        Public Sub SetVATAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.VATAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSURCHARGEAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.SURCHARGEAMTColumn)
        End Function
        
        Public Sub SetSURCHARGEAMTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.SURCHARGEAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTAMOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.BILLAMOUNTColumn)
        End Function
        
        Public Sub SetBILLAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.BILLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.AdddateColumn)
        End Function
        
        Public Sub SetAdddateNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AdddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAVOUCHERNONull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERNOColumn)
        End Function
        
        Public Sub SetAVOUCHERNONull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAVOUCHERDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERDATEColumn)
        End Function
        
        Public Sub SetAVOUCHERDATENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.AVOUCHERDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADJUSTEDAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.ADJUSTEDAMOUNTColumn)
        End Function
        
        Public Sub SetADJUSTEDAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.ADJUSTEDAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHCHARGENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.OTHCHARGEColumn)
        End Function
        
        Public Sub SetOTHCHARGENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.OTHCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTORECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.STORECODEColumn)
        End Function
        
        Public Sub SetSTORECODENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.STORECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTOREDESCNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.STOREDESCColumn)
        End Function
        
        Public Sub SetSTOREDESCNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.STOREDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOverallDiscountNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY.OverallDiscountColumn)
        End Function
        
        Public Sub SetOverallDiscountNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY.OverallDiscountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERSUMMARYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEWPURCHASEREGISTERSUMMARYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEWPURCHASEREGISTERSUMMARYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEWPURCHASEREGISTERSUMMARYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FOCREPORTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCOMPANYCODE As DataColumn
        
        Private columnCOMPANYNAME As DataColumn
        
        Private columnGRNDETAILS As DataColumn
        
        Private columnGRNDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnVALUE As DataColumn
        
        Private columnFOCFLAG As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_FOCREPORT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property COMPANYCODEColumn As DataColumn
            Get
                Return Me.columnCOMPANYCODE
            End Get
        End Property
        
        Friend ReadOnly Property COMPANYNAMEColumn As DataColumn
            Get
                Return Me.columnCOMPANYNAME
            End Get
        End Property
        
        Friend ReadOnly Property GRNDETAILSColumn As DataColumn
            Get
                Return Me.columnGRNDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property GRNDATEColumn As DataColumn
            Get
                Return Me.columnGRNDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property VALUEColumn As DataColumn
            Get
                Return Me.columnVALUE
            End Get
        End Property
        
        Friend ReadOnly Property FOCFLAGColumn As DataColumn
            Get
                Return Me.columnFOCFLAG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_FOCREPORTRow
            Get
                Return CType(Me.Rows(index),VIEW_FOCREPORTRow)
            End Get
        End Property
        
        Public Event VIEW_FOCREPORTRowChanged As VIEW_FOCREPORTRowChangeEventHandler
        
        Public Event VIEW_FOCREPORTRowChanging As VIEW_FOCREPORTRowChangeEventHandler
        
        Public Event VIEW_FOCREPORTRowDeleted As VIEW_FOCREPORTRowChangeEventHandler
        
        Public Event VIEW_FOCREPORTRowDeleting As VIEW_FOCREPORTRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_FOCREPORTRow(ByVal row As VIEW_FOCREPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_FOCREPORTRow(ByVal COMPANYCODE As String, ByVal COMPANYNAME As String, ByVal GRNDETAILS As String, ByVal GRNDATE As Date, ByVal ITEMCODE As String, ByVal ITEMNAME As String, ByVal QTY As Decimal, ByVal RATE As Decimal, ByVal VALUE As Decimal, ByVal FOCFLAG As String) As VIEW_FOCREPORTRow
            Dim rowVIEW_FOCREPORTRow As VIEW_FOCREPORTRow = CType(Me.NewRow,VIEW_FOCREPORTRow)
            rowVIEW_FOCREPORTRow.ItemArray = New Object() {COMPANYCODE, COMPANYNAME, GRNDETAILS, GRNDATE, ITEMCODE, ITEMNAME, QTY, RATE, VALUE, FOCFLAG}
            Me.Rows.Add(rowVIEW_FOCREPORTRow)
            Return rowVIEW_FOCREPORTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_FOCREPORTDataTable = CType(MyBase.Clone,VIEW_FOCREPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_FOCREPORTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCOMPANYCODE = Me.Columns("COMPANYCODE")
            Me.columnCOMPANYNAME = Me.Columns("COMPANYNAME")
            Me.columnGRNDETAILS = Me.Columns("GRNDETAILS")
            Me.columnGRNDATE = Me.Columns("GRNDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnVALUE = Me.Columns("VALUE")
            Me.columnFOCFLAG = Me.Columns("FOCFLAG")
        End Sub
        
        Private Sub InitClass()
            Me.columnCOMPANYCODE = New DataColumn("COMPANYCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPANYCODE)
            Me.columnCOMPANYNAME = New DataColumn("COMPANYNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOMPANYNAME)
            Me.columnGRNDETAILS = New DataColumn("GRNDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDETAILS)
            Me.columnGRNDATE = New DataColumn("GRNDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnVALUE = New DataColumn("VALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVALUE)
            Me.columnFOCFLAG = New DataColumn("FOCFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFOCFLAG)
            Me.columnFOCFLAG.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_FOCREPORTRow() As VIEW_FOCREPORTRow
            Return CType(Me.NewRow,VIEW_FOCREPORTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_FOCREPORTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_FOCREPORTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_FOCREPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_FOCREPORTRowChanged(Me, New VIEW_FOCREPORTRowChangeEvent(CType(e.Row,VIEW_FOCREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_FOCREPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_FOCREPORTRowChanging(Me, New VIEW_FOCREPORTRowChangeEvent(CType(e.Row,VIEW_FOCREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_FOCREPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_FOCREPORTRowDeleted(Me, New VIEW_FOCREPORTRowChangeEvent(CType(e.Row,VIEW_FOCREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_FOCREPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_FOCREPORTRowDeleting(Me, New VIEW_FOCREPORTRowChangeEvent(CType(e.Row,VIEW_FOCREPORTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_FOCREPORTRow(ByVal row As VIEW_FOCREPORTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FOCREPORTRow
        Inherits DataRow
        
        Private tableVIEW_FOCREPORT As VIEW_FOCREPORTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_FOCREPORT = CType(Me.Table,VIEW_FOCREPORTDataTable)
        End Sub
        
        Public Property COMPANYCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.COMPANYCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.COMPANYCODEColumn) = value
            End Set
        End Property
        
        Public Property COMPANYNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.COMPANYNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.COMPANYNAMEColumn) = value
            End Set
        End Property
        
        Public Property GRNDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.GRNDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.GRNDETAILSColumn) = value
            End Set
        End Property
        
        Public Property GRNDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.GRNDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.GRNDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.RATEColumn) = value
            End Set
        End Property
        
        Public Property VALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_FOCREPORT.VALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.VALUEColumn) = value
            End Set
        End Property
        
        Public Property FOCFLAG As String
            Get
                Return CType(Me(Me.tableVIEW_FOCREPORT.FOCFLAGColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_FOCREPORT.FOCFLAGColumn) = value
            End Set
        End Property
        
        Public Function IsCOMPANYCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.COMPANYCODEColumn)
        End Function
        
        Public Sub SetCOMPANYCODENull()
            Me(Me.tableVIEW_FOCREPORT.COMPANYCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOMPANYNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.COMPANYNAMEColumn)
        End Function
        
        Public Sub SetCOMPANYNAMENull()
            Me(Me.tableVIEW_FOCREPORT.COMPANYNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGRNDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.GRNDETAILSColumn)
        End Function
        
        Public Sub SetGRNDETAILSNull()
            Me(Me.tableVIEW_FOCREPORT.GRNDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGRNDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.GRNDATEColumn)
        End Function
        
        Public Sub SetGRNDATENull()
            Me(Me.tableVIEW_FOCREPORT.GRNDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableVIEW_FOCREPORT.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tableVIEW_FOCREPORT.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableVIEW_FOCREPORT.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableVIEW_FOCREPORT.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVALUENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_FOCREPORT.VALUEColumn)
        End Function
        
        Public Sub SetVALUENull()
            Me(Me.tableVIEW_FOCREPORT.VALUEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_FOCREPORTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_FOCREPORTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_FOCREPORTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_FOCREPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ExiseRptDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGROUPNAME As DataColumn
        
        Private columnSUBGROUPNAME As DataColumn
        
        Private columnOPqty As DataColumn
        
        Private columnrecQty As DataColumn
        
        Private columnTotal As DataColumn
        
        Private columnSales As DataColumn
        
        Private columnISSUE As DataColumn
        
        Private columnClosing As DataColumn
        
        Private columnpriority As DataColumn
        
        Friend Sub New()
            MyBase.New("Inv_ExiseRpt")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GROUPNAMEColumn As DataColumn
            Get
                Return Me.columnGROUPNAME
            End Get
        End Property
        
        Friend ReadOnly Property SUBGROUPNAMEColumn As DataColumn
            Get
                Return Me.columnSUBGROUPNAME
            End Get
        End Property
        
        Friend ReadOnly Property OPqtyColumn As DataColumn
            Get
                Return Me.columnOPqty
            End Get
        End Property
        
        Friend ReadOnly Property recQtyColumn As DataColumn
            Get
                Return Me.columnrecQty
            End Get
        End Property
        
        Friend ReadOnly Property TotalColumn As DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        Friend ReadOnly Property SalesColumn As DataColumn
            Get
                Return Me.columnSales
            End Get
        End Property
        
        Friend ReadOnly Property ISSUEColumn As DataColumn
            Get
                Return Me.columnISSUE
            End Get
        End Property
        
        Friend ReadOnly Property ClosingColumn As DataColumn
            Get
                Return Me.columnClosing
            End Get
        End Property
        
        Friend ReadOnly Property priorityColumn As DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Inv_ExiseRptRow
            Get
                Return CType(Me.Rows(index),Inv_ExiseRptRow)
            End Get
        End Property
        
        Public Event Inv_ExiseRptRowChanged As Inv_ExiseRptRowChangeEventHandler
        
        Public Event Inv_ExiseRptRowChanging As Inv_ExiseRptRowChangeEventHandler
        
        Public Event Inv_ExiseRptRowDeleted As Inv_ExiseRptRowChangeEventHandler
        
        Public Event Inv_ExiseRptRowDeleting As Inv_ExiseRptRowChangeEventHandler
        
        Public Overloads Sub AddInv_ExiseRptRow(ByVal row As Inv_ExiseRptRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddInv_ExiseRptRow(ByVal GROUPNAME As String, ByVal SUBGROUPNAME As String, ByVal OPqty As Decimal, ByVal recQty As Decimal, ByVal Total As Decimal, ByVal Sales As Decimal, ByVal ISSUE As Decimal, ByVal Closing As Decimal, ByVal priority As Integer) As Inv_ExiseRptRow
            Dim rowInv_ExiseRptRow As Inv_ExiseRptRow = CType(Me.NewRow,Inv_ExiseRptRow)
            rowInv_ExiseRptRow.ItemArray = New Object() {GROUPNAME, SUBGROUPNAME, OPqty, recQty, Total, Sales, ISSUE, Closing, priority}
            Me.Rows.Add(rowInv_ExiseRptRow)
            Return rowInv_ExiseRptRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Inv_ExiseRptDataTable = CType(MyBase.Clone,Inv_ExiseRptDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Inv_ExiseRptDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGROUPNAME = Me.Columns("GROUPNAME")
            Me.columnSUBGROUPNAME = Me.Columns("SUBGROUPNAME")
            Me.columnOPqty = Me.Columns("OPqty")
            Me.columnrecQty = Me.Columns("recQty")
            Me.columnTotal = Me.Columns("Total")
            Me.columnSales = Me.Columns("Sales")
            Me.columnISSUE = Me.Columns("ISSUE")
            Me.columnClosing = Me.Columns("Closing")
            Me.columnpriority = Me.Columns("priority")
        End Sub
        
        Private Sub InitClass()
            Me.columnGROUPNAME = New DataColumn("GROUPNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPNAME)
            Me.columnSUBGROUPNAME = New DataColumn("SUBGROUPNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUBGROUPNAME)
            Me.columnOPqty = New DataColumn("OPqty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOPqty)
            Me.columnrecQty = New DataColumn("recQty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrecQty)
            Me.columnTotal = New DataColumn("Total", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTotal)
            Me.columnSales = New DataColumn("Sales", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSales)
            Me.columnISSUE = New DataColumn("ISSUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISSUE)
            Me.columnClosing = New DataColumn("Closing", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnClosing)
            Me.columnpriority = New DataColumn("priority", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpriority)
        End Sub
        
        Public Function NewInv_ExiseRptRow() As Inv_ExiseRptRow
            Return CType(Me.NewRow,Inv_ExiseRptRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Inv_ExiseRptRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Inv_ExiseRptRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Inv_ExiseRptRowChangedEvent) Is Nothing) Then
                RaiseEvent Inv_ExiseRptRowChanged(Me, New Inv_ExiseRptRowChangeEvent(CType(e.Row,Inv_ExiseRptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Inv_ExiseRptRowChangingEvent) Is Nothing) Then
                RaiseEvent Inv_ExiseRptRowChanging(Me, New Inv_ExiseRptRowChangeEvent(CType(e.Row,Inv_ExiseRptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Inv_ExiseRptRowDeletedEvent) Is Nothing) Then
                RaiseEvent Inv_ExiseRptRowDeleted(Me, New Inv_ExiseRptRowChangeEvent(CType(e.Row,Inv_ExiseRptRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Inv_ExiseRptRowDeletingEvent) Is Nothing) Then
                RaiseEvent Inv_ExiseRptRowDeleting(Me, New Inv_ExiseRptRowChangeEvent(CType(e.Row,Inv_ExiseRptRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveInv_ExiseRptRow(ByVal row As Inv_ExiseRptRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ExiseRptRow
        Inherits DataRow
        
        Private tableInv_ExiseRpt As Inv_ExiseRptDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableInv_ExiseRpt = CType(Me.Table,Inv_ExiseRptDataTable)
        End Sub
        
        Public Property GROUPNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.GROUPNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.GROUPNAMEColumn) = value
            End Set
        End Property
        
        Public Property SUBGROUPNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.SUBGROUPNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.SUBGROUPNAMEColumn) = value
            End Set
        End Property
        
        Public Property OPqty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.OPqtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.OPqtyColumn) = value
            End Set
        End Property
        
        Public Property recQty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.recQtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.recQtyColumn) = value
            End Set
        End Property
        
        Public Property Total As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.TotalColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.TotalColumn) = value
            End Set
        End Property
        
        Public Property Sales As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.SalesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.SalesColumn) = value
            End Set
        End Property
        
        Public Property ISSUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.ISSUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.ISSUEColumn) = value
            End Set
        End Property
        
        Public Property Closing As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.ClosingColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.ClosingColumn) = value
            End Set
        End Property
        
        Public Property priority As Integer
            Get
                Try 
                    Return CType(Me(Me.tableInv_ExiseRpt.priorityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableInv_ExiseRpt.priorityColumn) = value
            End Set
        End Property
        
        Public Function IsGROUPNAMENull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.GROUPNAMEColumn)
        End Function
        
        Public Sub SetGROUPNAMENull()
            Me(Me.tableInv_ExiseRpt.GROUPNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUBGROUPNAMENull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.SUBGROUPNAMEColumn)
        End Function
        
        Public Sub SetSUBGROUPNAMENull()
            Me(Me.tableInv_ExiseRpt.SUBGROUPNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOPqtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.OPqtyColumn)
        End Function
        
        Public Sub SetOPqtyNull()
            Me(Me.tableInv_ExiseRpt.OPqtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrecQtyNull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.recQtyColumn)
        End Function
        
        Public Sub SetrecQtyNull()
            Me(Me.tableInv_ExiseRpt.recQtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.TotalColumn)
        End Function
        
        Public Sub SetTotalNull()
            Me(Me.tableInv_ExiseRpt.TotalColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSalesNull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.SalesColumn)
        End Function
        
        Public Sub SetSalesNull()
            Me(Me.tableInv_ExiseRpt.SalesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISSUENull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.ISSUEColumn)
        End Function
        
        Public Sub SetISSUENull()
            Me(Me.tableInv_ExiseRpt.ISSUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsClosingNull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.ClosingColumn)
        End Function
        
        Public Sub SetClosingNull()
            Me(Me.tableInv_ExiseRpt.ClosingColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tableInv_ExiseRpt.priorityColumn)
        End Function
        
        Public Sub SetpriorityNull()
            Me(Me.tableInv_ExiseRpt.priorityColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Inv_ExiseRptRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Inv_ExiseRptRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Inv_ExiseRptRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Inv_ExiseRptRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGRNDETAILS As DataColumn
        
        Private columnGRNDATE As DataColumn
        
        Private columnSUPPLIERCODE As DataColumn
        
        Private columnSUPPLIERNAME As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnGLACCOUNTCODE As DataColumn
        
        Private columnGLACCOUNTNAME As DataColumn
        
        Private columnBILLTERMS As DataColumn
        
        Private columnPERCENTAGE As DataColumn
        
        Private columnTAXCODE As DataColumn
        
        Private columnVATAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEWPURCHASEREGISTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GRNDETAILSColumn As DataColumn
            Get
                Return Me.columnGRNDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property GRNDATEColumn As DataColumn
            Get
                Return Me.columnGRNDATE
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIERCODEColumn As DataColumn
            Get
                Return Me.columnSUPPLIERCODE
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIERNAMEColumn As DataColumn
            Get
                Return Me.columnSUPPLIERNAME
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property GLACCOUNTCODEColumn As DataColumn
            Get
                Return Me.columnGLACCOUNTCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCOUNTNAMEColumn As DataColumn
            Get
                Return Me.columnGLACCOUNTNAME
            End Get
        End Property
        
        Friend ReadOnly Property BILLTERMSColumn As DataColumn
            Get
                Return Me.columnBILLTERMS
            End Get
        End Property
        
        Friend ReadOnly Property PERCENTAGEColumn As DataColumn
            Get
                Return Me.columnPERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property TAXCODEColumn As DataColumn
            Get
                Return Me.columnTAXCODE
            End Get
        End Property
        
        Friend ReadOnly Property VATAMOUNTColumn As DataColumn
            Get
                Return Me.columnVATAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEWPURCHASEREGISTERRow
            Get
                Return CType(Me.Rows(index),VIEWPURCHASEREGISTERRow)
            End Get
        End Property
        
        Public Event VIEWPURCHASEREGISTERRowChanged As VIEWPURCHASEREGISTERRowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERRowChanging As VIEWPURCHASEREGISTERRowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERRowDeleted As VIEWPURCHASEREGISTERRowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERRowDeleting As VIEWPURCHASEREGISTERRowChangeEventHandler
        
        Public Overloads Sub AddVIEWPURCHASEREGISTERRow(ByVal row As VIEWPURCHASEREGISTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEWPURCHASEREGISTERRow( _
                    ByVal GRNDETAILS As String,  _
                    ByVal GRNDATE As Date,  _
                    ByVal SUPPLIERCODE As String,  _
                    ByVal SUPPLIERNAME As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMNAME As String,  _
                    ByVal UOM As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal adddate As Date,  _
                    ByVal GLACCOUNTCODE As String,  _
                    ByVal GLACCOUNTNAME As String,  _
                    ByVal BILLTERMS As String,  _
                    ByVal PERCENTAGE As Decimal,  _
                    ByVal TAXCODE As String,  _
                    ByVal VATAMOUNT As Decimal) As VIEWPURCHASEREGISTERRow
            Dim rowVIEWPURCHASEREGISTERRow As VIEWPURCHASEREGISTERRow = CType(Me.NewRow,VIEWPURCHASEREGISTERRow)
            rowVIEWPURCHASEREGISTERRow.ItemArray = New Object() {GRNDETAILS, GRNDATE, SUPPLIERCODE, SUPPLIERNAME, ITEMCODE, ITEMNAME, UOM, QTY, RATE, DISCOUNT, AMOUNT, adddate, GLACCOUNTCODE, GLACCOUNTNAME, BILLTERMS, PERCENTAGE, TAXCODE, VATAMOUNT}
            Me.Rows.Add(rowVIEWPURCHASEREGISTERRow)
            Return rowVIEWPURCHASEREGISTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEWPURCHASEREGISTERDataTable = CType(MyBase.Clone,VIEWPURCHASEREGISTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEWPURCHASEREGISTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGRNDETAILS = Me.Columns("GRNDETAILS")
            Me.columnGRNDATE = Me.Columns("GRNDATE")
            Me.columnSUPPLIERCODE = Me.Columns("SUPPLIERCODE")
            Me.columnSUPPLIERNAME = Me.Columns("SUPPLIERNAME")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnGLACCOUNTCODE = Me.Columns("GLACCOUNTCODE")
            Me.columnGLACCOUNTNAME = Me.Columns("GLACCOUNTNAME")
            Me.columnBILLTERMS = Me.Columns("BILLTERMS")
            Me.columnPERCENTAGE = Me.Columns("PERCENTAGE")
            Me.columnTAXCODE = Me.Columns("TAXCODE")
            Me.columnVATAMOUNT = Me.Columns("VATAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnGRNDETAILS = New DataColumn("GRNDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDETAILS)
            Me.columnGRNDATE = New DataColumn("GRNDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDATE)
            Me.columnSUPPLIERCODE = New DataColumn("SUPPLIERCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIERCODE)
            Me.columnSUPPLIERNAME = New DataColumn("SUPPLIERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIERNAME)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnGLACCOUNTCODE = New DataColumn("GLACCOUNTCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCOUNTCODE)
            Me.columnGLACCOUNTNAME = New DataColumn("GLACCOUNTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCOUNTNAME)
            Me.columnBILLTERMS = New DataColumn("BILLTERMS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLTERMS)
            Me.columnPERCENTAGE = New DataColumn("PERCENTAGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPERCENTAGE)
            Me.columnTAXCODE = New DataColumn("TAXCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXCODE)
            Me.columnVATAMOUNT = New DataColumn("VATAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVATAMOUNT)
            Me.columnGRNDETAILS.ReadOnly = true
            Me.columnSUPPLIERCODE.ReadOnly = true
            Me.columnSUPPLIERNAME.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnUOM.ReadOnly = true
            Me.columnQTY.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnDISCOUNT.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnGLACCOUNTCODE.ReadOnly = true
            Me.columnGLACCOUNTNAME.ReadOnly = true
            Me.columnBILLTERMS.ReadOnly = true
            Me.columnPERCENTAGE.ReadOnly = true
            Me.columnTAXCODE.ReadOnly = true
            Me.columnVATAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewVIEWPURCHASEREGISTERRow() As VIEWPURCHASEREGISTERRow
            Return CType(Me.NewRow,VIEWPURCHASEREGISTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEWPURCHASEREGISTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEWPURCHASEREGISTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEWPURCHASEREGISTERRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERRowChanged(Me, New VIEWPURCHASEREGISTERRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEWPURCHASEREGISTERRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERRowChanging(Me, New VIEWPURCHASEREGISTERRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEWPURCHASEREGISTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERRowDeleted(Me, New VIEWPURCHASEREGISTERRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEWPURCHASEREGISTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERRowDeleting(Me, New VIEWPURCHASEREGISTERRowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEWPURCHASEREGISTERRow(ByVal row As VIEWPURCHASEREGISTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERRow
        Inherits DataRow
        
        Private tableVIEWPURCHASEREGISTER As VIEWPURCHASEREGISTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEWPURCHASEREGISTER = CType(Me.Table,VIEWPURCHASEREGISTERDataTable)
        End Sub
        
        Public Property GRNDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.GRNDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.GRNDETAILSColumn) = value
            End Set
        End Property
        
        Public Property GRNDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.GRNDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.GRNDATEColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIERCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.SUPPLIERCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.SUPPLIERCODEColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.SUPPLIERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.SUPPLIERNAMEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.UOMColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.RATEColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.adddateColumn) = value
            End Set
        End Property
        
        Public Property GLACCOUNTCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCOUNTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTNAMEColumn) = value
            End Set
        End Property
        
        Public Property BILLTERMS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.BILLTERMSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.BILLTERMSColumn) = value
            End Set
        End Property
        
        Public Property PERCENTAGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.PERCENTAGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.PERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property TAXCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.TAXCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.TAXCODEColumn) = value
            End Set
        End Property
        
        Public Property VATAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTER.VATAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTER.VATAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsGRNDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.GRNDETAILSColumn)
        End Function
        
        Public Sub SetGRNDETAILSNull()
            Me(Me.tableVIEWPURCHASEREGISTER.GRNDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGRNDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.GRNDATEColumn)
        End Function
        
        Public Sub SetGRNDATENull()
            Me(Me.tableVIEWPURCHASEREGISTER.GRNDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUPPLIERCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.SUPPLIERCODEColumn)
        End Function
        
        Public Sub SetSUPPLIERCODENull()
            Me(Me.tableVIEWPURCHASEREGISTER.SUPPLIERCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUPPLIERNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.SUPPLIERNAMEColumn)
        End Function
        
        Public Sub SetSUPPLIERNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTER.SUPPLIERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableVIEWPURCHASEREGISTER.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTER.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableVIEWPURCHASEREGISTER.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableVIEWPURCHASEREGISTER.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableVIEWPURCHASEREGISTER.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTER.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTER.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEWPURCHASEREGISTER.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCOUNTCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTCODEColumn)
        End Function
        
        Public Sub SetGLACCOUNTCODENull()
            Me(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCOUNTNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTNAMEColumn)
        End Function
        
        Public Sub SetGLACCOUNTNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTER.GLACCOUNTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLTERMSNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.BILLTERMSColumn)
        End Function
        
        Public Sub SetBILLTERMSNull()
            Me(Me.tableVIEWPURCHASEREGISTER.BILLTERMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.PERCENTAGEColumn)
        End Function
        
        Public Sub SetPERCENTAGENull()
            Me(Me.tableVIEWPURCHASEREGISTER.PERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.TAXCODEColumn)
        End Function
        
        Public Sub SetTAXCODENull()
            Me(Me.tableVIEWPURCHASEREGISTER.TAXCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTER.VATAMOUNTColumn)
        End Function
        
        Public Sub SetVATAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTER.VATAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEWPURCHASEREGISTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEWPURCHASEREGISTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEWPURCHASEREGISTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERSUMMARY1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGRNDETAILS As DataColumn
        
        Private columnGRNDATE As DataColumn
        
        Private columnSUPPLIERCODE As DataColumn
        
        Private columnSUPPLIERNAME As DataColumn
        
        Private columnGLACCOUNTCODE As DataColumn
        
        Private columnGLACCOUNTNAME As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnVATAMOUNT As DataColumn
        
        Private columnSURCHARGEAMT As DataColumn
        
        Private columnDISCOUNTAMOUNT As DataColumn
        
        Private columnBILLAMOUNT As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnSGSTAMT As DataColumn
        
        Private columnCGSTAMT As DataColumn
        
        Private columnIGSTAMT As DataColumn
        
        Private columnpodate As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnOTHCHARGE As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnAVOUCHERNO As DataColumn
        
        Private columnAVOUCHERDATE As DataColumn
        
        Private columnADJUSTEDAMOUNT As DataColumn
        
        Private columnPOSTING As DataColumn
        
        Private columnPONO As DataColumn
        
        Private columnSupplierinvno As DataColumn
        
        Private columnOVERALLDISCOUNT As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnSTOREDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEWPURCHASEREGISTERSUMMARY1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GRNDETAILSColumn As DataColumn
            Get
                Return Me.columnGRNDETAILS
            End Get
        End Property
        
        Friend ReadOnly Property GRNDATEColumn As DataColumn
            Get
                Return Me.columnGRNDATE
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIERCODEColumn As DataColumn
            Get
                Return Me.columnSUPPLIERCODE
            End Get
        End Property
        
        Friend ReadOnly Property SUPPLIERNAMEColumn As DataColumn
            Get
                Return Me.columnSUPPLIERNAME
            End Get
        End Property
        
        Friend ReadOnly Property GLACCOUNTCODEColumn As DataColumn
            Get
                Return Me.columnGLACCOUNTCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCOUNTNAMEColumn As DataColumn
            Get
                Return Me.columnGLACCOUNTNAME
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property VATAMOUNTColumn As DataColumn
            Get
                Return Me.columnVATAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SURCHARGEAMTColumn As DataColumn
            Get
                Return Me.columnSURCHARGEAMT
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTAMOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BILLAMOUNTColumn As DataColumn
            Get
                Return Me.columnBILLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SGSTAMTColumn As DataColumn
            Get
                Return Me.columnSGSTAMT
            End Get
        End Property
        
        Friend ReadOnly Property CGSTAMTColumn As DataColumn
            Get
                Return Me.columnCGSTAMT
            End Get
        End Property
        
        Friend ReadOnly Property IGSTAMTColumn As DataColumn
            Get
                Return Me.columnIGSTAMT
            End Get
        End Property
        
        Friend ReadOnly Property podateColumn As DataColumn
            Get
                Return Me.columnpodate
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property OTHCHARGEColumn As DataColumn
            Get
                Return Me.columnOTHCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property AVOUCHERNOColumn As DataColumn
            Get
                Return Me.columnAVOUCHERNO
            End Get
        End Property
        
        Friend ReadOnly Property AVOUCHERDATEColumn As DataColumn
            Get
                Return Me.columnAVOUCHERDATE
            End Get
        End Property
        
        Friend ReadOnly Property ADJUSTEDAMOUNTColumn As DataColumn
            Get
                Return Me.columnADJUSTEDAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property POSTINGColumn As DataColumn
            Get
                Return Me.columnPOSTING
            End Get
        End Property
        
        Friend ReadOnly Property PONOColumn As DataColumn
            Get
                Return Me.columnPONO
            End Get
        End Property
        
        Friend ReadOnly Property SupplierinvnoColumn As DataColumn
            Get
                Return Me.columnSupplierinvno
            End Get
        End Property
        
        Friend ReadOnly Property OVERALLDISCOUNTColumn As DataColumn
            Get
                Return Me.columnOVERALLDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property STOREDESCColumn As DataColumn
            Get
                Return Me.columnSTOREDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEWPURCHASEREGISTERSUMMARY1Row
            Get
                Return CType(Me.Rows(index),VIEWPURCHASEREGISTERSUMMARY1Row)
            End Get
        End Property
        
        Public Event VIEWPURCHASEREGISTERSUMMARY1RowChanged As VIEWPURCHASEREGISTERSUMMARY1RowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERSUMMARY1RowChanging As VIEWPURCHASEREGISTERSUMMARY1RowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERSUMMARY1RowDeleted As VIEWPURCHASEREGISTERSUMMARY1RowChangeEventHandler
        
        Public Event VIEWPURCHASEREGISTERSUMMARY1RowDeleting As VIEWPURCHASEREGISTERSUMMARY1RowChangeEventHandler
        
        Public Overloads Sub AddVIEWPURCHASEREGISTERSUMMARY1Row(ByVal row As VIEWPURCHASEREGISTERSUMMARY1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEWPURCHASEREGISTERSUMMARY1Row( _
                    ByVal GRNDETAILS As String,  _
                    ByVal GRNDATE As Date,  _
                    ByVal SUPPLIERCODE As String,  _
                    ByVal SUPPLIERNAME As String,  _
                    ByVal GLACCOUNTCODE As String,  _
                    ByVal GLACCOUNTNAME As String,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal VATAMOUNT As Decimal,  _
                    ByVal SURCHARGEAMT As Decimal,  _
                    ByVal DISCOUNTAMOUNT As Decimal,  _
                    ByVal BILLAMOUNT As Decimal,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMNAME As String,  _
                    ByVal UOM As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal SGSTAMT As Decimal,  _
                    ByVal CGSTAMT As Decimal,  _
                    ByVal IGSTAMT As Decimal,  _
                    ByVal podate As String,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal OTHCHARGE As Decimal,  _
                    ByVal adddate As Date,  _
                    ByVal AVOUCHERNO As String,  _
                    ByVal AVOUCHERDATE As Date,  _
                    ByVal ADJUSTEDAMOUNT As Decimal,  _
                    ByVal POSTING As String,  _
                    ByVal PONO As String,  _
                    ByVal Supplierinvno As String,  _
                    ByVal OVERALLDISCOUNT As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal STOREDESC As String) As VIEWPURCHASEREGISTERSUMMARY1Row
            Dim rowVIEWPURCHASEREGISTERSUMMARY1Row As VIEWPURCHASEREGISTERSUMMARY1Row = CType(Me.NewRow,VIEWPURCHASEREGISTERSUMMARY1Row)
            rowVIEWPURCHASEREGISTERSUMMARY1Row.ItemArray = New Object() {GRNDETAILS, GRNDATE, SUPPLIERCODE, SUPPLIERNAME, GLACCOUNTCODE, GLACCOUNTNAME, TOTALAMOUNT, VATAMOUNT, SURCHARGEAMT, DISCOUNTAMOUNT, BILLAMOUNT, ITEMCODE, ITEMNAME, UOM, QTY, RATE, DISCOUNT, SGSTAMT, CGSTAMT, IGSTAMT, podate, AMOUNT, OTHCHARGE, adddate, AVOUCHERNO, AVOUCHERDATE, ADJUSTEDAMOUNT, POSTING, PONO, Supplierinvno, OVERALLDISCOUNT, TAXAMOUNT, STOREDESC}
            Me.Rows.Add(rowVIEWPURCHASEREGISTERSUMMARY1Row)
            Return rowVIEWPURCHASEREGISTERSUMMARY1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEWPURCHASEREGISTERSUMMARY1DataTable = CType(MyBase.Clone,VIEWPURCHASEREGISTERSUMMARY1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEWPURCHASEREGISTERSUMMARY1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGRNDETAILS = Me.Columns("GRNDETAILS")
            Me.columnGRNDATE = Me.Columns("GRNDATE")
            Me.columnSUPPLIERCODE = Me.Columns("SUPPLIERCODE")
            Me.columnSUPPLIERNAME = Me.Columns("SUPPLIERNAME")
            Me.columnGLACCOUNTCODE = Me.Columns("GLACCOUNTCODE")
            Me.columnGLACCOUNTNAME = Me.Columns("GLACCOUNTNAME")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnVATAMOUNT = Me.Columns("VATAMOUNT")
            Me.columnSURCHARGEAMT = Me.Columns("SURCHARGEAMT")
            Me.columnDISCOUNTAMOUNT = Me.Columns("DISCOUNTAMOUNT")
            Me.columnBILLAMOUNT = Me.Columns("BILLAMOUNT")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnSGSTAMT = Me.Columns("SGSTAMT")
            Me.columnCGSTAMT = Me.Columns("CGSTAMT")
            Me.columnIGSTAMT = Me.Columns("IGSTAMT")
            Me.columnpodate = Me.Columns("podate")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnOTHCHARGE = Me.Columns("OTHCHARGE")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnAVOUCHERNO = Me.Columns("AVOUCHERNO")
            Me.columnAVOUCHERDATE = Me.Columns("AVOUCHERDATE")
            Me.columnADJUSTEDAMOUNT = Me.Columns("ADJUSTEDAMOUNT")
            Me.columnPOSTING = Me.Columns("POSTING")
            Me.columnPONO = Me.Columns("PONO")
            Me.columnSupplierinvno = Me.Columns("Supplierinvno")
            Me.columnOVERALLDISCOUNT = Me.Columns("OVERALLDISCOUNT")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnSTOREDESC = Me.Columns("STOREDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnGRNDETAILS = New DataColumn("GRNDETAILS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDETAILS)
            Me.columnGRNDATE = New DataColumn("GRNDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRNDATE)
            Me.columnSUPPLIERCODE = New DataColumn("SUPPLIERCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIERCODE)
            Me.columnSUPPLIERNAME = New DataColumn("SUPPLIERNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSUPPLIERNAME)
            Me.columnGLACCOUNTCODE = New DataColumn("GLACCOUNTCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCOUNTCODE)
            Me.columnGLACCOUNTNAME = New DataColumn("GLACCOUNTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCOUNTNAME)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnVATAMOUNT = New DataColumn("VATAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVATAMOUNT)
            Me.columnSURCHARGEAMT = New DataColumn("SURCHARGEAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSURCHARGEAMT)
            Me.columnDISCOUNTAMOUNT = New DataColumn("DISCOUNTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNTAMOUNT)
            Me.columnBILLAMOUNT = New DataColumn("BILLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLAMOUNT)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnSGSTAMT = New DataColumn("SGSTAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSGSTAMT)
            Me.columnCGSTAMT = New DataColumn("CGSTAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCGSTAMT)
            Me.columnIGSTAMT = New DataColumn("IGSTAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIGSTAMT)
            Me.columnpodate = New DataColumn("podate", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpodate)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnOTHCHARGE = New DataColumn("OTHCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHCHARGE)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnAVOUCHERNO = New DataColumn("AVOUCHERNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAVOUCHERNO)
            Me.columnAVOUCHERDATE = New DataColumn("AVOUCHERDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAVOUCHERDATE)
            Me.columnADJUSTEDAMOUNT = New DataColumn("ADJUSTEDAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADJUSTEDAMOUNT)
            Me.columnPOSTING = New DataColumn("POSTING", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSTING)
            Me.columnPONO = New DataColumn("PONO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPONO)
            Me.columnSupplierinvno = New DataColumn("Supplierinvno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSupplierinvno)
            Me.columnOVERALLDISCOUNT = New DataColumn("OVERALLDISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOVERALLDISCOUNT)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnSTOREDESC = New DataColumn("STOREDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTOREDESC)
            Me.columnGRNDETAILS.ReadOnly = true
            Me.columnSUPPLIERCODE.ReadOnly = true
            Me.columnSUPPLIERNAME.ReadOnly = true
            Me.columnGLACCOUNTCODE.ReadOnly = true
            Me.columnGLACCOUNTNAME.ReadOnly = true
            Me.columnTOTALAMOUNT.ReadOnly = true
            Me.columnVATAMOUNT.ReadOnly = true
            Me.columnSURCHARGEAMT.ReadOnly = true
            Me.columnDISCOUNTAMOUNT.ReadOnly = true
            Me.columnBILLAMOUNT.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnUOM.ReadOnly = true
            Me.columnQTY.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnDISCOUNT.ReadOnly = true
            Me.columnSGSTAMT.ReadOnly = true
            Me.columnCGSTAMT.ReadOnly = true
            Me.columnIGSTAMT.ReadOnly = true
            Me.columnpodate.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnOTHCHARGE.ReadOnly = true
            Me.columnAVOUCHERNO.ReadOnly = true
            Me.columnAVOUCHERDATE.ReadOnly = true
            Me.columnADJUSTEDAMOUNT.ReadOnly = true
            Me.columnPOSTING.ReadOnly = true
            Me.columnPONO.ReadOnly = true
            Me.columnSupplierinvno.ReadOnly = true
            Me.columnOVERALLDISCOUNT.ReadOnly = true
            Me.columnTAXAMOUNT.ReadOnly = true
            Me.columnSTOREDESC.ReadOnly = true
        End Sub
        
        Public Function NewVIEWPURCHASEREGISTERSUMMARY1Row() As VIEWPURCHASEREGISTERSUMMARY1Row
            Return CType(Me.NewRow,VIEWPURCHASEREGISTERSUMMARY1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEWPURCHASEREGISTERSUMMARY1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEWPURCHASEREGISTERSUMMARY1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARY1RowChangedEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARY1RowChanged(Me, New VIEWPURCHASEREGISTERSUMMARY1RowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARY1RowChangingEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARY1RowChanging(Me, New VIEWPURCHASEREGISTERSUMMARY1RowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARY1RowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARY1RowDeleted(Me, New VIEWPURCHASEREGISTERSUMMARY1RowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEWPURCHASEREGISTERSUMMARY1RowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEWPURCHASEREGISTERSUMMARY1RowDeleting(Me, New VIEWPURCHASEREGISTERSUMMARY1RowChangeEvent(CType(e.Row,VIEWPURCHASEREGISTERSUMMARY1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEWPURCHASEREGISTERSUMMARY1Row(ByVal row As VIEWPURCHASEREGISTERSUMMARY1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERSUMMARY1Row
        Inherits DataRow
        
        Private tableVIEWPURCHASEREGISTERSUMMARY1 As VIEWPURCHASEREGISTERSUMMARY1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEWPURCHASEREGISTERSUMMARY1 = CType(Me.Table,VIEWPURCHASEREGISTERSUMMARY1DataTable)
        End Sub
        
        Public Property GRNDETAILS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDETAILSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDETAILSColumn) = value
            End Set
        End Property
        
        Public Property GRNDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDATEColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIERCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERCODEColumn) = value
            End Set
        End Property
        
        Public Property SUPPLIERNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERNAMEColumn) = value
            End Set
        End Property
        
        Public Property GLACCOUNTCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCOUNTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTNAMEColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property VATAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.VATAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.VATAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SURCHARGEAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SURCHARGEAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SURCHARGEAMTColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BILLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.BILLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.BILLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.UOMColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.RATEColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property SGSTAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SGSTAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SGSTAMTColumn) = value
            End Set
        End Property
        
        Public Property CGSTAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.CGSTAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.CGSTAMTColumn) = value
            End Set
        End Property
        
        Public Property IGSTAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.IGSTAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.IGSTAMTColumn) = value
            End Set
        End Property
        
        Public Property podate As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.podateColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.podateColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property OTHCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OTHCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OTHCHARGEColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.adddateColumn) = value
            End Set
        End Property
        
        Public Property AVOUCHERNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERNOColumn) = value
            End Set
        End Property
        
        Public Property AVOUCHERDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERDATEColumn) = value
            End Set
        End Property
        
        Public Property ADJUSTEDAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ADJUSTEDAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ADJUSTEDAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property POSTING As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.POSTINGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.POSTINGColumn) = value
            End Set
        End Property
        
        Public Property PONO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.PONOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.PONOColumn) = value
            End Set
        End Property
        
        Public Property Supplierinvno As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SupplierinvnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SupplierinvnoColumn) = value
            End Set
        End Property
        
        Public Property OVERALLDISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OVERALLDISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OVERALLDISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property STOREDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.STOREDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.STOREDESCColumn) = value
            End Set
        End Property
        
        Public Function IsGRNDETAILSNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDETAILSColumn)
        End Function
        
        Public Sub SetGRNDETAILSNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDETAILSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGRNDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDATEColumn)
        End Function
        
        Public Sub SetGRNDATENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GRNDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUPPLIERCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERCODEColumn)
        End Function
        
        Public Sub SetSUPPLIERCODENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSUPPLIERNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERNAMEColumn)
        End Function
        
        Public Sub SetSUPPLIERNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SUPPLIERNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCOUNTCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTCODEColumn)
        End Function
        
        Public Sub SetGLACCOUNTCODENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCOUNTNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTNAMEColumn)
        End Function
        
        Public Sub SetGLACCOUNTNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.GLACCOUNTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.VATAMOUNTColumn)
        End Function
        
        Public Sub SetVATAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.VATAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSURCHARGEAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SURCHARGEAMTColumn)
        End Function
        
        Public Sub SetSURCHARGEAMTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SURCHARGEAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTAMOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.BILLAMOUNTColumn)
        End Function
        
        Public Sub SetBILLAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.BILLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSGSTAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SGSTAMTColumn)
        End Function
        
        Public Sub SetSGSTAMTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SGSTAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCGSTAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.CGSTAMTColumn)
        End Function
        
        Public Sub SetCGSTAMTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.CGSTAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsIGSTAMTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.IGSTAMTColumn)
        End Function
        
        Public Sub SetIGSTAMTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.IGSTAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspodateNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.podateColumn)
        End Function
        
        Public Sub SetpodateNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.podateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHCHARGENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OTHCHARGEColumn)
        End Function
        
        Public Sub SetOTHCHARGENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OTHCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAVOUCHERNONull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERNOColumn)
        End Function
        
        Public Sub SetAVOUCHERNONull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAVOUCHERDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERDATEColumn)
        End Function
        
        Public Sub SetAVOUCHERDATENull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.AVOUCHERDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADJUSTEDAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ADJUSTEDAMOUNTColumn)
        End Function
        
        Public Sub SetADJUSTEDAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.ADJUSTEDAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSTINGNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.POSTINGColumn)
        End Function
        
        Public Sub SetPOSTINGNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.POSTINGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPONONull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.PONOColumn)
        End Function
        
        Public Sub SetPONONull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.PONOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSupplierinvnoNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SupplierinvnoColumn)
        End Function
        
        Public Sub SetSupplierinvnoNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.SupplierinvnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOVERALLDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OVERALLDISCOUNTColumn)
        End Function
        
        Public Sub SetOVERALLDISCOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.OVERALLDISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTOREDESCNull() As Boolean
            Return Me.IsNull(Me.tableVIEWPURCHASEREGISTERSUMMARY1.STOREDESCColumn)
        End Function
        
        Public Sub SetSTOREDESCNull()
            Me(Me.tableVIEWPURCHASEREGISTERSUMMARY1.STOREDESCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEWPURCHASEREGISTERSUMMARY1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEWPURCHASEREGISTERSUMMARY1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEWPURCHASEREGISTERSUMMARY1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEWPURCHASEREGISTERSUMMARY1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
